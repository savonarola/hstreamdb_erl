%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(hstreamdb_api).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_hstream.server.SpecialOffset'/1, 'enum_value_by_symbol_hstream.server.SpecialOffset'/1]).
-export(['enum_symbol_by_value_h_stream_record_header.Flag'/1, 'enum_value_by_symbol_h_stream_record_header.Flag'/1]).
-export(['enum_symbol_by_value_hstream.server.TaskStatusPB'/1, 'enum_value_by_symbol_hstream.server.TaskStatusPB'/1]).
-export(['enum_symbol_by_value_hstream.server.NodeState'/1, 'enum_value_by_symbol_hstream.server.NodeState'/1]).
-export(['enum_symbol_by_value_google.protobuf.NullValue'/1, 'enum_value_by_symbol_google.protobuf.NullValue'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(map(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(map(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        shard_offset ->
            encode_msg_shard_offset(id(Msg, TrUserData),
                                    TrUserData);
        echo_request ->
            encode_msg_echo_request(id(Msg, TrUserData),
                                    TrUserData);
        echo_response ->
            encode_msg_echo_response(id(Msg, TrUserData),
                                     TrUserData);
        command_stream_task ->
            encode_msg_command_stream_task(id(Msg, TrUserData),
                                           TrUserData);
        command_stream_task_response ->
            encode_msg_command_stream_task_response(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        command_connect ->
            encode_msg_command_connect(id(Msg, TrUserData),
                                       TrUserData);
        command_connected ->
            encode_msg_command_connected(id(Msg, TrUserData),
                                         TrUserData);
        command_push_query ->
            encode_msg_command_push_query(id(Msg, TrUserData),
                                          TrUserData);
        command_query ->
            encode_msg_command_query(id(Msg, TrUserData),
                                     TrUserData);
        command_query_response ->
            encode_msg_command_query_response(id(Msg, TrUserData),
                                              TrUserData);
        append_request ->
            encode_msg_append_request(id(Msg, TrUserData),
                                      TrUserData);
        append_response ->
            encode_msg_append_response(id(Msg, TrUserData),
                                       TrUserData);
        subscription ->
            encode_msg_subscription(id(Msg, TrUserData),
                                    TrUserData);
        delete_subscription_request ->
            encode_msg_delete_subscription_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        check_subscription_exist_request ->
            encode_msg_check_subscription_exist_request(id(Msg,
                                                           TrUserData),
                                                        TrUserData);
        check_subscription_exist_response ->
            encode_msg_check_subscription_exist_response(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        streaming_fetch_request ->
            encode_msg_streaming_fetch_request(id(Msg, TrUserData),
                                               TrUserData);
        streaming_fetch_response ->
            encode_msg_streaming_fetch_response(id(Msg, TrUserData),
                                                TrUserData);
        received_record ->
            encode_msg_received_record(id(Msg, TrUserData),
                                       TrUserData);
        delete_stream_request ->
            encode_msg_delete_stream_request(id(Msg, TrUserData),
                                             TrUserData);
        list_streams_response ->
            encode_msg_list_streams_response(id(Msg, TrUserData),
                                             TrUserData);
        list_streams_request ->
            encode_msg_list_streams_request(id(Msg, TrUserData),
                                            TrUserData);
        list_subscriptions_request ->
            encode_msg_list_subscriptions_request(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        list_subscriptions_response ->
            encode_msg_list_subscriptions_response(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        stream ->
            encode_msg_stream(id(Msg, TrUserData), TrUserData);
        h_stream_record_batch ->
            encode_msg_h_stream_record_batch(id(Msg, TrUserData),
                                             TrUserData);
        h_stream_record ->
            encode_msg_h_stream_record(id(Msg, TrUserData),
                                       TrUserData);
        h_stream_record_header ->
            encode_msg_h_stream_record_header(id(Msg, TrUserData),
                                              TrUserData);
        record_id ->
            encode_msg_record_id(id(Msg, TrUserData), TrUserData);
        shard ->
            encode_msg_shard(id(Msg, TrUserData), TrUserData);
        list_shards_request ->
            encode_msg_list_shards_request(id(Msg, TrUserData),
                                           TrUserData);
        list_shards_response ->
            encode_msg_list_shards_response(id(Msg, TrUserData),
                                            TrUserData);
        create_shard_reader_request ->
            encode_msg_create_shard_reader_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        create_shard_reader_response ->
            encode_msg_create_shard_reader_response(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        read_shard_request ->
            encode_msg_read_shard_request(id(Msg, TrUserData),
                                          TrUserData);
        delete_shard_reader_request ->
            encode_msg_delete_shard_reader_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        read_shard_response ->
            encode_msg_read_shard_response(id(Msg, TrUserData),
                                           TrUserData);
        terminate_queries_request ->
            encode_msg_terminate_queries_request(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        terminate_queries_response ->
            encode_msg_terminate_queries_response(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        list_queries_request ->
            encode_msg_list_queries_request(id(Msg, TrUserData),
                                            TrUserData);
        list_queries_response ->
            encode_msg_list_queries_response(id(Msg, TrUserData),
                                             TrUserData);
        get_query_request ->
            encode_msg_get_query_request(id(Msg, TrUserData),
                                         TrUserData);
        query ->
            encode_msg_query(id(Msg, TrUserData), TrUserData);
        delete_query_request ->
            encode_msg_delete_query_request(id(Msg, TrUserData),
                                            TrUserData);
        delete_query_response ->
            encode_msg_delete_query_response(id(Msg, TrUserData),
                                             TrUserData);
        restart_query_request ->
            encode_msg_restart_query_request(id(Msg, TrUserData),
                                             TrUserData);
        restart_query_response ->
            encode_msg_restart_query_response(id(Msg, TrUserData),
                                              TrUserData);
        create_connector_request ->
            encode_msg_create_connector_request(id(Msg, TrUserData),
                                                TrUserData);
        list_connectors_request ->
            encode_msg_list_connectors_request(id(Msg, TrUserData),
                                               TrUserData);
        list_connectors_response ->
            encode_msg_list_connectors_response(id(Msg, TrUserData),
                                                TrUserData);
        get_connector_request ->
            encode_msg_get_connector_request(id(Msg, TrUserData),
                                             TrUserData);
        connector ->
            encode_msg_connector(id(Msg, TrUserData), TrUserData);
        delete_connector_request ->
            encode_msg_delete_connector_request(id(Msg, TrUserData),
                                                TrUserData);
        pause_connector_request ->
            encode_msg_pause_connector_request(id(Msg, TrUserData),
                                               TrUserData);
        resume_connector_request ->
            encode_msg_resume_connector_request(id(Msg, TrUserData),
                                                TrUserData);
        get_view_request ->
            encode_msg_get_view_request(id(Msg, TrUserData),
                                        TrUserData);
        delete_view_request ->
            encode_msg_delete_view_request(id(Msg, TrUserData),
                                           TrUserData);
        list_views_request ->
            encode_msg_list_views_request(id(Msg, TrUserData),
                                          TrUserData);
        list_views_response ->
            encode_msg_list_views_response(id(Msg, TrUserData),
                                           TrUserData);
        view ->
            encode_msg_view(id(Msg, TrUserData), TrUserData);
        get_node_request ->
            encode_msg_get_node_request(id(Msg, TrUserData),
                                        TrUserData);
        list_nodes_request ->
            encode_msg_list_nodes_request(id(Msg, TrUserData),
                                          TrUserData);
        list_nodes_response ->
            encode_msg_list_nodes_response(id(Msg, TrUserData),
                                           TrUserData);
        node ->
            encode_msg_node(id(Msg, TrUserData), TrUserData);
        stats_interval_vals ->
            encode_msg_stats_interval_vals(id(Msg, TrUserData),
                                           TrUserData);
        stats_double_vals ->
            encode_msg_stats_double_vals(id(Msg, TrUserData),
                                         TrUserData);
        admin_command_request ->
            encode_msg_admin_command_request(id(Msg, TrUserData),
                                             TrUserData);
        admin_command_response ->
            encode_msg_admin_command_response(id(Msg, TrUserData),
                                              TrUserData);
        per_stream_time_series_stats_request ->
            encode_msg_per_stream_time_series_stats_request(id(Msg,
                                                               TrUserData),
                                                            TrUserData);
        per_stream_time_series_stats_response ->
            encode_msg_per_stream_time_series_stats_response(id(Msg,
                                                                TrUserData),
                                                             TrUserData);
        per_stream_time_series_stats_all_response ->
            encode_msg_per_stream_time_series_stats_all_response(id(Msg,
                                                                    TrUserData),
                                                                 TrUserData);
        per_stream_time_series_stats_all_request ->
            encode_msg_per_stream_time_series_stats_all_request(id(Msg,
                                                                   TrUserData),
                                                                TrUserData);
        describe_cluster_response ->
            encode_msg_describe_cluster_response(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        server_node ->
            encode_msg_server_node(id(Msg, TrUserData), TrUserData);
        server_node_status ->
            encode_msg_server_node_status(id(Msg, TrUserData),
                                          TrUserData);
        lookup_shard_request ->
            encode_msg_lookup_shard_request(id(Msg, TrUserData),
                                            TrUserData);
        lookup_shard_response ->
            encode_msg_lookup_shard_response(id(Msg, TrUserData),
                                             TrUserData);
        lookup_subscription_request ->
            encode_msg_lookup_subscription_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        lookup_subscription_response ->
            encode_msg_lookup_subscription_response(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        lookup_connector_request ->
            encode_msg_lookup_connector_request(id(Msg, TrUserData),
                                                TrUserData);
        lookup_connector_response ->
            encode_msg_lookup_connector_response(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        lookup_shard_reader_request ->
            encode_msg_lookup_shard_reader_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        lookup_shard_reader_response ->
            encode_msg_lookup_shard_reader_response(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        struct ->
            encode_msg_struct(id(Msg, TrUserData), TrUserData);
        value ->
            encode_msg_value(id(Msg, TrUserData), TrUserData);
        list_value ->
            encode_msg_list_value(id(Msg, TrUserData), TrUserData);
        timestamp ->
            encode_msg_timestamp(id(Msg, TrUserData), TrUserData);
        empty ->
            encode_msg_empty(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_shard_offset(Msg, TrUserData) ->
    encode_msg_shard_offset(Msg, <<>>, TrUserData).


encode_msg_shard_offset(#{} = M, Bin, TrUserData) ->
    case M of
        #{offset := F1} ->
            case id(F1, TrUserData) of
                {specialOffset, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_enum_hstream.server.SpecialOffset'(TrTF1,
                                                              <<Bin/binary, 8>>,
                                                              TrUserData)
                    end;
                {recordOffset, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_shard_offset_recordOffset(TrTF1,
                                                           <<Bin/binary, 18>>,
                                                           TrUserData)
                    end
            end;
        _ -> Bin
    end.

encode_msg_echo_request(Msg, TrUserData) ->
    encode_msg_echo_request(Msg, <<>>, TrUserData).


encode_msg_echo_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{msg := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_echo_response(Msg, TrUserData) ->
    encode_msg_echo_response(Msg, <<>>, TrUserData).


encode_msg_echo_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{msg := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_stream_task(Msg, TrUserData) ->
    encode_msg_command_stream_task(Msg, <<>>, TrUserData).


encode_msg_command_stream_task(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{command_sql := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_stream_task_response(Msg,
                                        TrUserData) ->
    encode_msg_command_stream_task_response(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_command_stream_task_response(#{} = M, Bin,
                                        TrUserData) ->
    case M of
        #{command_resp := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_connect(Msg, TrUserData) ->
    encode_msg_command_connect(Msg, <<>>, TrUserData).


encode_msg_command_connect(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{client_version := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{protocol_version := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true ->
                       e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_command_connected(Msg, TrUserData) ->
    encode_msg_command_connected(Msg, <<>>, TrUserData).


encode_msg_command_connected(#{} = M, Bin,
                             TrUserData) ->
    B1 = case M of
             #{server_version := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{protocol_version := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true ->
                       e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_command_push_query(Msg, TrUserData) ->
    encode_msg_command_push_query(Msg, <<>>, TrUserData).


encode_msg_command_push_query(#{} = M, Bin,
                              TrUserData) ->
    case M of
        #{query_text := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_query(Msg, TrUserData) ->
    encode_msg_command_query(Msg, <<>>, TrUserData).


encode_msg_command_query(#{} = M, Bin, TrUserData) ->
    case M of
        #{stmt_text := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_query_response(Msg, TrUserData) ->
    encode_msg_command_query_response(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_command_query_response(#{} = M, Bin,
                                  TrUserData) ->
    case M of
        #{result_set := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_command_query_response_result_set(TrF1,
                                                             Bin,
                                                             TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_append_request(Msg, TrUserData) ->
    encode_msg_append_request(Msg, <<>>, TrUserData).


encode_msg_append_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{shardId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{records := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_append_request_records(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_append_response(Msg, TrUserData) ->
    encode_msg_append_response(Msg, <<>>, TrUserData).


encode_msg_append_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{shardId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{recordIds := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_append_response_recordIds(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_subscription(Msg, TrUserData) ->
    encode_msg_subscription(Msg, <<>>, TrUserData).


encode_msg_subscription(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{subscriptionId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{streamName := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{ackTimeoutSeconds := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true ->
                            e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{maxUnackedRecords := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true ->
                            e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{offset := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 'EARLIEST'; TrF5 =:= 0 -> B4;
                   true ->
                       'e_enum_hstream.server.SpecialOffset'(TrF5,
                                                             <<B4/binary, 40>>,
                                                             TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_delete_subscription_request(Msg,
                                       TrUserData) ->
    encode_msg_delete_subscription_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_delete_subscription_request(#{} = M, Bin,
                                       TrUserData) ->
    B1 = case M of
             #{subscriptionId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{force := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_check_subscription_exist_request(Msg,
                                            TrUserData) ->
    encode_msg_check_subscription_exist_request(Msg,
                                                <<>>,
                                                TrUserData).


encode_msg_check_subscription_exist_request(#{} = M,
                                            Bin, TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_check_subscription_exist_response(Msg,
                                             TrUserData) ->
    encode_msg_check_subscription_exist_response(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_check_subscription_exist_response(#{} = M,
                                             Bin, TrUserData) ->
    case M of
        #{exists := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_streaming_fetch_request(Msg, TrUserData) ->
    encode_msg_streaming_fetch_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_streaming_fetch_request(#{} = M, Bin,
                                   TrUserData) ->
    B1 = case M of
             #{subscriptionId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{consumerName := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{ackIds := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_streaming_fetch_request_ackIds(TrF3,
                                                          B2,
                                                          TrUserData)
            end;
        _ -> B2
    end.

encode_msg_streaming_fetch_response(Msg, TrUserData) ->
    encode_msg_streaming_fetch_response(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_streaming_fetch_response(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{receivedRecords := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_streaming_fetch_response_receivedRecords(TrF1,
                                                                    Bin,
                                                                    TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_received_record(Msg, TrUserData) ->
    encode_msg_received_record(Msg, <<>>, TrUserData).


encode_msg_received_record(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{recordId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_received_record_recordId(TrF1,
                                                              <<Bin/binary,
                                                                10>>,
                                                              TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{record := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_delete_stream_request(Msg, TrUserData) ->
    encode_msg_delete_stream_request(Msg, <<>>, TrUserData).


encode_msg_delete_stream_request(#{} = M, Bin,
                                 TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ignoreNonExist := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= false -> B1;
                        true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{force := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= false -> B2;
                   true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_list_streams_response(Msg, TrUserData) ->
    encode_msg_list_streams_response(Msg, <<>>, TrUserData).


encode_msg_list_streams_response(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{streams := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_streams_response_streams(TrF1,
                                                         Bin,
                                                         TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_list_streams_request(_Msg, _TrUserData) ->
    <<>>.

encode_msg_list_subscriptions_request(_Msg,
                                      _TrUserData) ->
    <<>>.

encode_msg_list_subscriptions_response(Msg,
                                       TrUserData) ->
    encode_msg_list_subscriptions_response(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_list_subscriptions_response(#{} = M, Bin,
                                       TrUserData) ->
    case M of
        #{subscription := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_subscriptions_response_subscription(TrF1,
                                                                    Bin,
                                                                    TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_stream(Msg, TrUserData) ->
    encode_msg_stream(Msg, <<>>, TrUserData).


encode_msg_stream(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{replicationFactor := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{backlogDuration := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{shardCount := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_h_stream_record_batch(Msg, TrUserData) ->
    encode_msg_h_stream_record_batch(Msg, <<>>, TrUserData).


encode_msg_h_stream_record_batch(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{batch := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_h_stream_record_batch_batch(TrF1,
                                                       Bin,
                                                       TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_h_stream_record(Msg, TrUserData) ->
    encode_msg_h_stream_record(Msg, <<>>, TrUserData).


encode_msg_h_stream_record(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{header := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_h_stream_record_header(TrF1,
                                                            <<Bin/binary, 10>>,
                                                            TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{payload := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_h_stream_record_header(Msg, TrUserData) ->
    encode_msg_h_stream_record_header(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_h_stream_record_header(#{} = M, Bin,
                                  TrUserData) ->
    B1 = case M of
             #{flag := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'JSON'; TrF1 =:= 0 -> Bin;
                        true ->
                            'e_enum_h_stream_record_header.Flag'(TrF1,
                                                                 <<Bin/binary,
                                                                   8>>,
                                                                 TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{attributes := F2} ->
                 TrF2 = 'tr_encode_h_stream_record_header.attributes'(F2,
                                                                      TrUserData),
                 if TrF2 == [] -> B1;
                    true ->
                        e_field_h_stream_record_header_attributes(TrF2,
                                                                  B1,
                                                                  TrUserData)
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{publish_time := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= undefined -> B2;
                        true ->
                            e_mfield_h_stream_record_header_publish_time(TrF3,
                                                                         <<B2/binary,
                                                                           26>>,
                                                                         TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{key := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_record_id(Msg, TrUserData) ->
    encode_msg_record_id(Msg, <<>>, TrUserData).


encode_msg_record_id(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{shardId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{batchId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{batchIndex := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_shard(Msg, TrUserData) ->
    encode_msg_shard(Msg, <<>>, TrUserData).


encode_msg_shard(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{shardId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{startHashRangeKey := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{endHashRangeKey := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{epoch := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{isActive := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                if TrF6 =:= false -> B5;
                   true -> e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_list_shards_request(Msg, TrUserData) ->
    encode_msg_list_shards_request(Msg, <<>>, TrUserData).


encode_msg_list_shards_request(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{streamName := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_list_shards_response(Msg, TrUserData) ->
    encode_msg_list_shards_response(Msg, <<>>, TrUserData).


encode_msg_list_shards_response(#{} = M, Bin,
                                TrUserData) ->
    case M of
        #{shards := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_shards_response_shards(TrF1,
                                                       Bin,
                                                       TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_create_shard_reader_request(Msg,
                                       TrUserData) ->
    encode_msg_create_shard_reader_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_create_shard_reader_request(#{} = M, Bin,
                                       TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{shardId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{shardOffset := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= undefined -> B2;
                        true ->
                            e_mfield_create_shard_reader_request_shardOffset(TrF3,
                                                                             <<B2/binary,
                                                                               26>>,
                                                                             TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{readerId := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{timeout := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 0 -> B4;
                   true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_create_shard_reader_response(Msg,
                                        TrUserData) ->
    encode_msg_create_shard_reader_response(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_create_shard_reader_response(#{} = M, Bin,
                                        TrUserData) ->
    B1 = case M of
             #{streamName := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{shardId := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{shardOffset := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= undefined -> B2;
                        true ->
                            e_mfield_create_shard_reader_response_shardOffset(TrF3,
                                                                              <<B2/binary,
                                                                                26>>,
                                                                              TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{readerId := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{timeout := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 0 -> B4;
                   true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_read_shard_request(Msg, TrUserData) ->
    encode_msg_read_shard_request(Msg, <<>>, TrUserData).


encode_msg_read_shard_request(#{} = M, Bin,
                              TrUserData) ->
    B1 = case M of
             #{readerId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{maxRecords := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_delete_shard_reader_request(Msg,
                                       TrUserData) ->
    encode_msg_delete_shard_reader_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_delete_shard_reader_request(#{} = M, Bin,
                                       TrUserData) ->
    case M of
        #{readerId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_read_shard_response(Msg, TrUserData) ->
    encode_msg_read_shard_response(Msg, <<>>, TrUserData).


encode_msg_read_shard_response(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{receivedRecords := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_read_shard_response_receivedRecords(TrF1,
                                                               Bin,
                                                               TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_terminate_queries_request(Msg, TrUserData) ->
    encode_msg_terminate_queries_request(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_terminate_queries_request(#{} = M, Bin,
                                     TrUserData) ->
    B1 = case M of
             #{queryId := F1} ->
                 TrF1 = id(F1, TrUserData),
                 if TrF1 == [] -> Bin;
                    true ->
                        e_field_terminate_queries_request_queryId(TrF1,
                                                                  Bin,
                                                                  TrUserData)
                 end;
             _ -> Bin
         end,
    case M of
        #{all := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_terminate_queries_response(Msg,
                                      TrUserData) ->
    encode_msg_terminate_queries_response(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_terminate_queries_response(#{} = M, Bin,
                                      TrUserData) ->
    case M of
        #{queryId := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_terminate_queries_response_queryId(TrF1,
                                                              Bin,
                                                              TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_list_queries_request(_Msg, _TrUserData) ->
    <<>>.

encode_msg_list_queries_response(Msg, TrUserData) ->
    encode_msg_list_queries_response(Msg, <<>>, TrUserData).


encode_msg_list_queries_response(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{queries := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_queries_response_queries(TrF1,
                                                         Bin,
                                                         TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_get_query_request(Msg, TrUserData) ->
    encode_msg_get_query_request(Msg, <<>>, TrUserData).


encode_msg_get_query_request(#{} = M, Bin,
                             TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_query(Msg, TrUserData) ->
    encode_msg_query(Msg, <<>>, TrUserData).


encode_msg_query(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{status := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'TASK_CREATING'; TrF2 =:= 0 -> B1;
                        true ->
                            'e_enum_hstream.server.TaskStatusPB'(TrF2,
                                                                 <<B1/binary,
                                                                   16>>,
                                                                 TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{createdTime := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true ->
                            e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{queryText := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_delete_query_request(Msg, TrUserData) ->
    encode_msg_delete_query_request(Msg, <<>>, TrUserData).


encode_msg_delete_query_request(#{} = M, Bin,
                                TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_delete_query_response(Msg, TrUserData) ->
    encode_msg_delete_query_response(Msg, <<>>, TrUserData).


encode_msg_delete_query_response(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{success := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_restart_query_request(Msg, TrUserData) ->
    encode_msg_restart_query_request(Msg, <<>>, TrUserData).


encode_msg_restart_query_request(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_restart_query_response(Msg, TrUserData) ->
    encode_msg_restart_query_response(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_restart_query_response(#{} = M, Bin,
                                  TrUserData) ->
    case M of
        #{success := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_create_connector_request(Msg, TrUserData) ->
    encode_msg_create_connector_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_create_connector_request(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{sql := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_list_connectors_request(_Msg, _TrUserData) ->
    <<>>.

encode_msg_list_connectors_response(Msg, TrUserData) ->
    encode_msg_list_connectors_response(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_list_connectors_response(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{connectors := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_connectors_response_connectors(TrF1,
                                                               Bin,
                                                               TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_get_connector_request(Msg, TrUserData) ->
    encode_msg_get_connector_request(Msg, <<>>, TrUserData).


encode_msg_get_connector_request(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_connector(Msg, TrUserData) ->
    encode_msg_connector(Msg, <<>>, TrUserData).


encode_msg_connector(#{} = M, Bin, TrUserData) ->
    case M of
        #{info := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_connector_info(TrF1,
                                               <<Bin/binary, 10>>,
                                               TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_delete_connector_request(Msg, TrUserData) ->
    encode_msg_delete_connector_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_delete_connector_request(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_pause_connector_request(Msg, TrUserData) ->
    encode_msg_pause_connector_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_pause_connector_request(#{} = M, Bin,
                                   TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_resume_connector_request(Msg, TrUserData) ->
    encode_msg_resume_connector_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_resume_connector_request(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_get_view_request(Msg, TrUserData) ->
    encode_msg_get_view_request(Msg, <<>>, TrUserData).


encode_msg_get_view_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{viewId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_delete_view_request(Msg, TrUserData) ->
    encode_msg_delete_view_request(Msg, <<>>, TrUserData).


encode_msg_delete_view_request(#{} = M, Bin,
                               TrUserData) ->
    B1 = case M of
             #{viewId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{ignoreNonExist := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_list_views_request(_Msg, _TrUserData) ->
    <<>>.

encode_msg_list_views_response(Msg, TrUserData) ->
    encode_msg_list_views_response(Msg, <<>>, TrUserData).


encode_msg_list_views_response(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{views := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_views_response_views(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_view(Msg, TrUserData) ->
    encode_msg_view(Msg, <<>>, TrUserData).


encode_msg_view(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{viewId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{status := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'TASK_CREATING'; TrF2 =:= 0 -> B1;
                        true ->
                            'e_enum_hstream.server.TaskStatusPB'(TrF2,
                                                                 <<B1/binary,
                                                                   16>>,
                                                                 TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{createdTime := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true ->
                            e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{sql := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{schema := F5} ->
            TrF5 = id(F5, TrUserData),
            if TrF5 == [] -> B4;
               true -> e_field_view_schema(TrF5, B4, TrUserData)
            end;
        _ -> B4
    end.

encode_msg_get_node_request(Msg, TrUserData) ->
    encode_msg_get_node_request(Msg, <<>>, TrUserData).


encode_msg_get_node_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true ->
                       e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_list_nodes_request(_Msg, _TrUserData) ->
    <<>>.

encode_msg_list_nodes_response(Msg, TrUserData) ->
    encode_msg_list_nodes_response(Msg, <<>>, TrUserData).


encode_msg_list_nodes_response(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{nodes := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_list_nodes_response_nodes(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_node(Msg, TrUserData) ->
    encode_msg_node(Msg, <<>>, TrUserData).


encode_msg_node(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true ->
                            e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{roles := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true -> e_field_node_roles(TrF2, B1, TrUserData)
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{address := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{status := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_stats_interval_vals(Msg, TrUserData) ->
    encode_msg_stats_interval_vals(Msg, <<>>, TrUserData).


encode_msg_stats_interval_vals(#{} = M, Bin,
                               TrUserData) ->
    case M of
        #{intervals := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_stats_interval_vals_intervals(TrF1,
                                                         Bin,
                                                         TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_stats_double_vals(Msg, TrUserData) ->
    encode_msg_stats_double_vals(Msg, <<>>, TrUserData).


encode_msg_stats_double_vals(#{} = M, Bin,
                             TrUserData) ->
    case M of
        #{vals := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_stats_double_vals_vals(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_admin_command_request(Msg, TrUserData) ->
    encode_msg_admin_command_request(Msg, <<>>, TrUserData).


encode_msg_admin_command_request(#{} = M, Bin,
                                 TrUserData) ->
    case M of
        #{command := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_admin_command_response(Msg, TrUserData) ->
    encode_msg_admin_command_response(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_admin_command_response(#{} = M, Bin,
                                  TrUserData) ->
    case M of
        #{result := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_per_stream_time_series_stats_request(Msg,
                                                TrUserData) ->
    encode_msg_per_stream_time_series_stats_request(Msg,
                                                    <<>>,
                                                    TrUserData).


encode_msg_per_stream_time_series_stats_request(#{} = M,
                                                Bin, TrUserData) ->
    B1 = case M of
             #{method := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{streamName := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{intervals := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= undefined -> B2;
                   true ->
                       e_mfield_per_stream_time_series_stats_request_intervals(TrF3,
                                                                               <<B2/binary,
                                                                                 26>>,
                                                                               TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_per_stream_time_series_stats_response(Msg,
                                                 TrUserData) ->
    encode_msg_per_stream_time_series_stats_response(Msg,
                                                     <<>>,
                                                     TrUserData).


encode_msg_per_stream_time_series_stats_response(#{} =
                                                     M,
                                                 Bin, TrUserData) ->
    case M of
        #{stats := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_per_stream_time_series_stats_response_stats(TrF1,
                                                                            <<Bin/binary,
                                                                              10>>,
                                                                            TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_per_stream_time_series_stats_all_response(Msg,
                                                     TrUserData) ->
    encode_msg_per_stream_time_series_stats_all_response(Msg,
                                                         <<>>,
                                                         TrUserData).


encode_msg_per_stream_time_series_stats_all_response(#{} =
                                                         M,
                                                     Bin, TrUserData) ->
    case M of
        #{stats := F1} ->
            TrF1 =
                'tr_encode_per_stream_time_series_stats_all_response.stats'(F1,
                                                                            TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_per_stream_time_series_stats_all_response_stats(TrF1,
                                                                           Bin,
                                                                           TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_per_stream_time_series_stats_all_request(Msg,
                                                    TrUserData) ->
    encode_msg_per_stream_time_series_stats_all_request(Msg,
                                                        <<>>,
                                                        TrUserData).


encode_msg_per_stream_time_series_stats_all_request(#{} =
                                                        M,
                                                    Bin, TrUserData) ->
    B1 = case M of
             #{method := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{intervals := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_per_stream_time_series_stats_all_request_intervals(TrF2,
                                                                                   <<B1/binary,
                                                                                     18>>,
                                                                                   TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_describe_cluster_response(Msg, TrUserData) ->
    encode_msg_describe_cluster_response(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_describe_cluster_response(#{} = M, Bin,
                                     TrUserData) ->
    B1 = case M of
             #{protocolVersion := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{serverVersion := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{serverNodes := F3} ->
                 TrF3 = id(F3, TrUserData),
                 if TrF3 == [] -> B2;
                    true ->
                        e_field_describe_cluster_response_serverNodes(TrF3,
                                                                      B2,
                                                                      TrUserData)
                 end;
             _ -> B2
         end,
    case M of
        #{serverNodesStatus := F4} ->
            TrF4 = id(F4, TrUserData),
            if TrF4 == [] -> B3;
               true ->
                   e_field_describe_cluster_response_serverNodesStatus(TrF4,
                                                                       B3,
                                                                       TrUserData)
            end;
        _ -> B3
    end.

encode_msg_server_node(Msg, TrUserData) ->
    encode_msg_server_node(Msg, <<>>, TrUserData).


encode_msg_server_node(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{host := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{port := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_server_node_status(Msg, TrUserData) ->
    encode_msg_server_node_status(Msg, <<>>, TrUserData).


encode_msg_server_node_status(#{} = M, Bin,
                              TrUserData) ->
    B1 = case M of
             #{node := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_server_node_status_node(TrF1,
                                                             <<Bin/binary, 10>>,
                                                             TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{state := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 'Starting'; TrF2 =:= 0 -> B1;
                   true ->
                       'e_enum_hstream.server.NodeState'(TrF2,
                                                         <<B1/binary, 16>>,
                                                         TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_lookup_shard_request(Msg, TrUserData) ->
    encode_msg_lookup_shard_request(Msg, <<>>, TrUserData).


encode_msg_lookup_shard_request(#{} = M, Bin,
                                TrUserData) ->
    case M of
        #{shardId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_lookup_shard_response(Msg, TrUserData) ->
    encode_msg_lookup_shard_response(Msg, <<>>, TrUserData).


encode_msg_lookup_shard_response(#{} = M, Bin,
                                 TrUserData) ->
    B1 = case M of
             #{shardId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{serverNode := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_lookup_shard_response_serverNode(TrF2,
                                                                 <<B1/binary,
                                                                   18>>,
                                                                 TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_lookup_subscription_request(Msg,
                                       TrUserData) ->
    encode_msg_lookup_subscription_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_lookup_subscription_request(#{} = M, Bin,
                                       TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_lookup_subscription_response(Msg,
                                        TrUserData) ->
    encode_msg_lookup_subscription_response(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_lookup_subscription_response(#{} = M, Bin,
                                        TrUserData) ->
    B1 = case M of
             #{subscriptionId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{serverNode := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_lookup_subscription_response_serverNode(TrF2,
                                                                        <<B1/binary,
                                                                          18>>,
                                                                        TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_lookup_connector_request(Msg, TrUserData) ->
    encode_msg_lookup_connector_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_lookup_connector_request(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_lookup_connector_response(Msg, TrUserData) ->
    encode_msg_lookup_connector_response(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_lookup_connector_response(#{} = M, Bin,
                                     TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{serverNode := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_lookup_connector_response_serverNode(TrF2,
                                                                     <<B1/binary,
                                                                       18>>,
                                                                     TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_lookup_shard_reader_request(Msg,
                                       TrUserData) ->
    encode_msg_lookup_shard_reader_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_lookup_shard_reader_request(#{} = M, Bin,
                                       TrUserData) ->
    case M of
        #{readerId := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false ->
                        e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_lookup_shard_reader_response(Msg,
                                        TrUserData) ->
    encode_msg_lookup_shard_reader_response(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_lookup_shard_reader_response(#{} = M, Bin,
                                        TrUserData) ->
    B1 = case M of
             #{readerId := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{serverNode := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_lookup_shard_reader_response_serverNode(TrF2,
                                                                        <<B1/binary,
                                                                          18>>,
                                                                        TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_struct(Msg, TrUserData) ->
    encode_msg_struct(Msg, <<>>, TrUserData).


encode_msg_struct(#{} = M, Bin, TrUserData) ->
    case M of
        #{fields := F1} ->
            TrF1 = 'tr_encode_struct.fields'(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_struct_fields(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_value(Msg, TrUserData) ->
    encode_msg_value(Msg, <<>>, TrUserData).


encode_msg_value(#{} = M, Bin, TrUserData) ->
    case M of
        #{kind := F1} ->
            case id(F1, TrUserData) of
                {null_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        'e_enum_google.protobuf.NullValue'(TrTF1,
                                                           <<Bin/binary, 8>>,
                                                           TrUserData)
                    end;
                {number_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_type_double(TrTF1, <<Bin/binary, 17>>, TrUserData)
                    end;
                {string_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_type_string(TrTF1, <<Bin/binary, 26>>, TrUserData)
                    end;
                {bool_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_type_bool(TrTF1, <<Bin/binary, 32>>, TrUserData)
                    end;
                {struct_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_value_struct_value(TrTF1,
                                                    <<Bin/binary, 42>>,
                                                    TrUserData)
                    end;
                {list_value, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_value_list_value(TrTF1,
                                                  <<Bin/binary, 50>>,
                                                  TrUserData)
                    end
            end;
        _ -> Bin
    end.

encode_msg_list_value(Msg, TrUserData) ->
    encode_msg_list_value(Msg, <<>>, TrUserData).


encode_msg_list_value(#{} = M, Bin, TrUserData) ->
    case M of
        #{values := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_list_value_values(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{seconds := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true ->
                            e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{nanos := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true ->
                       e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_empty(_Msg, _TrUserData) -> <<>>.

e_mfield_shard_offset_recordOffset(Msg, Bin,
                                   TrUserData) ->
    SubBin = encode_msg_record_id(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_command_query_response_result_set(Msg, Bin,
                                           TrUserData) ->
    SubBin = encode_msg_struct(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_command_query_response_result_set([Elem | Rest],
                                          Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_command_query_response_result_set(id(Elem,
                                                      TrUserData),
                                                   Bin2,
                                                   TrUserData),
    e_field_command_query_response_result_set(Rest,
                                              Bin3,
                                              TrUserData);
e_field_command_query_response_result_set([], Bin,
                                          _TrUserData) ->
    Bin.

e_mfield_append_request_records(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_h_stream_record(Msg,
                                        <<>>,
                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_append_request_records([Elem | Rest], Bin,
                               TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_append_request_records(id(Elem,
                                              TrUserData),
                                           Bin2,
                                           TrUserData),
    e_field_append_request_records(Rest, Bin3, TrUserData);
e_field_append_request_records([], Bin, _TrUserData) ->
    Bin.

e_mfield_append_response_recordIds(Msg, Bin,
                                   TrUserData) ->
    SubBin = encode_msg_record_id(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_append_response_recordIds([Elem | Rest], Bin,
                                  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_append_response_recordIds(id(Elem,
                                                 TrUserData),
                                              Bin2,
                                              TrUserData),
    e_field_append_response_recordIds(Rest,
                                      Bin3,
                                      TrUserData);
e_field_append_response_recordIds([], Bin,
                                  _TrUserData) ->
    Bin.

e_mfield_streaming_fetch_request_ackIds(Msg, Bin,
                                        TrUserData) ->
    SubBin = encode_msg_record_id(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_streaming_fetch_request_ackIds([Elem | Rest],
                                       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_streaming_fetch_request_ackIds(id(Elem,
                                                      TrUserData),
                                                   Bin2,
                                                   TrUserData),
    e_field_streaming_fetch_request_ackIds(Rest,
                                           Bin3,
                                           TrUserData);
e_field_streaming_fetch_request_ackIds([], Bin,
                                       _TrUserData) ->
    Bin.

e_mfield_streaming_fetch_response_receivedRecords(Msg,
                                                  Bin, TrUserData) ->
    SubBin = encode_msg_received_record(Msg,
                                        <<>>,
                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_streaming_fetch_response_receivedRecords([Elem
                                                  | Rest],
                                                 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_streaming_fetch_response_receivedRecords(id(Elem,
                                                             TrUserData),
                                                          Bin2,
                                                          TrUserData),
    e_field_streaming_fetch_response_receivedRecords(Rest,
                                                     Bin3,
                                                     TrUserData);
e_field_streaming_fetch_response_receivedRecords([],
                                                 Bin, _TrUserData) ->
    Bin.

e_mfield_received_record_recordId(Msg, Bin,
                                  TrUserData) ->
    SubBin = encode_msg_record_id(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_streams_response_streams(Msg, Bin,
                                       TrUserData) ->
    SubBin = encode_msg_stream(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_streams_response_streams([Elem | Rest],
                                      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_streams_response_streams(id(Elem,
                                                     TrUserData),
                                                  Bin2,
                                                  TrUserData),
    e_field_list_streams_response_streams(Rest,
                                          Bin3,
                                          TrUserData);
e_field_list_streams_response_streams([], Bin,
                                      _TrUserData) ->
    Bin.

e_mfield_list_subscriptions_response_subscription(Msg,
                                                  Bin, TrUserData) ->
    SubBin = encode_msg_subscription(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_subscriptions_response_subscription([Elem
                                                  | Rest],
                                                 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_list_subscriptions_response_subscription(id(Elem,
                                                             TrUserData),
                                                          Bin2,
                                                          TrUserData),
    e_field_list_subscriptions_response_subscription(Rest,
                                                     Bin3,
                                                     TrUserData);
e_field_list_subscriptions_response_subscription([],
                                                 Bin, _TrUserData) ->
    Bin.

e_field_h_stream_record_batch_batch([Elem | Rest], Bin,
                                    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_h_stream_record_batch_batch(Rest,
                                        Bin3,
                                        TrUserData);
e_field_h_stream_record_batch_batch([], Bin,
                                    _TrUserData) ->
    Bin.

e_mfield_h_stream_record_header(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_h_stream_record_header(Msg,
                                               <<>>,
                                               TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_h_stream_record_header_attributes(Msg, Bin,
                                           TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg,
                                             <<>>,
                                             TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_h_stream_record_header_attributes([Elem | Rest],
                                          Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
        e_mfield_h_stream_record_header_attributes('tr_encode_h_stream_record_header.attributes[x]'(Elem,
                                                                                                    TrUserData),
                                                   Bin2,
                                                   TrUserData),
    e_field_h_stream_record_header_attributes(Rest,
                                              Bin3,
                                              TrUserData);
e_field_h_stream_record_header_attributes([], Bin,
                                          _TrUserData) ->
    Bin.

e_mfield_h_stream_record_header_publish_time(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_shards_response_shards(Msg, Bin,
                                     TrUserData) ->
    SubBin = encode_msg_shard(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_shards_response_shards([Elem | Rest], Bin,
                                    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_shards_response_shards(id(Elem,
                                                   TrUserData),
                                                Bin2,
                                                TrUserData),
    e_field_list_shards_response_shards(Rest,
                                        Bin3,
                                        TrUserData);
e_field_list_shards_response_shards([], Bin,
                                    _TrUserData) ->
    Bin.

e_mfield_create_shard_reader_request_shardOffset(Msg,
                                                 Bin, TrUserData) ->
    SubBin = encode_msg_shard_offset(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_create_shard_reader_response_shardOffset(Msg,
                                                  Bin, TrUserData) ->
    SubBin = encode_msg_shard_offset(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_read_shard_response_receivedRecords(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_received_record(Msg,
                                        <<>>,
                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_read_shard_response_receivedRecords([Elem
                                             | Rest],
                                            Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_read_shard_response_receivedRecords(id(Elem,
                                                        TrUserData),
                                                     Bin2,
                                                     TrUserData),
    e_field_read_shard_response_receivedRecords(Rest,
                                                Bin3,
                                                TrUserData);
e_field_read_shard_response_receivedRecords([], Bin,
                                            _TrUserData) ->
    Bin.

e_field_terminate_queries_request_queryId([Elem | Rest],
                                          Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_terminate_queries_request_queryId(Rest,
                                              Bin3,
                                              TrUserData);
e_field_terminate_queries_request_queryId([], Bin,
                                          _TrUserData) ->
    Bin.

e_field_terminate_queries_response_queryId([Elem
                                            | Rest],
                                           Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_terminate_queries_response_queryId(Rest,
                                               Bin3,
                                               TrUserData);
e_field_terminate_queries_response_queryId([], Bin,
                                           _TrUserData) ->
    Bin.

e_mfield_list_queries_response_queries(Msg, Bin,
                                       TrUserData) ->
    SubBin = encode_msg_query(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_queries_response_queries([Elem | Rest],
                                      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_queries_response_queries(id(Elem,
                                                     TrUserData),
                                                  Bin2,
                                                  TrUserData),
    e_field_list_queries_response_queries(Rest,
                                          Bin3,
                                          TrUserData);
e_field_list_queries_response_queries([], Bin,
                                      _TrUserData) ->
    Bin.

e_mfield_list_connectors_response_connectors(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_connector(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_connectors_response_connectors([Elem
                                             | Rest],
                                            Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_list_connectors_response_connectors(id(Elem,
                                                        TrUserData),
                                                     Bin2,
                                                     TrUserData),
    e_field_list_connectors_response_connectors(Rest,
                                                Bin3,
                                                TrUserData);
e_field_list_connectors_response_connectors([], Bin,
                                            _TrUserData) ->
    Bin.

e_mfield_connector_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_struct(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_views_response_views(Msg, Bin,
                                   TrUserData) ->
    SubBin = encode_msg_view(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_views_response_views([Elem | Rest], Bin,
                                  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_views_response_views(id(Elem,
                                                 TrUserData),
                                              Bin2,
                                              TrUserData),
    e_field_list_views_response_views(Rest,
                                      Bin3,
                                      TrUserData);
e_field_list_views_response_views([], Bin,
                                  _TrUserData) ->
    Bin.

e_field_view_schema([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_view_schema(Rest, Bin3, TrUserData);
e_field_view_schema([], Bin, _TrUserData) -> Bin.

e_mfield_list_nodes_response_nodes(Msg, Bin,
                                   TrUserData) ->
    SubBin = encode_msg_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_nodes_response_nodes([Elem | Rest], Bin,
                                  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_nodes_response_nodes(id(Elem,
                                                 TrUserData),
                                              Bin2,
                                              TrUserData),
    e_field_list_nodes_response_nodes(Rest,
                                      Bin3,
                                      TrUserData);
e_field_list_nodes_response_nodes([], Bin,
                                  _TrUserData) ->
    Bin.

e_field_node_roles(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_node_roles(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_node_roles([], Bin, _TrUserData) -> Bin.

e_pfield_node_roles([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData),
                        Bin,
                        TrUserData),
    e_pfield_node_roles(Rest, Bin2, TrUserData);
e_pfield_node_roles([], Bin, _TrUserData) -> Bin.

e_field_stats_interval_vals_intervals(Elems, Bin,
                                      TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_stats_interval_vals_intervals(Elems,
                                                    <<>>,
                                                    TrUserData),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_stats_interval_vals_intervals([], Bin,
                                      _TrUserData) ->
    Bin.

e_pfield_stats_interval_vals_intervals([Value | Rest],
                                       Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData),
                        Bin,
                        TrUserData),
    e_pfield_stats_interval_vals_intervals(Rest,
                                           Bin2,
                                           TrUserData);
e_pfield_stats_interval_vals_intervals([], Bin,
                                       _TrUserData) ->
    Bin.

e_field_stats_double_vals_vals(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_stats_double_vals_vals(Elems,
                                    Bin3,
                                    TrUserData);
e_field_stats_double_vals_vals([], Bin, _TrUserData) ->
    Bin.

e_pfield_stats_double_vals_vals([V | Rest], Bin,
                                TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) ->
                  <<Bin/binary, TrV:64/float-little>>;
              TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
           end,
    e_pfield_stats_double_vals_vals(Rest, Bin2, TrUserData);
e_pfield_stats_double_vals_vals([], Bin, _TrUserData) ->
    Bin.

e_mfield_per_stream_time_series_stats_request_intervals(Msg,
                                                        Bin, TrUserData) ->
    SubBin = encode_msg_stats_interval_vals(Msg,
                                            <<>>,
                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_per_stream_time_series_stats_response_stats(Msg,
                                                     Bin, TrUserData) ->
    SubBin = encode_msg_stats_double_vals(Msg,
                                          <<>>,
                                          TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_per_stream_time_series_stats_all_response_stats(Msg,
                                                         Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,stats_double_vals>'(Msg,
                                                        <<>>,
                                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_per_stream_time_series_stats_all_response_stats([Elem
                                                         | Rest],
                                                        Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_per_stream_time_series_stats_all_response_stats('tr_encode_per_stream_time_series_stats_all_response.stats[x]'(Elem,
                                                                                                                                TrUserData),
                                                                 Bin2,
                                                                 TrUserData),
    e_field_per_stream_time_series_stats_all_response_stats(Rest,
                                                            Bin3,
                                                            TrUserData);
e_field_per_stream_time_series_stats_all_response_stats([],
                                                        Bin, _TrUserData) ->
    Bin.

e_mfield_per_stream_time_series_stats_all_request_intervals(Msg,
                                                            Bin, TrUserData) ->
    SubBin = encode_msg_stats_interval_vals(Msg,
                                            <<>>,
                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_describe_cluster_response_serverNodes(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_describe_cluster_response_serverNodes([Elem
                                               | Rest],
                                              Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
        e_mfield_describe_cluster_response_serverNodes(id(Elem,
                                                          TrUserData),
                                                       Bin2,
                                                       TrUserData),
    e_field_describe_cluster_response_serverNodes(Rest,
                                                  Bin3,
                                                  TrUserData);
e_field_describe_cluster_response_serverNodes([], Bin,
                                              _TrUserData) ->
    Bin.

e_mfield_describe_cluster_response_serverNodesStatus(Msg,
                                                     Bin, TrUserData) ->
    SubBin = encode_msg_server_node_status(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_describe_cluster_response_serverNodesStatus([Elem
                                                     | Rest],
                                                    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
        e_mfield_describe_cluster_response_serverNodesStatus(id(Elem,
                                                                TrUserData),
                                                             Bin2,
                                                             TrUserData),
    e_field_describe_cluster_response_serverNodesStatus(Rest,
                                                        Bin3,
                                                        TrUserData);
e_field_describe_cluster_response_serverNodesStatus([],
                                                    Bin, _TrUserData) ->
    Bin.

e_mfield_server_node_status_node(Msg, Bin,
                                 TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_lookup_shard_response_serverNode(Msg, Bin,
                                          TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_lookup_subscription_response_serverNode(Msg,
                                                 Bin, TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_lookup_connector_response_serverNode(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_lookup_shard_reader_response_serverNode(Msg,
                                                 Bin, TrUserData) ->
    SubBin = encode_msg_server_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_struct_fields(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,value>'(Msg,
                                            <<>>,
                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_struct_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_struct_fields('tr_encode_struct.fields[x]'(Elem,
                                                            TrUserData),
                               Bin2,
                               TrUserData),
    e_field_struct_fields(Rest, Bin3, TrUserData);
e_field_struct_fields([], Bin, _TrUserData) -> Bin.

e_mfield_value_struct_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_struct(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_value_list_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_list_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_value_values(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_value_values([Elem | Rest], Bin,
                          TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_value_values(id(Elem, TrUserData),
                                      Bin2,
                                      TrUserData),
    e_field_list_value_values(Rest, Bin3, TrUserData);
e_field_list_value_values([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,string>'(#{key := F1,
                                  value := F2},
                                Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<string,stats_double_vals>'(#{key := F1,
                                             value := F2},
                                           Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        'e_mfield_map<string,stats_double_vals>_value'(TrF2,
                                                       <<B1/binary, 18>>,
                                                       TrUserData)
    end.

'encode_msg_map<string,value>'(#{key := F1,
                                 value := F2},
                               Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        'e_mfield_map<string,value>_value'(TrF2,
                                           <<B1/binary, 18>>,
                                           TrUserData)
    end.

'e_mfield_map<string,stats_double_vals>_value'(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_stats_double_vals(Msg,
                                          <<>>,
                                          TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<string,value>_value'(Msg, Bin,
                                   TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_hstream.server.SpecialOffset'('EARLIEST', Bin,
                                      _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_hstream.server.SpecialOffset'('LATEST', Bin,
                                      _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_hstream.server.SpecialOffset'(V, Bin,
                                      _TrUserData) ->
    e_varint(V, Bin).

'e_enum_h_stream_record_header.Flag'('JSON', Bin,
                                     _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_h_stream_record_header.Flag'('RAW', Bin,
                                     _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_h_stream_record_header.Flag'(V, Bin,
                                     _TrUserData) ->
    e_varint(V, Bin).

'e_enum_hstream.server.TaskStatusPB'('TASK_CREATING',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_hstream.server.TaskStatusPB'('TASK_CREATED',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_hstream.server.TaskStatusPB'('TASK_RUNNING',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_hstream.server.TaskStatusPB'('TASK_CREATION_ABORT',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_hstream.server.TaskStatusPB'('TASK_CONNECTION_ABORT',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_hstream.server.TaskStatusPB'('TASK_TERMINATED',
                                     Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_hstream.server.TaskStatusPB'(V, Bin,
                                     _TrUserData) ->
    e_varint(V, Bin).

'e_enum_hstream.server.NodeState'('Starting', Bin,
                                  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_hstream.server.NodeState'('Running', Bin,
                                  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_hstream.server.NodeState'('Unavailable', Bin,
                                  _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_hstream.server.NodeState'('Dead', Bin,
                                  _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_hstream.server.NodeState'(V, Bin,
                                  _TrUserData) ->
    e_varint(V, Bin).

'e_enum_google.protobuf.NullValue'('NULL_VALUE', Bin,
                                   _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_google.protobuf.NullValue'(V, Bin,
                                   _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(shard_offset, Bin, TrUserData) ->
    id(decode_msg_shard_offset(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(echo_request, Bin, TrUserData) ->
    id(decode_msg_echo_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(echo_response, Bin, TrUserData) ->
    id(decode_msg_echo_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_stream_task, Bin,
                  TrUserData) ->
    id(decode_msg_command_stream_task(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_stream_task_response, Bin,
                  TrUserData) ->
    id(decode_msg_command_stream_task_response(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(command_connect, Bin, TrUserData) ->
    id(decode_msg_command_connect(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_connected, Bin, TrUserData) ->
    id(decode_msg_command_connected(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_push_query, Bin,
                  TrUserData) ->
    id(decode_msg_command_push_query(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_query, Bin, TrUserData) ->
    id(decode_msg_command_query(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(command_query_response, Bin,
                  TrUserData) ->
    id(decode_msg_command_query_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(append_request, Bin, TrUserData) ->
    id(decode_msg_append_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(append_response, Bin, TrUserData) ->
    id(decode_msg_append_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(subscription, Bin, TrUserData) ->
    id(decode_msg_subscription(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_subscription_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_subscription_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(check_subscription_exist_request, Bin,
                  TrUserData) ->
    id(decode_msg_check_subscription_exist_request(Bin,
                                                   TrUserData),
       TrUserData);
decode_msg_2_doit(check_subscription_exist_response,
                  Bin, TrUserData) ->
    id(decode_msg_check_subscription_exist_response(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(streaming_fetch_request, Bin,
                  TrUserData) ->
    id(decode_msg_streaming_fetch_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(streaming_fetch_response, Bin,
                  TrUserData) ->
    id(decode_msg_streaming_fetch_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(received_record, Bin, TrUserData) ->
    id(decode_msg_received_record(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_stream_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_stream_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_streams_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_streams_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_streams_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_streams_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_subscriptions_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_subscriptions_request(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(list_subscriptions_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_subscriptions_response(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(stream, Bin, TrUserData) ->
    id(decode_msg_stream(Bin, TrUserData), TrUserData);
decode_msg_2_doit(h_stream_record_batch, Bin,
                  TrUserData) ->
    id(decode_msg_h_stream_record_batch(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(h_stream_record, Bin, TrUserData) ->
    id(decode_msg_h_stream_record(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(h_stream_record_header, Bin,
                  TrUserData) ->
    id(decode_msg_h_stream_record_header(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(record_id, Bin, TrUserData) ->
    id(decode_msg_record_id(Bin, TrUserData), TrUserData);
decode_msg_2_doit(shard, Bin, TrUserData) ->
    id(decode_msg_shard(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_shards_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_shards_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_shards_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_shards_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(create_shard_reader_request, Bin,
                  TrUserData) ->
    id(decode_msg_create_shard_reader_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(create_shard_reader_response, Bin,
                  TrUserData) ->
    id(decode_msg_create_shard_reader_response(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(read_shard_request, Bin,
                  TrUserData) ->
    id(decode_msg_read_shard_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_shard_reader_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_shard_reader_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(read_shard_response, Bin,
                  TrUserData) ->
    id(decode_msg_read_shard_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(terminate_queries_request, Bin,
                  TrUserData) ->
    id(decode_msg_terminate_queries_request(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(terminate_queries_response, Bin,
                  TrUserData) ->
    id(decode_msg_terminate_queries_response(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(list_queries_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_queries_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_queries_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_queries_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_query_request, Bin, TrUserData) ->
    id(decode_msg_get_query_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(query, Bin, TrUserData) ->
    id(decode_msg_query(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_query_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_query_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_query_response, Bin,
                  TrUserData) ->
    id(decode_msg_delete_query_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(restart_query_request, Bin,
                  TrUserData) ->
    id(decode_msg_restart_query_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(restart_query_response, Bin,
                  TrUserData) ->
    id(decode_msg_restart_query_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(create_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_create_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_connectors_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_connectors_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_connectors_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_connectors_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_get_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(connector, Bin, TrUserData) ->
    id(decode_msg_connector(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(pause_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_pause_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(resume_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_resume_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_view_request, Bin, TrUserData) ->
    id(decode_msg_get_view_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_view_request, Bin,
                  TrUserData) ->
    id(decode_msg_delete_view_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_views_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_views_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_views_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_views_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(view, Bin, TrUserData) ->
    id(decode_msg_view(Bin, TrUserData), TrUserData);
decode_msg_2_doit(get_node_request, Bin, TrUserData) ->
    id(decode_msg_get_node_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_nodes_request, Bin,
                  TrUserData) ->
    id(decode_msg_list_nodes_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(list_nodes_response, Bin,
                  TrUserData) ->
    id(decode_msg_list_nodes_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(node, Bin, TrUserData) ->
    id(decode_msg_node(Bin, TrUserData), TrUserData);
decode_msg_2_doit(stats_interval_vals, Bin,
                  TrUserData) ->
    id(decode_msg_stats_interval_vals(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stats_double_vals, Bin, TrUserData) ->
    id(decode_msg_stats_double_vals(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(admin_command_request, Bin,
                  TrUserData) ->
    id(decode_msg_admin_command_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(admin_command_response, Bin,
                  TrUserData) ->
    id(decode_msg_admin_command_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(per_stream_time_series_stats_request,
                  Bin, TrUserData) ->
    id(decode_msg_per_stream_time_series_stats_request(Bin,
                                                       TrUserData),
       TrUserData);
decode_msg_2_doit(per_stream_time_series_stats_response,
                  Bin, TrUserData) ->
    id(decode_msg_per_stream_time_series_stats_response(Bin,
                                                        TrUserData),
       TrUserData);
decode_msg_2_doit(per_stream_time_series_stats_all_response,
                  Bin, TrUserData) ->
    id(decode_msg_per_stream_time_series_stats_all_response(Bin,
                                                            TrUserData),
       TrUserData);
decode_msg_2_doit(per_stream_time_series_stats_all_request,
                  Bin, TrUserData) ->
    id(decode_msg_per_stream_time_series_stats_all_request(Bin,
                                                           TrUserData),
       TrUserData);
decode_msg_2_doit(describe_cluster_response, Bin,
                  TrUserData) ->
    id(decode_msg_describe_cluster_response(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(server_node, Bin, TrUserData) ->
    id(decode_msg_server_node(Bin, TrUserData), TrUserData);
decode_msg_2_doit(server_node_status, Bin,
                  TrUserData) ->
    id(decode_msg_server_node_status(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_shard_request, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_shard_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_shard_response, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_shard_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_subscription_request, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_subscription_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_subscription_response, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_subscription_response(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_connector_request, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_connector_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_connector_response, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_connector_response(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_shard_reader_request, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_shard_reader_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(lookup_shard_reader_response, Bin,
                  TrUserData) ->
    id(decode_msg_lookup_shard_reader_response(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(struct, Bin, TrUserData) ->
    id(decode_msg_struct(Bin, TrUserData), TrUserData);
decode_msg_2_doit(value, Bin, TrUserData) ->
    id(decode_msg_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_value, Bin, TrUserData) ->
    id(decode_msg_list_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(empty, Bin, TrUserData) ->
    id(decode_msg_empty(Bin, TrUserData), TrUserData).



decode_msg_shard_offset(Bin, TrUserData) ->
    dfp_read_field_def_shard_offset(Bin,
                                    0,
                                    0,
                                    id('$undef', TrUserData),
                                    TrUserData).

dfp_read_field_def_shard_offset(<<8, Rest/binary>>, Z1,
                                Z2, F@_1, TrUserData) ->
    d_field_shard_offset_specialOffset(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
dfp_read_field_def_shard_offset(<<18, Rest/binary>>, Z1,
                                Z2, F@_1, TrUserData) ->
    d_field_shard_offset_recordOffset(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
dfp_read_field_def_shard_offset(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{offset => F@_1}
    end;
dfp_read_field_def_shard_offset(Other, Z1, Z2, F@_1,
                                TrUserData) ->
    dg_read_field_def_shard_offset(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

dg_read_field_def_shard_offset(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_shard_offset(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   TrUserData);
dg_read_field_def_shard_offset(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_shard_offset_specialOffset(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
        18 ->
            d_field_shard_offset_recordOffset(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_shard_offset(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_shard_offset(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_shard_offset(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                3 ->
                    skip_group_shard_offset(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            TrUserData);
                5 -> skip_32_shard_offset(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_shard_offset(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{offset => F@_1}
    end.

d_field_shard_offset_specialOffset(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_shard_offset_specialOffset(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
d_field_shard_offset_specialOffset(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_hstream.server.SpecialOffset'(begin
                                                      <<Res:32/signed-native>> =
                                                          <<(X bsl N +
                                                                 Acc):32/unsigned-native>>,
                                                      id(Res, TrUserData)
                                                  end),
            TrUserData),
         Rest},
    dfp_read_field_def_shard_offset(RestF,
                                    0,
                                    0,
                                    id({specialOffset, NewFValue}, TrUserData),
                                    TrUserData).

d_field_shard_offset_recordOffset(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_shard_offset_recordOffset(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
d_field_shard_offset_recordOffset(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_record_id(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_shard_offset(RestF,
                                    0,
                                    0,
                                    case Prev of
                                        '$undef' ->
                                            id({recordOffset, NewFValue},
                                               TrUserData);
                                        {recordOffset, MVPrev} ->
                                            id({recordOffset,
                                                merge_msg_record_id(MVPrev,
                                                                    NewFValue,
                                                                    TrUserData)},
                                               TrUserData);
                                        _ ->
                                            id({recordOffset, NewFValue},
                                               TrUserData)
                                    end,
                                    TrUserData).

skip_varint_shard_offset(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    skip_varint_shard_offset(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
skip_varint_shard_offset(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    dfp_read_field_def_shard_offset(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_length_delimited_shard_offset(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_shard_offset(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
skip_length_delimited_shard_offset(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_shard_offset(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    TrUserData).

skip_group_shard_offset(Bin, FNum, Z2, F@_1,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_shard_offset(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_32_shard_offset(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_shard_offset(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_64_shard_offset(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_shard_offset(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

decode_msg_echo_request(Bin, TrUserData) ->
    dfp_read_field_def_echo_request(Bin,
                                    0,
                                    0,
                                    id(<<>>, TrUserData),
                                    TrUserData).

dfp_read_field_def_echo_request(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, TrUserData) ->
    d_field_echo_request_msg(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
dfp_read_field_def_echo_request(<<>>, 0, 0, F@_1, _) ->
    #{msg => F@_1};
dfp_read_field_def_echo_request(Other, Z1, Z2, F@_1,
                                TrUserData) ->
    dg_read_field_def_echo_request(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

dg_read_field_def_echo_request(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_echo_request(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   TrUserData);
dg_read_field_def_echo_request(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_echo_request_msg(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_echo_request(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_echo_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_echo_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                3 ->
                    skip_group_echo_request(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            TrUserData);
                5 -> skip_32_echo_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_echo_request(<<>>, 0, 0, F@_1, _) ->
    #{msg => F@_1}.

d_field_echo_request_msg(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_echo_request_msg(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
d_field_echo_request_msg(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_echo_request(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    TrUserData).

skip_varint_echo_request(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    skip_varint_echo_request(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
skip_varint_echo_request(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, TrUserData) ->
    dfp_read_field_def_echo_request(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_length_delimited_echo_request(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_echo_request(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
skip_length_delimited_echo_request(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_echo_request(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    TrUserData).

skip_group_echo_request(Bin, FNum, Z2, F@_1,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_echo_request(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_32_echo_request(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_echo_request(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

skip_64_echo_request(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, TrUserData) ->
    dfp_read_field_def_echo_request(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

decode_msg_echo_response(Bin, TrUserData) ->
    dfp_read_field_def_echo_response(Bin,
                                     0,
                                     0,
                                     id(<<>>, TrUserData),
                                     TrUserData).

dfp_read_field_def_echo_response(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_echo_response_msg(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
dfp_read_field_def_echo_response(<<>>, 0, 0, F@_1, _) ->
    #{msg => F@_1};
dfp_read_field_def_echo_response(Other, Z1, Z2, F@_1,
                                 TrUserData) ->
    dg_read_field_def_echo_response(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

dg_read_field_def_echo_response(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_echo_response(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
dg_read_field_def_echo_response(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_echo_response_msg(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_echo_response(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_echo_response(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_echo_response(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                3 ->
                    skip_group_echo_response(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             TrUserData);
                5 -> skip_32_echo_response(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_echo_response(<<>>, 0, 0, F@_1, _) ->
    #{msg => F@_1}.

d_field_echo_response_msg(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_echo_response_msg(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              TrUserData);
d_field_echo_response_msg(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_echo_response(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     TrUserData).

skip_varint_echo_response(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    skip_varint_echo_response(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
skip_varint_echo_response(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    dfp_read_field_def_echo_response(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_length_delimited_echo_response(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_echo_response(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
skip_length_delimited_echo_response(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_echo_response(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     TrUserData).

skip_group_echo_response(Bin, FNum, Z2, F@_1,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_echo_response(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_32_echo_response(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_echo_response(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_64_echo_response(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_echo_response(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

decode_msg_command_stream_task(Bin, TrUserData) ->
    dfp_read_field_def_command_stream_task(Bin,
                                           0,
                                           0,
                                           id(<<>>, TrUserData),
                                           TrUserData).

dfp_read_field_def_command_stream_task(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_command_stream_task_command_sql(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
dfp_read_field_def_command_stream_task(<<>>, 0, 0, F@_1,
                                       _) ->
    #{command_sql => F@_1};
dfp_read_field_def_command_stream_task(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_command_stream_task(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_command_stream_task(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_stream_task(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_command_stream_task(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_stream_task_command_sql(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_stream_task(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_command_stream_task(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_command_stream_task(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_command_stream_task(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_command_stream_task(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_command_stream_task(<<>>, 0, 0, F@_1,
                                      _) ->
    #{command_sql => F@_1}.

d_field_command_stream_task_command_sql(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_command_stream_task_command_sql(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
d_field_command_stream_task_command_sql(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_stream_task(RestF,
                                           0,
                                           0,
                                           NewFValue,
                                           TrUserData).

skip_varint_command_stream_task(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_command_stream_task(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_command_stream_task(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_command_stream_task(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_stream_task(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_command_stream_task(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_stream_task(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_command_stream_task(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_stream_task(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_command_stream_task(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_command_stream_task(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_command_stream_task_response(Bin,
                                        TrUserData) ->
    dfp_read_field_def_command_stream_task_response(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    TrUserData).

dfp_read_field_def_command_stream_task_response(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, TrUserData) ->
    d_field_command_stream_task_response_command_resp(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData);
dfp_read_field_def_command_stream_task_response(<<>>, 0,
                                                0, F@_1, _) ->
    #{command_resp => F@_1};
dfp_read_field_def_command_stream_task_response(Other,
                                                Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_command_stream_task_response(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

dg_read_field_def_command_stream_task_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_stream_task_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
dg_read_field_def_command_stream_task_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_stream_task_response_command_resp(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_stream_task_response(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                1 ->
                    skip_64_command_stream_task_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_command_stream_task_response(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
                3 ->
                    skip_group_command_stream_task_response(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                5 ->
                    skip_32_command_stream_task_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData)
            end
    end;
dg_read_field_def_command_stream_task_response(<<>>, 0,
                                               0, F@_1, _) ->
    #{command_resp => F@_1}.

d_field_command_stream_task_response_command_resp(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_command_stream_task_response_command_resp(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      TrUserData);
d_field_command_stream_task_response_command_resp(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_stream_task_response(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_command_stream_task_response(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    skip_varint_command_stream_task_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData);
skip_varint_command_stream_task_response(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_length_delimited_command_stream_task_response(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_stream_task_response(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       TrUserData);
skip_length_delimited_command_stream_task_response(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_stream_task_response(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData).

skip_group_command_stream_task_response(Bin, FNum, Z2,
                                        F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_stream_task_response(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_32_command_stream_task_response(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_64_command_stream_task_response(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_stream_task_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

decode_msg_command_connect(Bin, TrUserData) ->
    dfp_read_field_def_command_connect(Bin,
                                       0,
                                       0,
                                       id(<<>>, TrUserData),
                                       id(0, TrUserData),
                                       TrUserData).

dfp_read_field_def_command_connect(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_command_connect_client_version(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
dfp_read_field_def_command_connect(<<16, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_command_connect_protocol_version(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
dfp_read_field_def_command_connect(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    #{client_version => F@_1, protocol_version => F@_2};
dfp_read_field_def_command_connect(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_command_connect(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_command_connect(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_connect(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_command_connect(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_connect_client_version(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
        16 ->
            d_field_command_connect_protocol_version(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_connect(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_command_connect(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_command_connect(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_command_connect(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_command_connect(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_command_connect(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    #{client_version => F@_1, protocol_version => F@_2}.

d_field_command_connect_client_version(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_command_connect_client_version(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
d_field_command_connect_client_version(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_connect(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       TrUserData).

d_field_command_connect_protocol_version(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_command_connect_protocol_version(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
d_field_command_connect_protocol_version(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_command_connect(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       TrUserData).

skip_varint_command_connect(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_command_connect(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_command_connect(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connect(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_command_connect(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_connect(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_command_connect(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_connect(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_command_connect(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_connect(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_command_connect(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connect(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_command_connect(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connect(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

decode_msg_command_connected(Bin, TrUserData) ->
    dfp_read_field_def_command_connected(Bin,
                                         0,
                                         0,
                                         id(<<>>, TrUserData),
                                         id(0, TrUserData),
                                         TrUserData).

dfp_read_field_def_command_connected(<<10,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_command_connected_server_version(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
dfp_read_field_def_command_connected(<<16,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_command_connected_protocol_version(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
dfp_read_field_def_command_connected(<<>>, 0, 0, F@_1,
                                     F@_2, _) ->
    #{server_version => F@_1, protocol_version => F@_2};
dfp_read_field_def_command_connected(Other, Z1, Z2,
                                     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_command_connected(Other,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData).

dg_read_field_def_command_connected(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_connected(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
dg_read_field_def_command_connected(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_connected_server_version(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
        16 ->
            d_field_command_connected_protocol_version(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_connected(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                1 ->
                    skip_64_command_connected(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
                2 ->
                    skip_length_delimited_command_connected(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                3 ->
                    skip_group_command_connected(Rest,
                                                 Key bsr 3,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
                5 ->
                    skip_32_command_connected(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData)
            end
    end;
dg_read_field_def_command_connected(<<>>, 0, 0, F@_1,
                                    F@_2, _) ->
    #{server_version => F@_1, protocol_version => F@_2}.

d_field_command_connected_server_version(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_command_connected_server_version(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
d_field_command_connected_server_version(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_connected(RestF,
                                         0,
                                         0,
                                         NewFValue,
                                         F@_2,
                                         TrUserData).

d_field_command_connected_protocol_version(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_command_connected_protocol_version(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
d_field_command_connected_protocol_version(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_command_connected(RestF,
                                         0,
                                         0,
                                         F@_1,
                                         NewFValue,
                                         TrUserData).

skip_varint_command_connected(<<1:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_command_connected(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
skip_varint_command_connected(<<0:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connected(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

skip_length_delimited_command_connected(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_connected(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_length_delimited_command_connected(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_connected(Rest2,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

skip_group_command_connected(Bin, FNum, Z2, F@_1, F@_2,
                             TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_connected(Rest,
                                         0,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

skip_32_command_connected(<<_:32, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connected(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

skip_64_command_connected(<<_:64, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_command_connected(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

decode_msg_command_push_query(Bin, TrUserData) ->
    dfp_read_field_def_command_push_query(Bin,
                                          0,
                                          0,
                                          id(<<>>, TrUserData),
                                          TrUserData).

dfp_read_field_def_command_push_query(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    d_field_command_push_query_query_text(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_command_push_query(<<>>, 0, 0, F@_1,
                                      _) ->
    #{query_text => F@_1};
dfp_read_field_def_command_push_query(Other, Z1, Z2,
                                      F@_1, TrUserData) ->
    dg_read_field_def_command_push_query(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

dg_read_field_def_command_push_query(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_push_query(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
dg_read_field_def_command_push_query(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_push_query_query_text(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_push_query(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                1 ->
                    skip_64_command_push_query(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
                2 ->
                    skip_length_delimited_command_push_query(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                3 ->
                    skip_group_command_push_query(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                5 ->
                    skip_32_command_push_query(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_command_push_query(<<>>, 0, 0, F@_1,
                                     _) ->
    #{query_text => F@_1}.

d_field_command_push_query_query_text(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_command_push_query_query_text(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_command_push_query_query_text(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_push_query(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          TrUserData).

skip_varint_command_push_query(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    skip_varint_command_push_query(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData);
skip_varint_command_push_query(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_push_query(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_length_delimited_command_push_query(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_push_query(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
skip_length_delimited_command_push_query(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_push_query(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData).

skip_group_command_push_query(Bin, FNum, Z2, F@_1,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_push_query(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_32_command_push_query(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_push_query(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

skip_64_command_push_query(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_push_query(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

decode_msg_command_query(Bin, TrUserData) ->
    dfp_read_field_def_command_query(Bin,
                                     0,
                                     0,
                                     id(<<>>, TrUserData),
                                     TrUserData).

dfp_read_field_def_command_query(<<10, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_command_query_stmt_text(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
dfp_read_field_def_command_query(<<>>, 0, 0, F@_1, _) ->
    #{stmt_text => F@_1};
dfp_read_field_def_command_query(Other, Z1, Z2, F@_1,
                                 TrUserData) ->
    dg_read_field_def_command_query(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

dg_read_field_def_command_query(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_query(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
dg_read_field_def_command_query(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_query_stmt_text(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_query(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_command_query(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_command_query(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                3 ->
                    skip_group_command_query(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             TrUserData);
                5 -> skip_32_command_query(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_command_query(<<>>, 0, 0, F@_1, _) ->
    #{stmt_text => F@_1}.

d_field_command_query_stmt_text(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_command_query_stmt_text(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
d_field_command_query_stmt_text(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_command_query(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     TrUserData).

skip_varint_command_query(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    skip_varint_command_query(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
skip_varint_command_query(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_query(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_length_delimited_command_query(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_query(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
skip_length_delimited_command_query(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_query(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     TrUserData).

skip_group_command_query(Bin, FNum, Z2, F@_1,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_query(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_32_command_query(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_command_query(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_64_command_query(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_command_query(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

decode_msg_command_query_response(Bin, TrUserData) ->
    dfp_read_field_def_command_query_response(Bin,
                                              0,
                                              0,
                                              id([], TrUserData),
                                              TrUserData).

dfp_read_field_def_command_query_response(<<10,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    d_field_command_query_response_result_set(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData);
dfp_read_field_def_command_query_response(<<>>, 0, 0,
                                          R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{result_set => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_command_query_response(Other, Z1, Z2,
                                          F@_1, TrUserData) ->
    dg_read_field_def_command_query_response(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

dg_read_field_def_command_query_response(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_command_query_response(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
dg_read_field_def_command_query_response(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_command_query_response_result_set(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_command_query_response(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                1 ->
                    skip_64_command_query_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_command_query_response(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                3 ->
                    skip_group_command_query_response(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                5 ->
                    skip_32_command_query_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData)
            end
    end;
dg_read_field_def_command_query_response(<<>>, 0, 0, R1,
                                         TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{result_set => lists_reverse(R1, TrUserData)}
    end.

d_field_command_query_response_result_set(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_command_query_response_result_set(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
d_field_command_query_response_result_set(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_struct(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_command_query_response(RestF,
                                              0,
                                              0,
                                              cons(NewFValue, Prev, TrUserData),
                                              TrUserData).

skip_varint_command_query_response(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_command_query_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
skip_varint_command_query_response(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_length_delimited_command_query_response(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_command_query_response(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
skip_length_delimited_command_query_response(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_query_response(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData).

skip_group_command_query_response(Bin, FNum, Z2, F@_1,
                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_query_response(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_32_command_query_response(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_64_command_query_response(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_command_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

decode_msg_append_request(Bin, TrUserData) ->
    dfp_read_field_def_append_request(Bin,
                                      0,
                                      0,
                                      id(<<>>, TrUserData),
                                      id(0, TrUserData),
                                      id([], TrUserData),
                                      TrUserData).

dfp_read_field_def_append_request(<<10, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_request_streamName(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_append_request(<<16, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_request_shardId(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_append_request(<<26, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_request_records(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
dfp_read_field_def_append_request(<<>>, 0, 0, F@_1,
                                  F@_2, R1, TrUserData) ->
    S1 = #{streamName => F@_1, shardId => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{records => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_append_request(Other, Z1, Z2, F@_1,
                                  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_append_request(Other,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData).

dg_read_field_def_append_request(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_append_request(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
dg_read_field_def_append_request(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_append_request_streamName(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        16 ->
            d_field_append_request_shardId(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        26 ->
            d_field_append_request_records(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_append_request(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                1 ->
                    skip_64_append_request(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
                2 ->
                    skip_length_delimited_append_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
                3 ->
                    skip_group_append_request(Rest,
                                              Key bsr 3,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
                5 ->
                    skip_32_append_request(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData)
            end
    end;
dg_read_field_def_append_request(<<>>, 0, 0, F@_1, F@_2,
                                 R1, TrUserData) ->
    S1 = #{streamName => F@_1, shardId => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{records => lists_reverse(R1, TrUserData)}
    end.

d_field_append_request_streamName(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_request_streamName(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_append_request_streamName(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_append_request(RestF,
                                      0,
                                      0,
                                      NewFValue,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

d_field_append_request_shardId(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_request_shardId(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_append_request_shardId(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_append_request(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      NewFValue,
                                      F@_3,
                                      TrUserData).

d_field_append_request_records(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_request_records(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
d_field_append_request_records(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_h_stream_record(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_append_request(RestF,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      cons(NewFValue, Prev, TrUserData),
                                      TrUserData).

skip_varint_append_request(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_append_request(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
skip_varint_append_request(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_length_delimited_append_request(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_append_request(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
skip_length_delimited_append_request(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_append_request(Rest2,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_group_append_request(Bin, FNum, Z2, F@_1, F@_2,
                          F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_append_request(Rest,
                                      0,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_32_append_request(<<_:32, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

skip_64_append_request(<<_:64, Rest/binary>>, Z1, Z2,
                       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

decode_msg_append_response(Bin, TrUserData) ->
    dfp_read_field_def_append_response(Bin,
                                       0,
                                       0,
                                       id(<<>>, TrUserData),
                                       id(0, TrUserData),
                                       id([], TrUserData),
                                       TrUserData).

dfp_read_field_def_append_response(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_response_streamName(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
dfp_read_field_def_append_response(<<16, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_response_shardId(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
dfp_read_field_def_append_response(<<26, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_append_response_recordIds(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_append_response(<<>>, 0, 0, F@_1,
                                   F@_2, R1, TrUserData) ->
    S1 = #{streamName => F@_1, shardId => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{recordIds => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_append_response(Other, Z1, Z2, F@_1,
                                   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_append_response(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

dg_read_field_def_append_response(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_append_response(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dg_read_field_def_append_response(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_append_response_streamName(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
        16 ->
            d_field_append_response_shardId(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
        26 ->
            d_field_append_response_recordIds(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_append_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
                1 ->
                    skip_64_append_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
                2 ->
                    skip_length_delimited_append_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
                3 ->
                    skip_group_append_response(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
                5 ->
                    skip_32_append_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData)
            end
    end;
dg_read_field_def_append_response(<<>>, 0, 0, F@_1,
                                  F@_2, R1, TrUserData) ->
    S1 = #{streamName => F@_1, shardId => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{recordIds => lists_reverse(R1, TrUserData)}
    end.

d_field_append_response_streamName(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_response_streamName(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
d_field_append_response_streamName(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_append_response(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

d_field_append_response_shardId(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_response_shardId(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
d_field_append_response_shardId(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_append_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       F@_3,
                                       TrUserData).

d_field_append_response_recordIds(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_append_response_recordIds(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_append_response_recordIds(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_record_id(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_append_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       cons(NewFValue, Prev, TrUserData),
                                       TrUserData).

skip_varint_append_response(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_append_response(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
skip_varint_append_response(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_length_delimited_append_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_append_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
skip_length_delimited_append_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_append_response(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_group_append_response(Bin, FNum, Z2, F@_1, F@_2,
                           F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_append_response(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_32_append_response(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

skip_64_append_response(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_append_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData).

decode_msg_subscription(Bin, TrUserData) ->
    dfp_read_field_def_subscription(Bin,
                                    0,
                                    0,
                                    id(<<>>, TrUserData),
                                    id(<<>>, TrUserData),
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    id('EARLIEST', TrUserData),
                                    TrUserData).

dfp_read_field_def_subscription(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subscription_subscriptionId(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
dfp_read_field_def_subscription(<<18, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subscription_streamName(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
dfp_read_field_def_subscription(<<24, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subscription_ackTimeoutSeconds(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
dfp_read_field_def_subscription(<<32, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subscription_maxUnackedRecords(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
dfp_read_field_def_subscription(<<40, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subscription_offset(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
dfp_read_field_def_subscription(<<>>, 0, 0, F@_1, F@_2,
                                F@_3, F@_4, F@_5, _) ->
    #{subscriptionId => F@_1, streamName => F@_2,
      ackTimeoutSeconds => F@_3, maxUnackedRecords => F@_4,
      offset => F@_5};
dfp_read_field_def_subscription(Other, Z1, Z2, F@_1,
                                F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_subscription(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData).

dg_read_field_def_subscription(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_subscription(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
dg_read_field_def_subscription(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_subscription_subscriptionId(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
        18 ->
            d_field_subscription_streamName(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
        24 ->
            d_field_subscription_ackTimeoutSeconds(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
        32 ->
            d_field_subscription_maxUnackedRecords(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
        40 ->
            d_field_subscription_offset(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_subscription(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData);
                1 ->
                    skip_64_subscription(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
                2 ->
                    skip_length_delimited_subscription(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData);
                3 ->
                    skip_group_subscription(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
                5 ->
                    skip_32_subscription(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData)
            end
    end;
dg_read_field_def_subscription(<<>>, 0, 0, F@_1, F@_2,
                               F@_3, F@_4, F@_5, _) ->
    #{subscriptionId => F@_1, streamName => F@_2,
      ackTimeoutSeconds => F@_3, maxUnackedRecords => F@_4,
      offset => F@_5}.

d_field_subscription_subscriptionId(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData)
    when N < 57 ->
    d_field_subscription_subscriptionId(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
d_field_subscription_subscriptionId(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_subscription(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_subscription_streamName(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                TrUserData)
    when N < 57 ->
    d_field_subscription_streamName(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
d_field_subscription_streamName(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_subscription(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_subscription_ackTimeoutSeconds(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       TrUserData)
    when N < 57 ->
    d_field_subscription_ackTimeoutSeconds(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
d_field_subscription_ackTimeoutSeconds(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, _, F@_4, F@_5,
                                       TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_subscription(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    NewFValue,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_subscription_maxUnackedRecords(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       TrUserData)
    when N < 57 ->
    d_field_subscription_maxUnackedRecords(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
d_field_subscription_maxUnackedRecords(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                       TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_subscription(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    NewFValue,
                                    F@_5,
                                    TrUserData).

d_field_subscription_offset(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_subscription_offset(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
d_field_subscription_offset(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_hstream.server.SpecialOffset'(begin
                                                      <<Res:32/signed-native>> =
                                                          <<(X bsl N +
                                                                 Acc):32/unsigned-native>>,
                                                      id(Res, TrUserData)
                                                  end),
            TrUserData),
         Rest},
    dfp_read_field_def_subscription(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    NewFValue,
                                    TrUserData).

skip_varint_subscription(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_subscription(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
skip_varint_subscription(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subscription(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

skip_length_delimited_subscription(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_subscription(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
skip_length_delimited_subscription(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_subscription(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

skip_group_subscription(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                        F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_subscription(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

skip_32_subscription(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subscription(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

skip_64_subscription(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subscription(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

decode_msg_delete_subscription_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_delete_subscription_request(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   id(false, TrUserData),
                                                   TrUserData).

dfp_read_field_def_delete_subscription_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_delete_subscription_request_subscriptionId(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
dfp_read_field_def_delete_subscription_request(<<16,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_delete_subscription_request_force(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_delete_subscription_request(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    #{subscriptionId => F@_1, force => F@_2};
dfp_read_field_def_delete_subscription_request(Other,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dg_read_field_def_delete_subscription_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

dg_read_field_def_delete_subscription_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_subscription_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dg_read_field_def_delete_subscription_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_subscription_request_subscriptionId(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
        16 ->
            d_field_delete_subscription_request_force(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_subscription_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                1 ->
                    skip_64_delete_subscription_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_delete_subscription_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                3 ->
                    skip_group_delete_subscription_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                5 ->
                    skip_32_delete_subscription_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData)
            end
    end;
dg_read_field_def_delete_subscription_request(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    #{subscriptionId => F@_1, force => F@_2}.

d_field_delete_subscription_request_subscriptionId(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData)
    when N < 57 ->
    d_field_delete_subscription_request_subscriptionId(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
d_field_delete_subscription_request_subscriptionId(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, _, F@_2,
                                                   TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_subscription_request(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   F@_2,
                                                   TrUserData).

d_field_delete_subscription_request_force(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_delete_subscription_request_force(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_delete_subscription_request_force(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_delete_subscription_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_delete_subscription_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_delete_subscription_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_varint_delete_subscription_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_length_delimited_delete_subscription_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_subscription_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
skip_length_delimited_delete_subscription_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_subscription_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_group_delete_subscription_request(Bin, FNum, Z2,
                                       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_subscription_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_32_delete_subscription_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_64_delete_subscription_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

decode_msg_check_subscription_exist_request(Bin,
                                            TrUserData) ->
    dfp_read_field_def_check_subscription_exist_request(Bin,
                                                        0,
                                                        0,
                                                        id(<<>>, TrUserData),
                                                        TrUserData).

dfp_read_field_def_check_subscription_exist_request(<<10,
                                                      Rest/binary>>,
                                                    Z1, Z2, F@_1, TrUserData) ->
    d_field_check_subscription_exist_request_subscriptionId(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData);
dfp_read_field_def_check_subscription_exist_request(<<>>,
                                                    0, 0, F@_1, _) ->
    #{subscriptionId => F@_1};
dfp_read_field_def_check_subscription_exist_request(Other,
                                                    Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_check_subscription_exist_request(Other,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData).

dg_read_field_def_check_subscription_exist_request(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_check_subscription_exist_request(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       TrUserData);
dg_read_field_def_check_subscription_exist_request(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_check_subscription_exist_request_subscriptionId(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_check_subscription_exist_request(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                1 ->
                    skip_64_check_subscription_exist_request(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                2 ->
                    skip_length_delimited_check_subscription_exist_request(Rest,
                                                                           0,
                                                                           0,
                                                                           F@_1,
                                                                           TrUserData);
                3 ->
                    skip_group_check_subscription_exist_request(Rest,
                                                                Key bsr 3,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                5 ->
                    skip_32_check_subscription_exist_request(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData)
            end
    end;
dg_read_field_def_check_subscription_exist_request(<<>>,
                                                   0, 0, F@_1, _) ->
    #{subscriptionId => F@_1}.

d_field_check_subscription_exist_request_subscriptionId(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    d_field_check_subscription_exist_request_subscriptionId(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
d_field_check_subscription_exist_request_subscriptionId(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, _,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_check_subscription_exist_request(RestF,
                                                        0,
                                                        0,
                                                        NewFValue,
                                                        TrUserData).

skip_varint_check_subscription_exist_request(<<1:1, _:7,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    skip_varint_check_subscription_exist_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
skip_varint_check_subscription_exist_request(<<0:1, _:7,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_request(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

skip_length_delimited_check_subscription_exist_request(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_check_subscription_exist_request(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           TrUserData);
skip_length_delimited_check_subscription_exist_request(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1,
                                                       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_check_subscription_exist_request(Rest2,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData).

skip_group_check_subscription_exist_request(Bin, FNum,
                                            Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_check_subscription_exist_request(Rest,
                                                        0,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

skip_32_check_subscription_exist_request(<<_:32,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_request(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

skip_64_check_subscription_exist_request(<<_:64,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_request(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

decode_msg_check_subscription_exist_response(Bin,
                                             TrUserData) ->
    dfp_read_field_def_check_subscription_exist_response(Bin,
                                                         0,
                                                         0,
                                                         id(false, TrUserData),
                                                         TrUserData).

dfp_read_field_def_check_subscription_exist_response(<<8,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1,
                                                     TrUserData) ->
    d_field_check_subscription_exist_response_exists(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData);
dfp_read_field_def_check_subscription_exist_response(<<>>,
                                                     0, 0, F@_1, _) ->
    #{exists => F@_1};
dfp_read_field_def_check_subscription_exist_response(Other,
                                                     Z1, Z2, F@_1,
                                                     TrUserData) ->
    dg_read_field_def_check_subscription_exist_response(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

dg_read_field_def_check_subscription_exist_response(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_check_subscription_exist_response(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        TrUserData);
dg_read_field_def_check_subscription_exist_response(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_check_subscription_exist_response_exists(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_check_subscription_exist_response(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                1 ->
                    skip_64_check_subscription_exist_response(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_check_subscription_exist_response(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            TrUserData);
                3 ->
                    skip_group_check_subscription_exist_response(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                5 ->
                    skip_32_check_subscription_exist_response(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData)
            end
    end;
dg_read_field_def_check_subscription_exist_response(<<>>,
                                                    0, 0, F@_1, _) ->
    #{exists => F@_1}.

d_field_check_subscription_exist_response_exists(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_check_subscription_exist_response_exists(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
d_field_check_subscription_exist_response_exists(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_check_subscription_exist_response(RestF,
                                                         0,
                                                         0,
                                                         NewFValue,
                                                         TrUserData).

skip_varint_check_subscription_exist_response(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    skip_varint_check_subscription_exist_response(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
skip_varint_check_subscription_exist_response(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_response(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_length_delimited_check_subscription_exist_response(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    skip_length_delimited_check_subscription_exist_response(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
skip_length_delimited_check_subscription_exist_response(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_check_subscription_exist_response(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData).

skip_group_check_subscription_exist_response(Bin, FNum,
                                             Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_check_subscription_exist_response(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_32_check_subscription_exist_response(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_response(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_64_check_subscription_exist_response(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_check_subscription_exist_response(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

decode_msg_streaming_fetch_request(Bin, TrUserData) ->
    dfp_read_field_def_streaming_fetch_request(Bin,
                                               0,
                                               0,
                                               id(<<>>, TrUserData),
                                               id(<<>>, TrUserData),
                                               id([], TrUserData),
                                               TrUserData).

dfp_read_field_def_streaming_fetch_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3,
                                           TrUserData) ->
    d_field_streaming_fetch_request_subscriptionId(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
dfp_read_field_def_streaming_fetch_request(<<18,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3,
                                           TrUserData) ->
    d_field_streaming_fetch_request_consumerName(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
dfp_read_field_def_streaming_fetch_request(<<26,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3,
                                           TrUserData) ->
    d_field_streaming_fetch_request_ackIds(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
dfp_read_field_def_streaming_fetch_request(<<>>, 0, 0,
                                           F@_1, F@_2, R1, TrUserData) ->
    S1 = #{subscriptionId => F@_1, consumerName => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{ackIds => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_streaming_fetch_request(Other, Z1,
                                           Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_streaming_fetch_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

dg_read_field_def_streaming_fetch_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_streaming_fetch_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
dg_read_field_def_streaming_fetch_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_streaming_fetch_request_subscriptionId(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
        18 ->
            d_field_streaming_fetch_request_consumerName(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
        26 ->
            d_field_streaming_fetch_request_ackIds(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_streaming_fetch_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
                1 ->
                    skip_64_streaming_fetch_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_streaming_fetch_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  TrUserData);
                3 ->
                    skip_group_streaming_fetch_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
                5 ->
                    skip_32_streaming_fetch_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData)
            end
    end;
dg_read_field_def_streaming_fetch_request(<<>>, 0, 0,
                                          F@_1, F@_2, R1, TrUserData) ->
    S1 = #{subscriptionId => F@_1, consumerName => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{ackIds => lists_reverse(R1, TrUserData)}
    end.

d_field_streaming_fetch_request_subscriptionId(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3,
                                               TrUserData)
    when N < 57 ->
    d_field_streaming_fetch_request_subscriptionId(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
d_field_streaming_fetch_request_subscriptionId(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, _, F@_2, F@_3,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_streaming_fetch_request(RestF,
                                               0,
                                               0,
                                               NewFValue,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

d_field_streaming_fetch_request_consumerName(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData)
    when N < 57 ->
    d_field_streaming_fetch_request_consumerName(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
d_field_streaming_fetch_request_consumerName(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, F@_3,
                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_streaming_fetch_request(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               NewFValue,
                                               F@_3,
                                               TrUserData).

d_field_streaming_fetch_request_ackIds(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_streaming_fetch_request_ackIds(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
d_field_streaming_fetch_request_ackIds(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_record_id(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_streaming_fetch_request(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               cons(NewFValue,
                                                    Prev,
                                                    TrUserData),
                                               TrUserData).

skip_varint_streaming_fetch_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_streaming_fetch_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
skip_varint_streaming_fetch_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_streaming_fetch_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

skip_length_delimited_streaming_fetch_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3,
                                              TrUserData)
    when N < 57 ->
    skip_length_delimited_streaming_fetch_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
skip_length_delimited_streaming_fetch_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_streaming_fetch_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

skip_group_streaming_fetch_request(Bin, FNum, Z2, F@_1,
                                   F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_streaming_fetch_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

skip_32_streaming_fetch_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_streaming_fetch_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

skip_64_streaming_fetch_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_streaming_fetch_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

decode_msg_streaming_fetch_response(Bin, TrUserData) ->
    dfp_read_field_def_streaming_fetch_response(Bin,
                                                0,
                                                0,
                                                id([], TrUserData),
                                                TrUserData).

dfp_read_field_def_streaming_fetch_response(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_streaming_fetch_response_receivedRecords(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData);
dfp_read_field_def_streaming_fetch_response(<<>>, 0, 0,
                                            R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{receivedRecords => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_streaming_fetch_response(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_streaming_fetch_response(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_streaming_fetch_response(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_streaming_fetch_response(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_streaming_fetch_response(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_streaming_fetch_response_receivedRecords(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_streaming_fetch_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_streaming_fetch_response(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_streaming_fetch_response(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_streaming_fetch_response(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_streaming_fetch_response(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_streaming_fetch_response(<<>>, 0, 0,
                                           R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{receivedRecords => lists_reverse(R1, TrUserData)}
    end.

d_field_streaming_fetch_response_receivedRecords(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_streaming_fetch_response_receivedRecords(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
d_field_streaming_fetch_response_receivedRecords(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_received_record(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_streaming_fetch_response(RestF,
                                                0,
                                                0,
                                                cons(NewFValue,
                                                     Prev,
                                                     TrUserData),
                                                TrUserData).

skip_varint_streaming_fetch_response(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_streaming_fetch_response(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_streaming_fetch_response(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_streaming_fetch_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_streaming_fetch_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_streaming_fetch_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_streaming_fetch_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_streaming_fetch_response(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_streaming_fetch_response(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_streaming_fetch_response(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_streaming_fetch_response(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_streaming_fetch_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_streaming_fetch_response(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_streaming_fetch_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_received_record(Bin, TrUserData) ->
    dfp_read_field_def_received_record(Bin,
                                       0,
                                       0,
                                       id('$undef', TrUserData),
                                       id(<<>>, TrUserData),
                                       TrUserData).

dfp_read_field_def_received_record(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_received_record_recordId(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dfp_read_field_def_received_record(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_received_record_record(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dfp_read_field_def_received_record(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    S1 = #{record => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{recordId => F@_1}
    end;
dfp_read_field_def_received_record(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_received_record(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_received_record(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_received_record(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_received_record(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_received_record_recordId(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
        18 ->
            d_field_received_record_record(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_received_record(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_received_record(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_received_record(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_received_record(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_received_record(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_received_record(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    S1 = #{record => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{recordId => F@_1}
    end.

d_field_received_record_recordId(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_received_record_recordId(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
d_field_received_record_recordId(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_record_id(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_received_record(RestF,
                                       0,
                                       0,
                                       if Prev == '$undef' -> NewFValue;
                                          true ->
                                              merge_msg_record_id(Prev,
                                                                  NewFValue,
                                                                  TrUserData)
                                       end,
                                       F@_2,
                                       TrUserData).

d_field_received_record_record(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_received_record_record(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
d_field_received_record_record(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_received_record(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       TrUserData).

skip_varint_received_record(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_received_record(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_received_record(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_received_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_received_record(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_received_record(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_received_record(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_received_record(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_received_record(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_received_record(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_received_record(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_received_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_received_record(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_received_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

decode_msg_delete_stream_request(Bin, TrUserData) ->
    dfp_read_field_def_delete_stream_request(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             id(false, TrUserData),
                                             id(false, TrUserData),
                                             TrUserData).

dfp_read_field_def_delete_stream_request(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    d_field_delete_stream_request_streamName(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
dfp_read_field_def_delete_stream_request(<<16,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    d_field_delete_stream_request_ignoreNonExist(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
dfp_read_field_def_delete_stream_request(<<24,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    d_field_delete_stream_request_force(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
dfp_read_field_def_delete_stream_request(<<>>, 0, 0,
                                         F@_1, F@_2, F@_3, _) ->
    #{streamName => F@_1, ignoreNonExist => F@_2,
      force => F@_3};
dfp_read_field_def_delete_stream_request(Other, Z1, Z2,
                                         F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_delete_stream_request(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

dg_read_field_def_delete_stream_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_stream_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
dg_read_field_def_delete_stream_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_stream_request_streamName(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
        16 ->
            d_field_delete_stream_request_ignoreNonExist(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
        24 ->
            d_field_delete_stream_request_force(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_stream_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
                1 ->
                    skip_64_delete_stream_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_delete_stream_request(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
                3 ->
                    skip_group_delete_stream_request(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
                5 ->
                    skip_32_delete_stream_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData)
            end
    end;
dg_read_field_def_delete_stream_request(<<>>, 0, 0,
                                        F@_1, F@_2, F@_3, _) ->
    #{streamName => F@_1, ignoreNonExist => F@_2,
      force => F@_3}.

d_field_delete_stream_request_streamName(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_delete_stream_request_streamName(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
d_field_delete_stream_request_streamName(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_stream_request(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

d_field_delete_stream_request_ignoreNonExist(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData)
    when N < 57 ->
    d_field_delete_stream_request_ignoreNonExist(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
d_field_delete_stream_request_ignoreNonExist(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, F@_3,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_delete_stream_request(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             NewFValue,
                                             F@_3,
                                             TrUserData).

d_field_delete_stream_request_force(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_delete_stream_request_force(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
d_field_delete_stream_request_force(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_delete_stream_request(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             NewFValue,
                                             TrUserData).

skip_varint_delete_stream_request(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_delete_stream_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
skip_varint_delete_stream_request(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_delete_stream_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

skip_length_delimited_delete_stream_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3,
                                            TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_stream_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
skip_length_delimited_delete_stream_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3,
                                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_stream_request(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

skip_group_delete_stream_request(Bin, FNum, Z2, F@_1,
                                 F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_stream_request(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

skip_32_delete_stream_request(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_delete_stream_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

skip_64_delete_stream_request(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_delete_stream_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

decode_msg_list_streams_response(Bin, TrUserData) ->
    dfp_read_field_def_list_streams_response(Bin,
                                             0,
                                             0,
                                             id([], TrUserData),
                                             TrUserData).

dfp_read_field_def_list_streams_response(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_list_streams_response_streams(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_list_streams_response(<<>>, 0, 0, R1,
                                         TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{streams => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_streams_response(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_list_streams_response(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_list_streams_response(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_streams_response(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_list_streams_response(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_streams_response_streams(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_streams_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_list_streams_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_list_streams_response(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_list_streams_response(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_list_streams_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_list_streams_response(<<>>, 0, 0, R1,
                                        TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{streams => lists_reverse(R1, TrUserData)}
    end.

d_field_list_streams_response_streams(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_streams_response_streams(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_list_streams_response_streams(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_stream(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_streams_response(RestF,
                                             0,
                                             0,
                                             cons(NewFValue, Prev, TrUserData),
                                             TrUserData).

skip_varint_list_streams_response(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_streams_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_list_streams_response(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_streams_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_list_streams_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_streams_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_list_streams_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_streams_response(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_list_streams_response(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_streams_response(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_list_streams_response(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_streams_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_list_streams_response(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_streams_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_list_streams_request(Bin, TrUserData) ->
    dfp_read_field_def_list_streams_request(Bin,
                                            0,
                                            0,
                                            TrUserData).

dfp_read_field_def_list_streams_request(<<>>, 0, 0,
                                        _) ->
    #{};
dfp_read_field_def_list_streams_request(Other, Z1, Z2,
                                        TrUserData) ->
    dg_read_field_def_list_streams_request(Other,
                                           Z1,
                                           Z2,
                                           TrUserData).

dg_read_field_def_list_streams_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_streams_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           TrUserData);
dg_read_field_def_list_streams_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_streams_request(Rest,
                                             0,
                                             0,
                                             TrUserData);
        1 ->
            skip_64_list_streams_request(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_list_streams_request(Rest,
                                                       0,
                                                       0,
                                                       TrUserData);
        3 ->
            skip_group_list_streams_request(Rest,
                                            Key bsr 3,
                                            0,
                                            TrUserData);
        5 ->
            skip_32_list_streams_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_list_streams_request(<<>>, 0, 0, _) ->
    #{}.

skip_varint_list_streams_request(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, TrUserData) ->
    skip_varint_list_streams_request(Rest,
                                     Z1,
                                     Z2,
                                     TrUserData);
skip_varint_list_streams_request(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_streams_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

skip_length_delimited_list_streams_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_streams_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               TrUserData);
skip_length_delimited_list_streams_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_streams_request(Rest2,
                                            0,
                                            0,
                                            TrUserData).

skip_group_list_streams_request(Bin, FNum, Z2,
                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_streams_request(Rest,
                                            0,
                                            Z2,
                                            TrUserData).

skip_32_list_streams_request(<<_:32, Rest/binary>>, Z1,
                             Z2, TrUserData) ->
    dfp_read_field_def_list_streams_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

skip_64_list_streams_request(<<_:64, Rest/binary>>, Z1,
                             Z2, TrUserData) ->
    dfp_read_field_def_list_streams_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

decode_msg_list_subscriptions_request(Bin,
                                      TrUserData) ->
    dfp_read_field_def_list_subscriptions_request(Bin,
                                                  0,
                                                  0,
                                                  TrUserData).

dfp_read_field_def_list_subscriptions_request(<<>>, 0,
                                              0, _) ->
    #{};
dfp_read_field_def_list_subscriptions_request(Other, Z1,
                                              Z2, TrUserData) ->
    dg_read_field_def_list_subscriptions_request(Other,
                                                 Z1,
                                                 Z2,
                                                 TrUserData).

dg_read_field_def_list_subscriptions_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_subscriptions_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 TrUserData);
dg_read_field_def_list_subscriptions_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_subscriptions_request(Rest,
                                                   0,
                                                   0,
                                                   TrUserData);
        1 ->
            skip_64_list_subscriptions_request(Rest,
                                               0,
                                               0,
                                               TrUserData);
        2 ->
            skip_length_delimited_list_subscriptions_request(Rest,
                                                             0,
                                                             0,
                                                             TrUserData);
        3 ->
            skip_group_list_subscriptions_request(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  TrUserData);
        5 ->
            skip_32_list_subscriptions_request(Rest,
                                               0,
                                               0,
                                               TrUserData)
    end;
dg_read_field_def_list_subscriptions_request(<<>>, 0, 0,
                                             _) ->
    #{}.

skip_varint_list_subscriptions_request(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, TrUserData) ->
    skip_varint_list_subscriptions_request(Rest,
                                           Z1,
                                           Z2,
                                           TrUserData);
skip_varint_list_subscriptions_request(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_subscriptions_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  TrUserData).

skip_length_delimited_list_subscriptions_request(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_subscriptions_request(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     TrUserData);
skip_length_delimited_list_subscriptions_request(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_subscriptions_request(Rest2,
                                                  0,
                                                  0,
                                                  TrUserData).

skip_group_list_subscriptions_request(Bin, FNum, Z2,
                                      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_subscriptions_request(Rest,
                                                  0,
                                                  Z2,
                                                  TrUserData).

skip_32_list_subscriptions_request(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_subscriptions_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  TrUserData).

skip_64_list_subscriptions_request(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_subscriptions_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  TrUserData).

decode_msg_list_subscriptions_response(Bin,
                                       TrUserData) ->
    dfp_read_field_def_list_subscriptions_response(Bin,
                                                   0,
                                                   0,
                                                   id([], TrUserData),
                                                   TrUserData).

dfp_read_field_def_list_subscriptions_response(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    d_field_list_subscriptions_response_subscription(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData);
dfp_read_field_def_list_subscriptions_response(<<>>, 0,
                                               0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{subscription => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_subscriptions_response(Other,
                                               Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_list_subscriptions_response(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

dg_read_field_def_list_subscriptions_response(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_subscriptions_response(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
dg_read_field_def_list_subscriptions_response(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_subscriptions_response_subscription(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_subscriptions_response(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                1 ->
                    skip_64_list_subscriptions_response(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_list_subscriptions_response(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                3 ->
                    skip_group_list_subscriptions_response(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                5 ->
                    skip_32_list_subscriptions_response(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData)
            end
    end;
dg_read_field_def_list_subscriptions_response(<<>>, 0,
                                              0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{subscription => lists_reverse(R1, TrUserData)}
    end.

d_field_list_subscriptions_response_subscription(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_subscriptions_response_subscription(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
d_field_list_subscriptions_response_subscription(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_subscription(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_subscriptions_response(RestF,
                                                   0,
                                                   0,
                                                   cons(NewFValue,
                                                        Prev,
                                                        TrUserData),
                                                   TrUserData).

skip_varint_list_subscriptions_response(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_subscriptions_response(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
skip_varint_list_subscriptions_response(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_subscriptions_response(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_length_delimited_list_subscriptions_response(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_subscriptions_response(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      TrUserData);
skip_length_delimited_list_subscriptions_response(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_subscriptions_response(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData).

skip_group_list_subscriptions_response(Bin, FNum, Z2,
                                       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_subscriptions_response(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_32_list_subscriptions_response(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_subscriptions_response(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_64_list_subscriptions_response(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_subscriptions_response(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

decode_msg_stream(Bin, TrUserData) ->
    dfp_read_field_def_stream(Bin,
                              0,
                              0,
                              id(<<>>, TrUserData),
                              id(0, TrUserData),
                              id(0, TrUserData),
                              id(0, TrUserData),
                              TrUserData).

dfp_read_field_def_stream(<<10, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_stream_streamName(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
dfp_read_field_def_stream(<<16, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_stream_replicationFactor(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
dfp_read_field_def_stream(<<24, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_stream_backlogDuration(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
dfp_read_field_def_stream(<<32, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_stream_shardCount(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
dfp_read_field_def_stream(<<>>, 0, 0, F@_1, F@_2, F@_3,
                          F@_4, _) ->
    #{streamName => F@_1, replicationFactor => F@_2,
      backlogDuration => F@_3, shardCount => F@_4};
dfp_read_field_def_stream(Other, Z1, Z2, F@_1, F@_2,
                          F@_3, F@_4, TrUserData) ->
    dg_read_field_def_stream(Other,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

dg_read_field_def_stream(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stream(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData);
dg_read_field_def_stream(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_stream_streamName(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
        16 ->
            d_field_stream_replicationFactor(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
        24 ->
            d_field_stream_backlogDuration(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
        32 ->
            d_field_stream_shardCount(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_stream(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
                1 ->
                    skip_64_stream(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
                2 ->
                    skip_length_delimited_stream(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
                3 ->
                    skip_group_stream(Rest,
                                      Key bsr 3,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
                5 ->
                    skip_32_stream(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData)
            end
    end;
dg_read_field_def_stream(<<>>, 0, 0, F@_1, F@_2, F@_3,
                         F@_4, _) ->
    #{streamName => F@_1, replicationFactor => F@_2,
      backlogDuration => F@_3, shardCount => F@_4}.

d_field_stream_streamName(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_stream_streamName(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
d_field_stream_streamName(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_stream(RestF,
                              0,
                              0,
                              NewFValue,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

d_field_stream_replicationFactor(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_stream_replicationFactor(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
d_field_stream_replicationFactor(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_stream(RestF,
                              0,
                              0,
                              F@_1,
                              NewFValue,
                              F@_3,
                              F@_4,
                              TrUserData).

d_field_stream_backlogDuration(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_stream_backlogDuration(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData);
d_field_stream_backlogDuration(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_stream(RestF,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              NewFValue,
                              F@_4,
                              TrUserData).

d_field_stream_shardCount(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_stream_shardCount(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
d_field_stream_shardCount(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_stream(RestF,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              F@_3,
                              NewFValue,
                              TrUserData).

skip_varint_stream(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_stream(Rest,
                       Z1,
                       Z2,
                       F@_1,
                       F@_2,
                       F@_3,
                       F@_4,
                       TrUserData);
skip_varint_stream(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_stream(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

skip_length_delimited_stream(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_stream(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
skip_length_delimited_stream(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stream(Rest2,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

skip_group_stream(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stream(Rest,
                              0,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

skip_32_stream(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
               F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_stream(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

skip_64_stream(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
               F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_stream(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData).

decode_msg_h_stream_record_batch(Bin, TrUserData) ->
    dfp_read_field_def_h_stream_record_batch(Bin,
                                             0,
                                             0,
                                             id([], TrUserData),
                                             TrUserData).

dfp_read_field_def_h_stream_record_batch(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_h_stream_record_batch_batch(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
dfp_read_field_def_h_stream_record_batch(<<>>, 0, 0, R1,
                                         TrUserData) ->
    #{batch => lists_reverse(R1, TrUserData)};
dfp_read_field_def_h_stream_record_batch(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_h_stream_record_batch(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_h_stream_record_batch(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_h_stream_record_batch(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_h_stream_record_batch(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_h_stream_record_batch_batch(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_h_stream_record_batch(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_h_stream_record_batch(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_h_stream_record_batch(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_h_stream_record_batch(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_h_stream_record_batch(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_h_stream_record_batch(<<>>, 0, 0, R1,
                                        TrUserData) ->
    #{batch => lists_reverse(R1, TrUserData)}.

d_field_h_stream_record_batch_batch(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_h_stream_record_batch_batch(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
d_field_h_stream_record_batch_batch(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_h_stream_record_batch(RestF,
                                             0,
                                             0,
                                             cons(NewFValue, Prev, TrUserData),
                                             TrUserData).

skip_varint_h_stream_record_batch(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_h_stream_record_batch(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_h_stream_record_batch(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_h_stream_record_batch(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_h_stream_record_batch(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_h_stream_record_batch(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_h_stream_record_batch(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_h_stream_record_batch(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_h_stream_record_batch(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_h_stream_record_batch(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_h_stream_record_batch(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_h_stream_record_batch(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_h_stream_record_batch(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_h_stream_record_batch(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_h_stream_record(Bin, TrUserData) ->
    dfp_read_field_def_h_stream_record(Bin,
                                       0,
                                       0,
                                       id('$undef', TrUserData),
                                       id(<<>>, TrUserData),
                                       TrUserData).

dfp_read_field_def_h_stream_record(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_h_stream_record_header(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dfp_read_field_def_h_stream_record(<<18, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_h_stream_record_payload(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dfp_read_field_def_h_stream_record(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    S1 = #{payload => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end;
dfp_read_field_def_h_stream_record(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_h_stream_record(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_h_stream_record(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_h_stream_record(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_h_stream_record(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_h_stream_record_header(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
        18 ->
            d_field_h_stream_record_payload(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_h_stream_record(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_h_stream_record(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_h_stream_record(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_h_stream_record(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_h_stream_record(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_h_stream_record(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    S1 = #{payload => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{header => F@_1}
    end.

d_field_h_stream_record_header(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_h_stream_record_header(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
d_field_h_stream_record_header(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_h_stream_record_header(Bs,
                                                                   TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_h_stream_record(RestF,
                                       0,
                                       0,
                                       if Prev == '$undef' -> NewFValue;
                                          true ->
                                              merge_msg_h_stream_record_header(Prev,
                                                                               NewFValue,
                                                                               TrUserData)
                                       end,
                                       F@_2,
                                       TrUserData).

d_field_h_stream_record_payload(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_h_stream_record_payload(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
d_field_h_stream_record_payload(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_h_stream_record(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       NewFValue,
                                       TrUserData).

skip_varint_h_stream_record(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_h_stream_record(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_h_stream_record(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_h_stream_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_h_stream_record(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_h_stream_record(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_h_stream_record(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_h_stream_record(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_h_stream_record(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_h_stream_record(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_h_stream_record(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_h_stream_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_h_stream_record(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_h_stream_record(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

decode_msg_h_stream_record_header(Bin, TrUserData) ->
    dfp_read_field_def_h_stream_record_header(Bin,
                                              0,
                                              0,
                                              id('JSON', TrUserData),
                                              'tr_decode_init_default_h_stream_record_header.attributes'([],
                                                                                                         TrUserData),
                                              id('$undef', TrUserData),
                                              id(<<>>, TrUserData),
                                              TrUserData).

dfp_read_field_def_h_stream_record_header(<<8,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_h_stream_record_header_flag(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData);
dfp_read_field_def_h_stream_record_header(<<18,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_h_stream_record_header_attributes(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData);
dfp_read_field_def_h_stream_record_header(<<26,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_h_stream_record_header_publish_time(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dfp_read_field_def_h_stream_record_header(<<34,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_h_stream_record_header_key(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
dfp_read_field_def_h_stream_record_header(<<>>, 0, 0,
                                          F@_1, R1, F@_3, F@_4, TrUserData) ->
    S1 = #{flag => F@_1,
           attributes =>
               'tr_decode_repeated_finalize_h_stream_record_header.attributes'(R1,
                                                                               TrUserData),
           key => F@_4},
    if F@_3 == '$undef' -> S1;
       true -> S1#{publish_time => F@_3}
    end;
dfp_read_field_def_h_stream_record_header(Other, Z1, Z2,
                                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_h_stream_record_header(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

dg_read_field_def_h_stream_record_header(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_h_stream_record_header(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
dg_read_field_def_h_stream_record_header(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_h_stream_record_header_flag(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
        18 ->
            d_field_h_stream_record_header_attributes(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
        26 ->
            d_field_h_stream_record_header_publish_time(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
        34 ->
            d_field_h_stream_record_header_key(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_h_stream_record_header(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       TrUserData);
                1 ->
                    skip_64_h_stream_record_header(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_h_stream_record_header(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 TrUserData);
                3 ->
                    skip_group_h_stream_record_header(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                5 ->
                    skip_32_h_stream_record_header(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData)
            end
    end;
dg_read_field_def_h_stream_record_header(<<>>, 0, 0,
                                         F@_1, R1, F@_3, F@_4, TrUserData) ->
    S1 = #{flag => F@_1,
           attributes =>
               'tr_decode_repeated_finalize_h_stream_record_header.attributes'(R1,
                                                                               TrUserData),
           key => F@_4},
    if F@_3 == '$undef' -> S1;
       true -> S1#{publish_time => F@_3}
    end.

d_field_h_stream_record_header_flag(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_h_stream_record_header_flag(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData);
d_field_h_stream_record_header_flag(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_h_stream_record_header.Flag'(begin
                                                     <<Res:32/signed-native>> =
                                                         <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                                                     id(Res, TrUserData)
                                                 end),
            TrUserData),
         Rest},
    dfp_read_field_def_h_stream_record_header(RestF,
                                              0,
                                              0,
                                              NewFValue,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

d_field_h_stream_record_header_attributes(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData)
    when N < 57 ->
    d_field_h_stream_record_header_attributes(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData);
d_field_h_stream_record_header_attributes(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, Prev, F@_3, F@_4,
                                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_map<string,string>'(Bs,
                                                                 TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_h_stream_record_header(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              'tr_decode_repeated_add_elem_h_stream_record_header.attributes'(NewFValue,
                                                                                                              Prev,
                                                                                                              TrUserData),
                                              F@_3,
                                              F@_4,
                                              TrUserData).

d_field_h_stream_record_header_publish_time(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 57 ->
    d_field_h_stream_record_header_publish_time(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
d_field_h_stream_record_header_publish_time(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, Prev, F@_4,
                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_timestamp(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_h_stream_record_header(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              if Prev == '$undef' -> NewFValue;
                                                 true ->
                                                     merge_msg_timestamp(Prev,
                                                                         NewFValue,
                                                                         TrUserData)
                                              end,
                                              F@_4,
                                              TrUserData).

d_field_h_stream_record_header_key(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_h_stream_record_header_key(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
d_field_h_stream_record_header_key(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_h_stream_record_header(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              NewFValue,
                                              TrUserData).

skip_varint_h_stream_record_header(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    skip_varint_h_stream_record_header(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
skip_varint_h_stream_record_header(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    dfp_read_field_def_h_stream_record_header(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_length_delimited_h_stream_record_header(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_h_stream_record_header(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
skip_length_delimited_h_stream_record_header(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_h_stream_record_header(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_group_h_stream_record_header(Bin, FNum, Z2, F@_1,
                                  F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_h_stream_record_header(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_32_h_stream_record_header(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_h_stream_record_header(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_64_h_stream_record_header(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_h_stream_record_header(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

decode_msg_record_id(Bin, TrUserData) ->
    dfp_read_field_def_record_id(Bin,
                                 0,
                                 0,
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 TrUserData).

dfp_read_field_def_record_id(<<8, Rest/binary>>, Z1, Z2,
                             F@_1, F@_2, F@_3, TrUserData) ->
    d_field_record_id_shardId(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
dfp_read_field_def_record_id(<<16, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_record_id_batchId(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
dfp_read_field_def_record_id(<<24, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_record_id_batchIndex(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
dfp_read_field_def_record_id(<<>>, 0, 0, F@_1, F@_2,
                             F@_3, _) ->
    #{shardId => F@_1, batchId => F@_2, batchIndex => F@_3};
dfp_read_field_def_record_id(Other, Z1, Z2, F@_1, F@_2,
                             F@_3, TrUserData) ->
    dg_read_field_def_record_id(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData).

dg_read_field_def_record_id(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_record_id(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dg_read_field_def_record_id(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_record_id_shardId(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
        16 ->
            d_field_record_id_batchId(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
        24 ->
            d_field_record_id_batchIndex(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_record_id(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
                1 ->
                    skip_64_record_id(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
                2 ->
                    skip_length_delimited_record_id(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
                3 ->
                    skip_group_record_id(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
                5 ->
                    skip_32_record_id(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData)
            end
    end;
dg_read_field_def_record_id(<<>>, 0, 0, F@_1, F@_2,
                            F@_3, _) ->
    #{shardId => F@_1, batchId => F@_2, batchIndex => F@_3}.

d_field_record_id_shardId(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_record_id_shardId(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
d_field_record_id_shardId(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_record_id(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

d_field_record_id_batchId(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_record_id_batchId(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              TrUserData);
d_field_record_id_batchId(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_record_id(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 NewFValue,
                                 F@_3,
                                 TrUserData).

d_field_record_id_batchIndex(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_record_id_batchIndex(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData);
d_field_record_id_batchIndex(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_record_id(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 NewFValue,
                                 TrUserData).

skip_varint_record_id(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_record_id(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          TrUserData);
skip_varint_record_id(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_record_id(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_length_delimited_record_id(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_record_id(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
skip_length_delimited_record_id(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_record_id(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_group_record_id(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_record_id(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_32_record_id(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_record_id(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_64_record_id(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_record_id(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

decode_msg_shard(Bin, TrUserData) ->
    dfp_read_field_def_shard(Bin,
                             0,
                             0,
                             id(<<>>, TrUserData),
                             id(0, TrUserData),
                             id(<<>>, TrUserData),
                             id(<<>>, TrUserData),
                             id(0, TrUserData),
                             id(false, TrUserData),
                             TrUserData).

dfp_read_field_def_shard(<<10, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_streamName(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData);
dfp_read_field_def_shard(<<16, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_shardId(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          TrUserData);
dfp_read_field_def_shard(<<26, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_startHashRangeKey(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    TrUserData);
dfp_read_field_def_shard(<<34, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_endHashRangeKey(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  TrUserData);
dfp_read_field_def_shard(<<40, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_epoch(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData);
dfp_read_field_def_shard(<<48, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_shard_isActive(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           TrUserData);
dfp_read_field_def_shard(<<>>, 0, 0, F@_1, F@_2, F@_3,
                         F@_4, F@_5, F@_6, _) ->
    #{streamName => F@_1, shardId => F@_2,
      startHashRangeKey => F@_3, endHashRangeKey => F@_4,
      epoch => F@_5, isActive => F@_6};
dfp_read_field_def_shard(Other, Z1, Z2, F@_1, F@_2,
                         F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_shard(Other,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            TrUserData).

dg_read_field_def_shard(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_shard(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            TrUserData);
dg_read_field_def_shard(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_shard_streamName(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     TrUserData);
        16 ->
            d_field_shard_shardId(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  TrUserData);
        26 ->
            d_field_shard_startHashRangeKey(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            TrUserData);
        34 ->
            d_field_shard_endHashRangeKey(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          TrUserData);
        40 ->
            d_field_shard_epoch(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                TrUserData);
        48 ->
            d_field_shard_isActive(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_shard(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      TrUserData);
                1 ->
                    skip_64_shard(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  TrUserData);
                2 ->
                    skip_length_delimited_shard(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                TrUserData);
                3 ->
                    skip_group_shard(Rest,
                                     Key bsr 3,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     TrUserData);
                5 ->
                    skip_32_shard(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  TrUserData)
            end
    end;
dg_read_field_def_shard(<<>>, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, F@_5, F@_6, _) ->
    #{streamName => F@_1, shardId => F@_2,
      startHashRangeKey => F@_3, endHashRangeKey => F@_4,
      epoch => F@_5, isActive => F@_6}.

d_field_shard_streamName(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_shard_streamName(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData);
d_field_shard_streamName(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             NewFValue,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

d_field_shard_shardId(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_shard_shardId(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          TrUserData);
d_field_shard_shardId(<<0:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             F@_1,
                             NewFValue,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

d_field_shard_startHashRangeKey(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                TrUserData)
    when N < 57 ->
    d_field_shard_startHashRangeKey(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    TrUserData);
d_field_shard_startHashRangeKey(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             NewFValue,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

d_field_shard_endHashRangeKey(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                              TrUserData)
    when N < 57 ->
    d_field_shard_endHashRangeKey(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  TrUserData);
d_field_shard_endHashRangeKey(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             NewFValue,
                             F@_5,
                             F@_6,
                             TrUserData).

d_field_shard_epoch(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_shard_epoch(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        TrUserData);
d_field_shard_epoch(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             NewFValue,
                             F@_6,
                             TrUserData).

d_field_shard_isActive(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_shard_isActive(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           TrUserData);
d_field_shard_isActive(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_shard(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             NewFValue,
                             TrUserData).

skip_varint_shard(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_shard(Rest,
                      Z1,
                      Z2,
                      F@_1,
                      F@_2,
                      F@_3,
                      F@_4,
                      F@_5,
                      F@_6,
                      TrUserData);
skip_varint_shard(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_shard(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

skip_length_delimited_shard(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                            TrUserData)
    when N < 57 ->
    skip_length_delimited_shard(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                TrUserData);
skip_length_delimited_shard(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_shard(Rest2,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

skip_group_shard(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                 F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_shard(Rest,
                             0,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

skip_32_shard(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
              F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_shard(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

skip_64_shard(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
              F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_shard(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             TrUserData).

decode_msg_list_shards_request(Bin, TrUserData) ->
    dfp_read_field_def_list_shards_request(Bin,
                                           0,
                                           0,
                                           id(<<>>, TrUserData),
                                           TrUserData).

dfp_read_field_def_list_shards_request(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_list_shards_request_streamName(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
dfp_read_field_def_list_shards_request(<<>>, 0, 0, F@_1,
                                       _) ->
    #{streamName => F@_1};
dfp_read_field_def_list_shards_request(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_list_shards_request(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_list_shards_request(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_shards_request(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_list_shards_request(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_shards_request_streamName(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_shards_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_list_shards_request(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_list_shards_request(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_list_shards_request(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_list_shards_request(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_list_shards_request(<<>>, 0, 0, F@_1,
                                      _) ->
    #{streamName => F@_1}.

d_field_list_shards_request_streamName(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_shards_request_streamName(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
d_field_list_shards_request_streamName(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_list_shards_request(RestF,
                                           0,
                                           0,
                                           NewFValue,
                                           TrUserData).

skip_varint_list_shards_request(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_shards_request(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_list_shards_request(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_list_shards_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_shards_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_list_shards_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_shards_request(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_list_shards_request(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_shards_request(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_list_shards_request(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_list_shards_request(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_list_shards_response(Bin, TrUserData) ->
    dfp_read_field_def_list_shards_response(Bin,
                                            0,
                                            0,
                                            id([], TrUserData),
                                            TrUserData).

dfp_read_field_def_list_shards_response(<<10,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    d_field_list_shards_response_shards(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
dfp_read_field_def_list_shards_response(<<>>, 0, 0, R1,
                                        TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{shards => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_shards_response(Other, Z1, Z2,
                                        F@_1, TrUserData) ->
    dg_read_field_def_list_shards_response(Other,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

dg_read_field_def_list_shards_response(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_shards_response(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
dg_read_field_def_list_shards_response(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_shards_response_shards(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_shards_response(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                1 ->
                    skip_64_list_shards_response(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                2 ->
                    skip_length_delimited_list_shards_response(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
                3 ->
                    skip_group_list_shards_response(Rest,
                                                    Key bsr 3,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                5 ->
                    skip_32_list_shards_response(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData)
            end
    end;
dg_read_field_def_list_shards_response(<<>>, 0, 0, R1,
                                       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{shards => lists_reverse(R1, TrUserData)}
    end.

d_field_list_shards_response_shards(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_shards_response_shards(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
d_field_list_shards_response_shards(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_shard(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_shards_response(RestF,
                                            0,
                                            0,
                                            cons(NewFValue, Prev, TrUserData),
                                            TrUserData).

skip_varint_list_shards_response(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_shards_response(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData);
skip_varint_list_shards_response(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_response(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_length_delimited_list_shards_response(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_shards_response(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
skip_length_delimited_list_shards_response(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_shards_response(Rest2,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData).

skip_group_list_shards_response(Bin, FNum, Z2, F@_1,
                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_shards_response(Rest,
                                            0,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_32_list_shards_response(<<_:32, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_response(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_64_list_shards_response(<<_:64, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_shards_response(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

decode_msg_create_shard_reader_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_create_shard_reader_request(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   id(0, TrUserData),
                                                   id('$undef', TrUserData),
                                                   id(<<>>, TrUserData),
                                                   id(0, TrUserData),
                                                   TrUserData).

dfp_read_field_def_create_shard_reader_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    d_field_create_shard_reader_request_streamName(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
dfp_read_field_def_create_shard_reader_request(<<16,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    d_field_create_shard_reader_request_shardId(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
dfp_read_field_def_create_shard_reader_request(<<26,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    d_field_create_shard_reader_request_shardOffset(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
dfp_read_field_def_create_shard_reader_request(<<34,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    d_field_create_shard_reader_request_readerId(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
dfp_read_field_def_create_shard_reader_request(<<40,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    d_field_create_shard_reader_request_timeout(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
dfp_read_field_def_create_shard_reader_request(<<>>, 0,
                                               0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                               _) ->
    S1 = #{streamName => F@_1, shardId => F@_2,
           readerId => F@_4, timeout => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{shardOffset => F@_3}
    end;
dfp_read_field_def_create_shard_reader_request(Other,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    dg_read_field_def_create_shard_reader_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData).

dg_read_field_def_create_shard_reader_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_shard_reader_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
dg_read_field_def_create_shard_reader_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_create_shard_reader_request_streamName(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
        16 ->
            d_field_create_shard_reader_request_shardId(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData);
        26 ->
            d_field_create_shard_reader_request_shardOffset(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
        34 ->
            d_field_create_shard_reader_request_readerId(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
        40 ->
            d_field_create_shard_reader_request_timeout(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_create_shard_reader_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
                1 ->
                    skip_64_create_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_create_shard_reader_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      F@_4,
                                                                      F@_5,
                                                                      TrUserData);
                3 ->
                    skip_group_create_shard_reader_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
                5 ->
                    skip_32_create_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData)
            end
    end;
dg_read_field_def_create_shard_reader_request(<<>>, 0,
                                              0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                              _) ->
    S1 = #{streamName => F@_1, shardId => F@_2,
           readerId => F@_4, timeout => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{shardOffset => F@_3}
    end.

d_field_create_shard_reader_request_streamName(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_request_streamName(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
d_field_create_shard_reader_request_streamName(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, _, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

d_field_create_shard_reader_request_shardId(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_request_shardId(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
d_field_create_shard_reader_request_shardId(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                            TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_create_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

d_field_create_shard_reader_request_shardOffset(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_request_shardOffset(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
d_field_create_shard_reader_request_shardOffset(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, Prev, F@_4,
                                                F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_shard_offset(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   if Prev == '$undef' ->
                                                          NewFValue;
                                                      true ->
                                                          merge_msg_shard_offset(Prev,
                                                                                 NewFValue,
                                                                                 TrUserData)
                                                   end,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

d_field_create_shard_reader_request_readerId(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_request_readerId(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
d_field_create_shard_reader_request_readerId(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   NewFValue,
                                                   F@_5,
                                                   TrUserData).

d_field_create_shard_reader_request_timeout(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_request_timeout(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
d_field_create_shard_reader_request_timeout(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                            TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_create_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_create_shard_reader_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    skip_varint_create_shard_reader_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
skip_varint_create_shard_reader_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    dfp_read_field_def_create_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

skip_length_delimited_create_shard_reader_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_shard_reader_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
skip_length_delimited_create_shard_reader_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_shard_reader_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

skip_group_create_shard_reader_request(Bin, FNum, Z2,
                                       F@_1, F@_2, F@_3, F@_4, F@_5,
                                       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_shard_reader_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

skip_32_create_shard_reader_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData) ->
    dfp_read_field_def_create_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

skip_64_create_shard_reader_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                    TrUserData) ->
    dfp_read_field_def_create_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

decode_msg_create_shard_reader_response(Bin,
                                        TrUserData) ->
    dfp_read_field_def_create_shard_reader_response(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id(0, TrUserData),
                                                    id('$undef', TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(0, TrUserData),
                                                    TrUserData).

dfp_read_field_def_create_shard_reader_response(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    d_field_create_shard_reader_response_streamName(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
dfp_read_field_def_create_shard_reader_response(<<16,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    d_field_create_shard_reader_response_shardId(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
dfp_read_field_def_create_shard_reader_response(<<26,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    d_field_create_shard_reader_response_shardOffset(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
dfp_read_field_def_create_shard_reader_response(<<34,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    d_field_create_shard_reader_response_readerId(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
dfp_read_field_def_create_shard_reader_response(<<40,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    d_field_create_shard_reader_response_timeout(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
dfp_read_field_def_create_shard_reader_response(<<>>, 0,
                                                0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                                _) ->
    S1 = #{streamName => F@_1, shardId => F@_2,
           readerId => F@_4, timeout => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{shardOffset => F@_3}
    end;
dfp_read_field_def_create_shard_reader_response(Other,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    dg_read_field_def_create_shard_reader_response(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData).

dg_read_field_def_create_shard_reader_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_shard_reader_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
dg_read_field_def_create_shard_reader_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_create_shard_reader_response_streamName(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
        16 ->
            d_field_create_shard_reader_response_shardId(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
        26 ->
            d_field_create_shard_reader_response_shardOffset(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
        34 ->
            d_field_create_shard_reader_response_readerId(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
        40 ->
            d_field_create_shard_reader_response_timeout(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_create_shard_reader_response(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
                1 ->
                    skip_64_create_shard_reader_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_create_shard_reader_response(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       TrUserData);
                3 ->
                    skip_group_create_shard_reader_response(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
                5 ->
                    skip_32_create_shard_reader_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData)
            end
    end;
dg_read_field_def_create_shard_reader_response(<<>>, 0,
                                               0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                               _) ->
    S1 = #{streamName => F@_1, shardId => F@_2,
           readerId => F@_4, timeout => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{shardOffset => F@_3}
    end.

d_field_create_shard_reader_response_streamName(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_response_streamName(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
d_field_create_shard_reader_response_streamName(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, _, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

d_field_create_shard_reader_response_shardId(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_response_shardId(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
d_field_create_shard_reader_response_shardId(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_create_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    NewFValue,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

d_field_create_shard_reader_response_shardOffset(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_response_shardOffset(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
d_field_create_shard_reader_response_shardOffset(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, Prev, F@_4,
                                                 F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_shard_offset(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    if Prev == '$undef' ->
                                                           NewFValue;
                                                       true ->
                                                           merge_msg_shard_offset(Prev,
                                                                                  NewFValue,
                                                                                  TrUserData)
                                                    end,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

d_field_create_shard_reader_response_readerId(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_response_readerId(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
d_field_create_shard_reader_response_readerId(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_create_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    NewFValue,
                                                    F@_5,
                                                    TrUserData).

d_field_create_shard_reader_response_timeout(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, TrUserData)
    when N < 57 ->
    d_field_create_shard_reader_response_timeout(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
d_field_create_shard_reader_response_timeout(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_create_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_create_shard_reader_response(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    skip_varint_create_shard_reader_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData);
skip_varint_create_shard_reader_response(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    dfp_read_field_def_create_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

skip_length_delimited_create_shard_reader_response(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_shard_reader_response(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData);
skip_length_delimited_create_shard_reader_response(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_shard_reader_response(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

skip_group_create_shard_reader_response(Bin, FNum, Z2,
                                        F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_shard_reader_response(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

skip_32_create_shard_reader_response(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    dfp_read_field_def_create_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

skip_64_create_shard_reader_response(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    dfp_read_field_def_create_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData).

decode_msg_read_shard_request(Bin, TrUserData) ->
    dfp_read_field_def_read_shard_request(Bin,
                                          0,
                                          0,
                                          id(<<>>, TrUserData),
                                          id(0, TrUserData),
                                          TrUserData).

dfp_read_field_def_read_shard_request(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_read_shard_request_readerId(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
dfp_read_field_def_read_shard_request(<<16,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_read_shard_request_maxRecords(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_read_shard_request(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    #{readerId => F@_1, maxRecords => F@_2};
dfp_read_field_def_read_shard_request(Other, Z1, Z2,
                                      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_read_shard_request(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

dg_read_field_def_read_shard_request(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_read_shard_request(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
dg_read_field_def_read_shard_request(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_read_shard_request_readerId(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
        16 ->
            d_field_read_shard_request_maxRecords(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_read_shard_request(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                1 ->
                    skip_64_read_shard_request(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                2 ->
                    skip_length_delimited_read_shard_request(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                3 ->
                    skip_group_read_shard_request(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                5 ->
                    skip_32_read_shard_request(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData)
            end
    end;
dg_read_field_def_read_shard_request(<<>>, 0, 0, F@_1,
                                     F@_2, _) ->
    #{readerId => F@_1, maxRecords => F@_2}.

d_field_read_shard_request_readerId(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_read_shard_request_readerId(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
d_field_read_shard_request_readerId(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_read_shard_request(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          F@_2,
                                          TrUserData).

d_field_read_shard_request_maxRecords(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_read_shard_request_maxRecords(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_read_shard_request_maxRecords(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_read_shard_request(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          NewFValue,
                                          TrUserData).

skip_varint_read_shard_request(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_read_shard_request(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
skip_varint_read_shard_request(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_read_shard_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_length_delimited_read_shard_request(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_read_shard_request(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_length_delimited_read_shard_request(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_read_shard_request(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_group_read_shard_request(Bin, FNum, Z2, F@_1, F@_2,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_read_shard_request(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_32_read_shard_request(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_read_shard_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_64_read_shard_request(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_read_shard_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

decode_msg_delete_shard_reader_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_delete_shard_reader_request(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_delete_shard_reader_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    d_field_delete_shard_reader_request_readerId(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
dfp_read_field_def_delete_shard_reader_request(<<>>, 0,
                                               0, F@_1, _) ->
    #{readerId => F@_1};
dfp_read_field_def_delete_shard_reader_request(Other,
                                               Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_delete_shard_reader_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

dg_read_field_def_delete_shard_reader_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_shard_reader_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
dg_read_field_def_delete_shard_reader_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_shard_reader_request_readerId(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_shard_reader_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                1 ->
                    skip_64_delete_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_delete_shard_reader_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                3 ->
                    skip_group_delete_shard_reader_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                5 ->
                    skip_32_delete_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData)
            end
    end;
dg_read_field_def_delete_shard_reader_request(<<>>, 0,
                                              0, F@_1, _) ->
    #{readerId => F@_1}.

d_field_delete_shard_reader_request_readerId(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_delete_shard_reader_request_readerId(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
d_field_delete_shard_reader_request_readerId(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_delete_shard_reader_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    skip_varint_delete_shard_reader_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
skip_varint_delete_shard_reader_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_length_delimited_delete_shard_reader_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_shard_reader_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      TrUserData);
skip_length_delimited_delete_shard_reader_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_shard_reader_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData).

skip_group_delete_shard_reader_request(Bin, FNum, Z2,
                                       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_shard_reader_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_32_delete_shard_reader_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_64_delete_shard_reader_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

decode_msg_read_shard_response(Bin, TrUserData) ->
    dfp_read_field_def_read_shard_response(Bin,
                                           0,
                                           0,
                                           id([], TrUserData),
                                           TrUserData).

dfp_read_field_def_read_shard_response(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_read_shard_response_receivedRecords(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData);
dfp_read_field_def_read_shard_response(<<>>, 0, 0, R1,
                                       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{receivedRecords => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_read_shard_response(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_read_shard_response(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_read_shard_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_read_shard_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_read_shard_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_read_shard_response_receivedRecords(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_read_shard_response(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_read_shard_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_read_shard_response(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_read_shard_response(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_read_shard_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_read_shard_response(<<>>, 0, 0, R1,
                                      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true ->
           S1#{receivedRecords => lists_reverse(R1, TrUserData)}
    end.

d_field_read_shard_response_receivedRecords(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_read_shard_response_receivedRecords(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
d_field_read_shard_response_receivedRecords(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_received_record(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_read_shard_response(RestF,
                                           0,
                                           0,
                                           cons(NewFValue, Prev, TrUserData),
                                           TrUserData).

skip_varint_read_shard_response(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_read_shard_response(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_read_shard_response(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_read_shard_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_read_shard_response(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_read_shard_response(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_read_shard_response(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_read_shard_response(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_read_shard_response(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_read_shard_response(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_read_shard_response(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_read_shard_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_read_shard_response(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_read_shard_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_terminate_queries_request(Bin, TrUserData) ->
    dfp_read_field_def_terminate_queries_request(Bin,
                                                 0,
                                                 0,
                                                 id([], TrUserData),
                                                 id(false, TrUserData),
                                                 TrUserData).

dfp_read_field_def_terminate_queries_request(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_terminate_queries_request_queryId(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_terminate_queries_request(<<16,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_terminate_queries_request_all(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_terminate_queries_request(<<>>, 0, 0,
                                             R1, F@_2, TrUserData) ->
    #{queryId => lists_reverse(R1, TrUserData),
      all => F@_2};
dfp_read_field_def_terminate_queries_request(Other, Z1,
                                             Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_terminate_queries_request(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData).

dg_read_field_def_terminate_queries_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_terminate_queries_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
dg_read_field_def_terminate_queries_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_terminate_queries_request_queryId(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        16 ->
            d_field_terminate_queries_request_all(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_terminate_queries_request(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                1 ->
                    skip_64_terminate_queries_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_terminate_queries_request(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
                3 ->
                    skip_group_terminate_queries_request(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                5 ->
                    skip_32_terminate_queries_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData)
            end
    end;
dg_read_field_def_terminate_queries_request(<<>>, 0, 0,
                                            R1, F@_2, TrUserData) ->
    #{queryId => lists_reverse(R1, TrUserData),
      all => F@_2}.

d_field_terminate_queries_request_queryId(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_terminate_queries_request_queryId(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_terminate_queries_request_queryId(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_terminate_queries_request(RestF,
                                                 0,
                                                 0,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_2,
                                                 TrUserData).

d_field_terminate_queries_request_all(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_terminate_queries_request_all(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_terminate_queries_request_all(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_terminate_queries_request(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 NewFValue,
                                                 TrUserData).

skip_varint_terminate_queries_request(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_terminate_queries_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_varint_terminate_queries_request(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_terminate_queries_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_length_delimited_terminate_queries_request(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_terminate_queries_request(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
skip_length_delimited_terminate_queries_request(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2,
                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_terminate_queries_request(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_group_terminate_queries_request(Bin, FNum, Z2,
                                     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_terminate_queries_request(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_32_terminate_queries_request(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_terminate_queries_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_64_terminate_queries_request(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_terminate_queries_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

decode_msg_terminate_queries_response(Bin,
                                      TrUserData) ->
    dfp_read_field_def_terminate_queries_response(Bin,
                                                  0,
                                                  0,
                                                  id([], TrUserData),
                                                  TrUserData).

dfp_read_field_def_terminate_queries_response(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    d_field_terminate_queries_response_queryId(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData);
dfp_read_field_def_terminate_queries_response(<<>>, 0,
                                              0, R1, TrUserData) ->
    #{queryId => lists_reverse(R1, TrUserData)};
dfp_read_field_def_terminate_queries_response(Other, Z1,
                                              Z2, F@_1, TrUserData) ->
    dg_read_field_def_terminate_queries_response(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

dg_read_field_def_terminate_queries_response(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_terminate_queries_response(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
dg_read_field_def_terminate_queries_response(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_terminate_queries_response_queryId(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_terminate_queries_response(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                1 ->
                    skip_64_terminate_queries_response(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_terminate_queries_response(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
                3 ->
                    skip_group_terminate_queries_response(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                5 ->
                    skip_32_terminate_queries_response(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData)
            end
    end;
dg_read_field_def_terminate_queries_response(<<>>, 0, 0,
                                             R1, TrUserData) ->
    #{queryId => lists_reverse(R1, TrUserData)}.

d_field_terminate_queries_response_queryId(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_terminate_queries_response_queryId(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
d_field_terminate_queries_response_queryId(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_terminate_queries_response(RestF,
                                                  0,
                                                  0,
                                                  cons(NewFValue,
                                                       Prev,
                                                       TrUserData),
                                                  TrUserData).

skip_varint_terminate_queries_response(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_terminate_queries_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
skip_varint_terminate_queries_response(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_terminate_queries_response(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_length_delimited_terminate_queries_response(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_terminate_queries_response(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
skip_length_delimited_terminate_queries_response(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_terminate_queries_response(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData).

skip_group_terminate_queries_response(Bin, FNum, Z2,
                                      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_terminate_queries_response(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_32_terminate_queries_response(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_terminate_queries_response(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_64_terminate_queries_response(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_terminate_queries_response(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

decode_msg_list_queries_request(Bin, TrUserData) ->
    dfp_read_field_def_list_queries_request(Bin,
                                            0,
                                            0,
                                            TrUserData).

dfp_read_field_def_list_queries_request(<<>>, 0, 0,
                                        _) ->
    #{};
dfp_read_field_def_list_queries_request(Other, Z1, Z2,
                                        TrUserData) ->
    dg_read_field_def_list_queries_request(Other,
                                           Z1,
                                           Z2,
                                           TrUserData).

dg_read_field_def_list_queries_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_queries_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           TrUserData);
dg_read_field_def_list_queries_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_queries_request(Rest,
                                             0,
                                             0,
                                             TrUserData);
        1 ->
            skip_64_list_queries_request(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_list_queries_request(Rest,
                                                       0,
                                                       0,
                                                       TrUserData);
        3 ->
            skip_group_list_queries_request(Rest,
                                            Key bsr 3,
                                            0,
                                            TrUserData);
        5 ->
            skip_32_list_queries_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_list_queries_request(<<>>, 0, 0, _) ->
    #{}.

skip_varint_list_queries_request(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, TrUserData) ->
    skip_varint_list_queries_request(Rest,
                                     Z1,
                                     Z2,
                                     TrUserData);
skip_varint_list_queries_request(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_queries_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

skip_length_delimited_list_queries_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_queries_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               TrUserData);
skip_length_delimited_list_queries_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_queries_request(Rest2,
                                            0,
                                            0,
                                            TrUserData).

skip_group_list_queries_request(Bin, FNum, Z2,
                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_queries_request(Rest,
                                            0,
                                            Z2,
                                            TrUserData).

skip_32_list_queries_request(<<_:32, Rest/binary>>, Z1,
                             Z2, TrUserData) ->
    dfp_read_field_def_list_queries_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

skip_64_list_queries_request(<<_:64, Rest/binary>>, Z1,
                             Z2, TrUserData) ->
    dfp_read_field_def_list_queries_request(Rest,
                                            Z1,
                                            Z2,
                                            TrUserData).

decode_msg_list_queries_response(Bin, TrUserData) ->
    dfp_read_field_def_list_queries_response(Bin,
                                             0,
                                             0,
                                             id([], TrUserData),
                                             TrUserData).

dfp_read_field_def_list_queries_response(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_list_queries_response_queries(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_list_queries_response(<<>>, 0, 0, R1,
                                         TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{queries => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_queries_response(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_list_queries_response(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_list_queries_response(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_queries_response(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_list_queries_response(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_queries_response_queries(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_queries_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_list_queries_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_list_queries_response(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_list_queries_response(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_list_queries_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_list_queries_response(<<>>, 0, 0, R1,
                                        TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{queries => lists_reverse(R1, TrUserData)}
    end.

d_field_list_queries_response_queries(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_queries_response_queries(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_list_queries_response_queries(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_query(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_queries_response(RestF,
                                             0,
                                             0,
                                             cons(NewFValue, Prev, TrUserData),
                                             TrUserData).

skip_varint_list_queries_response(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_queries_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_list_queries_response(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_queries_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_list_queries_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_queries_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_list_queries_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_queries_response(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_list_queries_response(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_queries_response(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_list_queries_response(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_queries_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_list_queries_response(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_queries_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_get_query_request(Bin, TrUserData) ->
    dfp_read_field_def_get_query_request(Bin,
                                         0,
                                         0,
                                         id(<<>>, TrUserData),
                                         TrUserData).

dfp_read_field_def_get_query_request(<<10,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    d_field_get_query_request_id(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData);
dfp_read_field_def_get_query_request(<<>>, 0, 0, F@_1,
                                     _) ->
    #{id => F@_1};
dfp_read_field_def_get_query_request(Other, Z1, Z2,
                                     F@_1, TrUserData) ->
    dg_read_field_def_get_query_request(Other,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

dg_read_field_def_get_query_request(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_query_request(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
dg_read_field_def_get_query_request(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_get_query_request_id(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_get_query_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                1 ->
                    skip_64_get_query_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_get_query_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                3 ->
                    skip_group_get_query_request(Rest,
                                                 Key bsr 3,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                5 ->
                    skip_32_get_query_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_query_request(<<>>, 0, 0, F@_1,
                                    _) ->
    #{id => F@_1}.

d_field_get_query_request_id(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_query_request_id(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
d_field_get_query_request_id(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_get_query_request(RestF,
                                         0,
                                         0,
                                         NewFValue,
                                         TrUserData).

skip_varint_get_query_request(<<1:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_query_request(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData);
skip_varint_get_query_request(<<0:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_query_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_length_delimited_get_query_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_query_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
skip_length_delimited_get_query_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_query_request(Rest2,
                                         0,
                                         0,
                                         F@_1,
                                         TrUserData).

skip_group_get_query_request(Bin, FNum, Z2, F@_1,
                             TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_query_request(Rest,
                                         0,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_32_get_query_request(<<_:32, Rest/binary>>, Z1, Z2,
                          F@_1, TrUserData) ->
    dfp_read_field_def_get_query_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_64_get_query_request(<<_:64, Rest/binary>>, Z1, Z2,
                          F@_1, TrUserData) ->
    dfp_read_field_def_get_query_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

decode_msg_query(Bin, TrUserData) ->
    dfp_read_field_def_query(Bin,
                             0,
                             0,
                             id(<<>>, TrUserData),
                             id('TASK_CREATING', TrUserData),
                             id(0, TrUserData),
                             id(<<>>, TrUserData),
                             TrUserData).

dfp_read_field_def_query(<<10, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_query_id(Rest,
                     Z1,
                     Z2,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     TrUserData);
dfp_read_field_def_query(<<16, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_query_status(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         TrUserData);
dfp_read_field_def_query(<<24, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_query_createdTime(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
dfp_read_field_def_query(<<34, Rest/binary>>, Z1, Z2,
                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_query_queryText(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData);
dfp_read_field_def_query(<<>>, 0, 0, F@_1, F@_2, F@_3,
                         F@_4, _) ->
    #{id => F@_1, status => F@_2, createdTime => F@_3,
      queryText => F@_4};
dfp_read_field_def_query(Other, Z1, Z2, F@_1, F@_2,
                         F@_3, F@_4, TrUserData) ->
    dg_read_field_def_query(Other,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

dg_read_field_def_query(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_query(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData);
dg_read_field_def_query(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_query_id(Rest,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData);
        16 ->
            d_field_query_status(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
        24 ->
            d_field_query_createdTime(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
        34 ->
            d_field_query_queryText(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_query(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
                1 ->
                    skip_64_query(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData);
                2 ->
                    skip_length_delimited_query(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
                3 ->
                    skip_group_query(Rest,
                                     Key bsr 3,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
                5 ->
                    skip_32_query(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData)
            end
    end;
dg_read_field_def_query(<<>>, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, _) ->
    #{id => F@_1, status => F@_2, createdTime => F@_3,
      queryText => F@_4}.

d_field_query_id(<<1:1, X:7, Rest/binary>>, N, Acc,
                 F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_query_id(Rest,
                     N + 7,
                     X bsl N + Acc,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     TrUserData);
d_field_query_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
                 F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_query(RestF,
                             0,
                             0,
                             NewFValue,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

d_field_query_status(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_query_status(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         TrUserData);
d_field_query_status(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_hstream.server.TaskStatusPB'(begin
                                                     <<Res:32/signed-native>> =
                                                         <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                                                     id(Res, TrUserData)
                                                 end),
            TrUserData),
         Rest},
    dfp_read_field_def_query(RestF,
                             0,
                             0,
                             F@_1,
                             NewFValue,
                             F@_3,
                             F@_4,
                             TrUserData).

d_field_query_createdTime(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_query_createdTime(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              TrUserData);
d_field_query_createdTime(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                                                Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_query(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             NewFValue,
                             F@_4,
                             TrUserData).

d_field_query_queryText(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_query_queryText(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData);
d_field_query_queryText(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_query(RestF,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             NewFValue,
                             TrUserData).

skip_varint_query(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_query(Rest,
                      Z1,
                      Z2,
                      F@_1,
                      F@_2,
                      F@_3,
                      F@_4,
                      TrUserData);
skip_varint_query(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_query(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

skip_length_delimited_query(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_query(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
skip_length_delimited_query(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_query(Rest2,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

skip_group_query(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_query(Rest,
                             0,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

skip_32_query(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
              F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_query(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

skip_64_query(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
              F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_query(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             TrUserData).

decode_msg_delete_query_request(Bin, TrUserData) ->
    dfp_read_field_def_delete_query_request(Bin,
                                            0,
                                            0,
                                            id(<<>>, TrUserData),
                                            TrUserData).

dfp_read_field_def_delete_query_request(<<10,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    d_field_delete_query_request_id(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
dfp_read_field_def_delete_query_request(<<>>, 0, 0,
                                        F@_1, _) ->
    #{id => F@_1};
dfp_read_field_def_delete_query_request(Other, Z1, Z2,
                                        F@_1, TrUserData) ->
    dg_read_field_def_delete_query_request(Other,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

dg_read_field_def_delete_query_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_query_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
dg_read_field_def_delete_query_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_query_request_id(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_query_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                1 ->
                    skip_64_delete_query_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                2 ->
                    skip_length_delimited_delete_query_request(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
                3 ->
                    skip_group_delete_query_request(Rest,
                                                    Key bsr 3,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                5 ->
                    skip_32_delete_query_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData)
            end
    end;
dg_read_field_def_delete_query_request(<<>>, 0, 0, F@_1,
                                       _) ->
    #{id => F@_1}.

d_field_delete_query_request_id(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_delete_query_request_id(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
d_field_delete_query_request_id(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_query_request(RestF,
                                            0,
                                            0,
                                            NewFValue,
                                            TrUserData).

skip_varint_delete_query_request(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_delete_query_request(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData);
skip_varint_delete_query_request(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_length_delimited_delete_query_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_query_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
skip_length_delimited_delete_query_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_query_request(Rest2,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData).

skip_group_delete_query_request(Bin, FNum, Z2, F@_1,
                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_query_request(Rest,
                                            0,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_32_delete_query_request(<<_:32, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_64_delete_query_request(<<_:64, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

decode_msg_delete_query_response(Bin, TrUserData) ->
    dfp_read_field_def_delete_query_response(Bin,
                                             0,
                                             0,
                                             id(false, TrUserData),
                                             TrUserData).

dfp_read_field_def_delete_query_response(<<8,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_delete_query_response_success(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_delete_query_response(<<>>, 0, 0,
                                         F@_1, _) ->
    #{success => F@_1};
dfp_read_field_def_delete_query_response(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_delete_query_response(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_delete_query_response(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_query_response(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_delete_query_response(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_delete_query_response_success(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_query_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_delete_query_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_delete_query_response(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_delete_query_response(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_delete_query_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_delete_query_response(<<>>, 0, 0,
                                        F@_1, _) ->
    #{success => F@_1}.

d_field_delete_query_response_success(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_delete_query_response_success(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_delete_query_response_success(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_delete_query_response(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             TrUserData).

skip_varint_delete_query_response(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_delete_query_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_delete_query_response(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_delete_query_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_query_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_delete_query_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_query_response(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_delete_query_response(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_query_response(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_delete_query_response(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_delete_query_response(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_query_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_restart_query_request(Bin, TrUserData) ->
    dfp_read_field_def_restart_query_request(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             TrUserData).

dfp_read_field_def_restart_query_request(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_restart_query_request_id(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData);
dfp_read_field_def_restart_query_request(<<>>, 0, 0,
                                         F@_1, _) ->
    #{id => F@_1};
dfp_read_field_def_restart_query_request(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_restart_query_request(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_restart_query_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_restart_query_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_restart_query_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_restart_query_request_id(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_restart_query_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_restart_query_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_restart_query_request(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_restart_query_request(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_restart_query_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_restart_query_request(<<>>, 0, 0,
                                        F@_1, _) ->
    #{id => F@_1}.

d_field_restart_query_request_id(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_restart_query_request_id(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     TrUserData);
d_field_restart_query_request_id(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_restart_query_request(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             TrUserData).

skip_varint_restart_query_request(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_restart_query_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_restart_query_request(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_restart_query_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_restart_query_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_restart_query_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_restart_query_request(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_restart_query_request(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_restart_query_request(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_restart_query_request(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_restart_query_request(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_restart_query_response(Bin, TrUserData) ->
    dfp_read_field_def_restart_query_response(Bin,
                                              0,
                                              0,
                                              id(false, TrUserData),
                                              TrUserData).

dfp_read_field_def_restart_query_response(<<8,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    d_field_restart_query_response_success(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
dfp_read_field_def_restart_query_response(<<>>, 0, 0,
                                          F@_1, _) ->
    #{success => F@_1};
dfp_read_field_def_restart_query_response(Other, Z1, Z2,
                                          F@_1, TrUserData) ->
    dg_read_field_def_restart_query_response(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

dg_read_field_def_restart_query_response(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_restart_query_response(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
dg_read_field_def_restart_query_response(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_restart_query_response_success(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_restart_query_response(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                1 ->
                    skip_64_restart_query_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_restart_query_response(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                3 ->
                    skip_group_restart_query_response(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                5 ->
                    skip_32_restart_query_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData)
            end
    end;
dg_read_field_def_restart_query_response(<<>>, 0, 0,
                                         F@_1, _) ->
    #{success => F@_1}.

d_field_restart_query_response_success(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_restart_query_response_success(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
d_field_restart_query_response_success(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_restart_query_response(RestF,
                                              0,
                                              0,
                                              NewFValue,
                                              TrUserData).

skip_varint_restart_query_response(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_restart_query_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
skip_varint_restart_query_response(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_length_delimited_restart_query_response(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_restart_query_response(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
skip_length_delimited_restart_query_response(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_restart_query_response(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData).

skip_group_restart_query_response(Bin, FNum, Z2, F@_1,
                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_restart_query_response(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_32_restart_query_response(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_64_restart_query_response(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_restart_query_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

decode_msg_create_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_create_connector_request(Bin,
                                                0,
                                                0,
                                                id(<<>>, TrUserData),
                                                TrUserData).

dfp_read_field_def_create_connector_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_create_connector_request_sql(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
dfp_read_field_def_create_connector_request(<<>>, 0, 0,
                                            F@_1, _) ->
    #{sql => F@_1};
dfp_read_field_def_create_connector_request(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_create_connector_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_create_connector_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_connector_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_create_connector_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_create_connector_request_sql(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_create_connector_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_create_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_create_connector_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_create_connector_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_create_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_create_connector_request(<<>>, 0, 0,
                                           F@_1, _) ->
    #{sql => F@_1}.

d_field_create_connector_request_sql(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_create_connector_request_sql(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
d_field_create_connector_request_sql(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_create_connector_request(RestF,
                                                0,
                                                0,
                                                NewFValue,
                                                TrUserData).

skip_varint_create_connector_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_create_connector_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_create_connector_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_create_connector_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_connector_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_create_connector_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_connector_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_create_connector_request(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_connector_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_create_connector_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_create_connector_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_list_connectors_request(Bin, TrUserData) ->
    dfp_read_field_def_list_connectors_request(Bin,
                                               0,
                                               0,
                                               TrUserData).

dfp_read_field_def_list_connectors_request(<<>>, 0, 0,
                                           _) ->
    #{};
dfp_read_field_def_list_connectors_request(Other, Z1,
                                           Z2, TrUserData) ->
    dg_read_field_def_list_connectors_request(Other,
                                              Z1,
                                              Z2,
                                              TrUserData).

dg_read_field_def_list_connectors_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_connectors_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              TrUserData);
dg_read_field_def_list_connectors_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_connectors_request(Rest,
                                                0,
                                                0,
                                                TrUserData);
        1 ->
            skip_64_list_connectors_request(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_list_connectors_request(Rest,
                                                          0,
                                                          0,
                                                          TrUserData);
        3 ->
            skip_group_list_connectors_request(Rest,
                                               Key bsr 3,
                                               0,
                                               TrUserData);
        5 ->
            skip_32_list_connectors_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_list_connectors_request(<<>>, 0, 0,
                                          _) ->
    #{}.

skip_varint_list_connectors_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, TrUserData) ->
    skip_varint_list_connectors_request(Rest,
                                        Z1,
                                        Z2,
                                        TrUserData);
skip_varint_list_connectors_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_connectors_request(Rest,
                                               Z1,
                                               Z2,
                                               TrUserData).

skip_length_delimited_list_connectors_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_connectors_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  TrUserData);
skip_length_delimited_list_connectors_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_connectors_request(Rest2,
                                               0,
                                               0,
                                               TrUserData).

skip_group_list_connectors_request(Bin, FNum, Z2,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_connectors_request(Rest,
                                               0,
                                               Z2,
                                               TrUserData).

skip_32_list_connectors_request(<<_:32, Rest/binary>>,
                                Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_connectors_request(Rest,
                                               Z1,
                                               Z2,
                                               TrUserData).

skip_64_list_connectors_request(<<_:64, Rest/binary>>,
                                Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_connectors_request(Rest,
                                               Z1,
                                               Z2,
                                               TrUserData).

decode_msg_list_connectors_response(Bin, TrUserData) ->
    dfp_read_field_def_list_connectors_response(Bin,
                                                0,
                                                0,
                                                id([], TrUserData),
                                                TrUserData).

dfp_read_field_def_list_connectors_response(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_list_connectors_response_connectors(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData);
dfp_read_field_def_list_connectors_response(<<>>, 0, 0,
                                            R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connectors => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_connectors_response(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_list_connectors_response(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_list_connectors_response(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_connectors_response(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_list_connectors_response(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_connectors_response_connectors(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_connectors_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_list_connectors_response(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_list_connectors_response(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_list_connectors_response(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_list_connectors_response(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_list_connectors_response(<<>>, 0, 0,
                                           R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connectors => lists_reverse(R1, TrUserData)}
    end.

d_field_list_connectors_response_connectors(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_connectors_response_connectors(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
d_field_list_connectors_response_connectors(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_connector(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_connectors_response(RestF,
                                                0,
                                                0,
                                                cons(NewFValue,
                                                     Prev,
                                                     TrUserData),
                                                TrUserData).

skip_varint_list_connectors_response(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_connectors_response(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_list_connectors_response(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_connectors_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_list_connectors_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_connectors_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_list_connectors_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_connectors_response(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_list_connectors_response(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_connectors_response(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_list_connectors_response(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_connectors_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_list_connectors_response(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_connectors_response(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_get_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_get_connector_request(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             TrUserData).

dfp_read_field_def_get_connector_request(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_get_connector_request_name(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
dfp_read_field_def_get_connector_request(<<>>, 0, 0,
                                         F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_get_connector_request(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_get_connector_request(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_get_connector_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_connector_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_get_connector_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_get_connector_request_name(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_get_connector_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_get_connector_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_get_connector_request(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_get_connector_request(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_get_connector_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_get_connector_request(<<>>, 0, 0,
                                        F@_1, _) ->
    #{name => F@_1}.

d_field_get_connector_request_name(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_connector_request_name(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
d_field_get_connector_request_name(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_get_connector_request(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             TrUserData).

skip_varint_get_connector_request(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_connector_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_get_connector_request(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_connector_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_get_connector_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_connector_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_get_connector_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_connector_request(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_get_connector_request(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_connector_request(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_get_connector_request(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_connector_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_get_connector_request(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_connector_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_connector(Bin, TrUserData) ->
    dfp_read_field_def_connector(Bin,
                                 0,
                                 0,
                                 id('$undef', TrUserData),
                                 TrUserData).

dfp_read_field_def_connector(<<10, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    d_field_connector_info(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_connector(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{info => F@_1}
    end;
dfp_read_field_def_connector(Other, Z1, Z2, F@_1,
                             TrUserData) ->
    dg_read_field_def_connector(Other,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData).

dg_read_field_def_connector(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_connector(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
dg_read_field_def_connector(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_connector_info(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_connector(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_connector(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_connector(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                3 ->
                    skip_group_connector(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         TrUserData);
                5 -> skip_32_connector(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_connector(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{info => F@_1}
    end.

d_field_connector_info(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_connector_info(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           TrUserData);
d_field_connector_info(<<0:1, X:7, Rest/binary>>, N,
                       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_struct(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_connector(RestF,
                                 0,
                                 0,
                                 if Prev == '$undef' -> NewFValue;
                                    true ->
                                        merge_msg_struct(Prev,
                                                         NewFValue,
                                                         TrUserData)
                                 end,
                                 TrUserData).

skip_varint_connector(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    skip_varint_connector(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_connector(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_connector(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_length_delimited_connector(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_connector(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
skip_length_delimited_connector(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_connector(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 TrUserData).

skip_group_connector(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_connector(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_32_connector(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  TrUserData) ->
    dfp_read_field_def_connector(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

skip_64_connector(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  TrUserData) ->
    dfp_read_field_def_connector(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

decode_msg_delete_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_delete_connector_request(Bin,
                                                0,
                                                0,
                                                id(<<>>, TrUserData),
                                                TrUserData).

dfp_read_field_def_delete_connector_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_delete_connector_request_name(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_delete_connector_request(<<>>, 0, 0,
                                            F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_delete_connector_request(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_delete_connector_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_delete_connector_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_connector_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_delete_connector_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_connector_request_name(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_connector_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_delete_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_delete_connector_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_delete_connector_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_delete_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_delete_connector_request(<<>>, 0, 0,
                                           F@_1, _) ->
    #{name => F@_1}.

d_field_delete_connector_request_name(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_delete_connector_request_name(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_delete_connector_request_name(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_connector_request(RestF,
                                                0,
                                                0,
                                                NewFValue,
                                                TrUserData).

skip_varint_delete_connector_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_delete_connector_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_delete_connector_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_delete_connector_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_connector_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_delete_connector_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_connector_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_delete_connector_request(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_connector_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_delete_connector_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_delete_connector_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_pause_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_pause_connector_request(Bin,
                                               0,
                                               0,
                                               id(<<>>, TrUserData),
                                               TrUserData).

dfp_read_field_def_pause_connector_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    d_field_pause_connector_request_name(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
dfp_read_field_def_pause_connector_request(<<>>, 0, 0,
                                           F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_pause_connector_request(Other, Z1,
                                           Z2, F@_1, TrUserData) ->
    dg_read_field_def_pause_connector_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

dg_read_field_def_pause_connector_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_pause_connector_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
dg_read_field_def_pause_connector_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_pause_connector_request_name(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_pause_connector_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                1 ->
                    skip_64_pause_connector_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_pause_connector_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                3 ->
                    skip_group_pause_connector_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                5 ->
                    skip_32_pause_connector_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData)
            end
    end;
dg_read_field_def_pause_connector_request(<<>>, 0, 0,
                                          F@_1, _) ->
    #{name => F@_1}.

d_field_pause_connector_request_name(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_pause_connector_request_name(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
d_field_pause_connector_request_name(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_pause_connector_request(RestF,
                                               0,
                                               0,
                                               NewFValue,
                                               TrUserData).

skip_varint_pause_connector_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_pause_connector_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
skip_varint_pause_connector_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_pause_connector_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_length_delimited_pause_connector_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_pause_connector_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
skip_length_delimited_pause_connector_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pause_connector_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData).

skip_group_pause_connector_request(Bin, FNum, Z2, F@_1,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pause_connector_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_32_pause_connector_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_pause_connector_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_64_pause_connector_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_pause_connector_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

decode_msg_resume_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_resume_connector_request(Bin,
                                                0,
                                                0,
                                                id(<<>>, TrUserData),
                                                TrUserData).

dfp_read_field_def_resume_connector_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_resume_connector_request_name(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_resume_connector_request(<<>>, 0, 0,
                                            F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_resume_connector_request(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_resume_connector_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_resume_connector_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_resume_connector_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_resume_connector_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_resume_connector_request_name(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_resume_connector_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_resume_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_resume_connector_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_resume_connector_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_resume_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_resume_connector_request(<<>>, 0, 0,
                                           F@_1, _) ->
    #{name => F@_1}.

d_field_resume_connector_request_name(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_resume_connector_request_name(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_resume_connector_request_name(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_resume_connector_request(RestF,
                                                0,
                                                0,
                                                NewFValue,
                                                TrUserData).

skip_varint_resume_connector_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_resume_connector_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_resume_connector_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_resume_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_resume_connector_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_resume_connector_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_resume_connector_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resume_connector_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_resume_connector_request(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resume_connector_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_resume_connector_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_resume_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_resume_connector_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_resume_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_get_view_request(Bin, TrUserData) ->
    dfp_read_field_def_get_view_request(Bin,
                                        0,
                                        0,
                                        id(<<>>, TrUserData),
                                        TrUserData).

dfp_read_field_def_get_view_request(<<10, Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    d_field_get_view_request_viewId(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
dfp_read_field_def_get_view_request(<<>>, 0, 0, F@_1,
                                    _) ->
    #{viewId => F@_1};
dfp_read_field_def_get_view_request(Other, Z1, Z2, F@_1,
                                    TrUserData) ->
    dg_read_field_def_get_view_request(Other,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

dg_read_field_def_get_view_request(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_view_request(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
dg_read_field_def_get_view_request(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_get_view_request_viewId(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_get_view_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                1 ->
                    skip_64_get_view_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_get_view_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                3 ->
                    skip_group_get_view_request(Rest,
                                                Key bsr 3,
                                                0,
                                                F@_1,
                                                TrUserData);
                5 ->
                    skip_32_get_view_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_view_request(<<>>, 0, 0, F@_1,
                                   _) ->
    #{viewId => F@_1}.

d_field_get_view_request_viewId(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_view_request_viewId(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
d_field_get_view_request_viewId(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_get_view_request(RestF,
                                        0,
                                        0,
                                        NewFValue,
                                        TrUserData).

skip_varint_get_view_request(<<1:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_view_request(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData);
skip_varint_get_view_request(<<0:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_view_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_length_delimited_get_view_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_view_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
skip_length_delimited_get_view_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_view_request(Rest2,
                                        0,
                                        0,
                                        F@_1,
                                        TrUserData).

skip_group_get_view_request(Bin, FNum, Z2, F@_1,
                            TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_view_request(Rest,
                                        0,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_32_get_view_request(<<_:32, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    dfp_read_field_def_get_view_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_64_get_view_request(<<_:64, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    dfp_read_field_def_get_view_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

decode_msg_delete_view_request(Bin, TrUserData) ->
    dfp_read_field_def_delete_view_request(Bin,
                                           0,
                                           0,
                                           id(<<>>, TrUserData),
                                           id(false, TrUserData),
                                           TrUserData).

dfp_read_field_def_delete_view_request(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_delete_view_request_viewId(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
dfp_read_field_def_delete_view_request(<<16,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_delete_view_request_ignoreNonExist(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
dfp_read_field_def_delete_view_request(<<>>, 0, 0, F@_1,
                                       F@_2, _) ->
    #{viewId => F@_1, ignoreNonExist => F@_2};
dfp_read_field_def_delete_view_request(Other, Z1, Z2,
                                       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_delete_view_request(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

dg_read_field_def_delete_view_request(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_view_request(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dg_read_field_def_delete_view_request(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_delete_view_request_viewId(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
        16 ->
            d_field_delete_view_request_ignoreNonExist(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_delete_view_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                1 ->
                    skip_64_delete_view_request(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                2 ->
                    skip_length_delimited_delete_view_request(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
                3 ->
                    skip_group_delete_view_request(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                5 ->
                    skip_32_delete_view_request(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData)
            end
    end;
dg_read_field_def_delete_view_request(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    #{viewId => F@_1, ignoreNonExist => F@_2}.

d_field_delete_view_request_viewId(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_delete_view_request_viewId(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
d_field_delete_view_request_viewId(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_delete_view_request(RestF,
                                           0,
                                           0,
                                           NewFValue,
                                           F@_2,
                                           TrUserData).

d_field_delete_view_request_ignoreNonExist(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_delete_view_request_ignoreNonExist(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
d_field_delete_view_request_ignoreNonExist(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_delete_view_request(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           NewFValue,
                                           TrUserData).

skip_varint_delete_view_request(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_delete_view_request(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
skip_varint_delete_view_request(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_view_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_length_delimited_delete_view_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_view_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
skip_length_delimited_delete_view_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_view_request(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_group_delete_view_request(Bin, FNum, Z2, F@_1,
                               F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_view_request(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_32_delete_view_request(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_view_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_64_delete_view_request(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_delete_view_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

decode_msg_list_views_request(Bin, TrUserData) ->
    dfp_read_field_def_list_views_request(Bin,
                                          0,
                                          0,
                                          TrUserData).

dfp_read_field_def_list_views_request(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_list_views_request(Other, Z1, Z2,
                                      TrUserData) ->
    dg_read_field_def_list_views_request(Other,
                                         Z1,
                                         Z2,
                                         TrUserData).

dg_read_field_def_list_views_request(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_views_request(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         TrUserData);
dg_read_field_def_list_views_request(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_views_request(Rest, 0, 0, TrUserData);
        1 -> skip_64_list_views_request(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_list_views_request(Rest,
                                                     0,
                                                     0,
                                                     TrUserData);
        3 ->
            skip_group_list_views_request(Rest,
                                          Key bsr 3,
                                          0,
                                          TrUserData);
        5 -> skip_32_list_views_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_list_views_request(<<>>, 0, 0, _) ->
    #{}.

skip_varint_list_views_request(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, TrUserData) ->
    skip_varint_list_views_request(Rest,
                                   Z1,
                                   Z2,
                                   TrUserData);
skip_varint_list_views_request(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_views_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

skip_length_delimited_list_views_request(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_views_request(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             TrUserData);
skip_length_delimited_list_views_request(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_views_request(Rest2,
                                          0,
                                          0,
                                          TrUserData).

skip_group_list_views_request(Bin, FNum, Z2,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_views_request(Rest,
                                          0,
                                          Z2,
                                          TrUserData).

skip_32_list_views_request(<<_:32, Rest/binary>>, Z1,
                           Z2, TrUserData) ->
    dfp_read_field_def_list_views_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

skip_64_list_views_request(<<_:64, Rest/binary>>, Z1,
                           Z2, TrUserData) ->
    dfp_read_field_def_list_views_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

decode_msg_list_views_response(Bin, TrUserData) ->
    dfp_read_field_def_list_views_response(Bin,
                                           0,
                                           0,
                                           id([], TrUserData),
                                           TrUserData).

dfp_read_field_def_list_views_response(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_list_views_response_views(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
dfp_read_field_def_list_views_response(<<>>, 0, 0, R1,
                                       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{views => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_views_response(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_list_views_response(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_list_views_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_views_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_list_views_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_views_response_views(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_views_response(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_list_views_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_list_views_response(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_list_views_response(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_list_views_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_list_views_response(<<>>, 0, 0, R1,
                                      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{views => lists_reverse(R1, TrUserData)}
    end.

d_field_list_views_response_views(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_views_response_views(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
d_field_list_views_response_views(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_view(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_views_response(RestF,
                                           0,
                                           0,
                                           cons(NewFValue, Prev, TrUserData),
                                           TrUserData).

skip_varint_list_views_response(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_views_response(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_list_views_response(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_views_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_list_views_response(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_views_response(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_list_views_response(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_views_response(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_list_views_response(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_views_response(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_list_views_response(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_views_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_list_views_response(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_views_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_view(Bin, TrUserData) ->
    dfp_read_field_def_view(Bin,
                            0,
                            0,
                            id(<<>>, TrUserData),
                            id('TASK_CREATING', TrUserData),
                            id(0, TrUserData),
                            id(<<>>, TrUserData),
                            id([], TrUserData),
                            TrUserData).

dfp_read_field_def_view(<<10, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_view_viewId(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
dfp_read_field_def_view(<<16, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_view_status(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
dfp_read_field_def_view(<<24, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_view_createdTime(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
dfp_read_field_def_view(<<34, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_view_sql(Rest,
                     Z1,
                     Z2,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     F@_5,
                     TrUserData);
dfp_read_field_def_view(<<42, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_view_schema(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
dfp_read_field_def_view(<<>>, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, R1, TrUserData) ->
    #{viewId => F@_1, status => F@_2, createdTime => F@_3,
      sql => F@_4, schema => lists_reverse(R1, TrUserData)};
dfp_read_field_def_view(Other, Z1, Z2, F@_1, F@_2, F@_3,
                        F@_4, F@_5, TrUserData) ->
    dg_read_field_def_view(Other,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData).

dg_read_field_def_view(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_view(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
dg_read_field_def_view(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_view_viewId(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
        16 ->
            d_field_view_status(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
        24 ->
            d_field_view_createdTime(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
        34 ->
            d_field_view_sql(Rest,
                             0,
                             0,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
        42 ->
            d_field_view_schema(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_view(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
                1 ->
                    skip_64_view(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
                2 ->
                    skip_length_delimited_view(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
                3 ->
                    skip_group_view(Rest,
                                    Key bsr 3,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData);
                5 ->
                    skip_32_view(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData)
            end
    end;
dg_read_field_def_view(<<>>, 0, 0, F@_1, F@_2, F@_3,
                       F@_4, R1, TrUserData) ->
    #{viewId => F@_1, status => F@_2, createdTime => F@_3,
      sql => F@_4, schema => lists_reverse(R1, TrUserData)}.

d_field_view_viewId(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_view_viewId(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
d_field_view_viewId(<<0:1, X:7, Rest/binary>>, N, Acc,
                    _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_view(RestF,
                            0,
                            0,
                            NewFValue,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

d_field_view_status(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_view_status(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
d_field_view_status(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_hstream.server.TaskStatusPB'(begin
                                                     <<Res:32/signed-native>> =
                                                         <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                                                     id(Res, TrUserData)
                                                 end),
            TrUserData),
         Rest},
    dfp_read_field_def_view(RestF,
                            0,
                            0,
                            F@_1,
                            NewFValue,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

d_field_view_createdTime(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_view_createdTime(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
d_field_view_createdTime(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                                                Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_view(RestF,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            NewFValue,
                            F@_4,
                            F@_5,
                            TrUserData).

d_field_view_sql(<<1:1, X:7, Rest/binary>>, N, Acc,
                 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_view_sql(Rest,
                     N + 7,
                     X bsl N + Acc,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     F@_5,
                     TrUserData);
d_field_view_sql(<<0:1, X:7, Rest/binary>>, N, Acc,
                 F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_view(RestF,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            NewFValue,
                            F@_5,
                            TrUserData).

d_field_view_schema(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_view_schema(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
d_field_view_schema(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_view(RestF,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            cons(NewFValue, Prev, TrUserData),
                            TrUserData).

skip_varint_view(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_view(Rest,
                     Z1,
                     Z2,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     F@_5,
                     TrUserData);
skip_varint_view(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_view(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

skip_length_delimited_view(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_view(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
skip_length_delimited_view(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_view(Rest2,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

skip_group_view(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_view(Rest,
                            0,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

skip_32_view(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
             F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_view(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

skip_64_view(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
             F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_view(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            TrUserData).

decode_msg_get_node_request(Bin, TrUserData) ->
    dfp_read_field_def_get_node_request(Bin,
                                        0,
                                        0,
                                        id(0, TrUserData),
                                        TrUserData).

dfp_read_field_def_get_node_request(<<8, Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    d_field_get_node_request_id(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
dfp_read_field_def_get_node_request(<<>>, 0, 0, F@_1,
                                    _) ->
    #{id => F@_1};
dfp_read_field_def_get_node_request(Other, Z1, Z2, F@_1,
                                    TrUserData) ->
    dg_read_field_def_get_node_request(Other,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

dg_read_field_def_get_node_request(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_node_request(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
dg_read_field_def_get_node_request(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_get_node_request_id(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_get_node_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                1 ->
                    skip_64_get_node_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_get_node_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                3 ->
                    skip_group_get_node_request(Rest,
                                                Key bsr 3,
                                                0,
                                                F@_1,
                                                TrUserData);
                5 ->
                    skip_32_get_node_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_node_request(<<>>, 0, 0, F@_1,
                                   _) ->
    #{id => F@_1}.

d_field_get_node_request_id(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_node_request_id(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
d_field_get_node_request_id(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_get_node_request(RestF,
                                        0,
                                        0,
                                        NewFValue,
                                        TrUserData).

skip_varint_get_node_request(<<1:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_node_request(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData);
skip_varint_get_node_request(<<0:1, _:7, Rest/binary>>,
                             Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_node_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_length_delimited_get_node_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_node_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
skip_length_delimited_get_node_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_node_request(Rest2,
                                        0,
                                        0,
                                        F@_1,
                                        TrUserData).

skip_group_get_node_request(Bin, FNum, Z2, F@_1,
                            TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_node_request(Rest,
                                        0,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_32_get_node_request(<<_:32, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    dfp_read_field_def_get_node_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

skip_64_get_node_request(<<_:64, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    dfp_read_field_def_get_node_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

decode_msg_list_nodes_request(Bin, TrUserData) ->
    dfp_read_field_def_list_nodes_request(Bin,
                                          0,
                                          0,
                                          TrUserData).

dfp_read_field_def_list_nodes_request(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_list_nodes_request(Other, Z1, Z2,
                                      TrUserData) ->
    dg_read_field_def_list_nodes_request(Other,
                                         Z1,
                                         Z2,
                                         TrUserData).

dg_read_field_def_list_nodes_request(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_nodes_request(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         TrUserData);
dg_read_field_def_list_nodes_request(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_list_nodes_request(Rest, 0, 0, TrUserData);
        1 -> skip_64_list_nodes_request(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_list_nodes_request(Rest,
                                                     0,
                                                     0,
                                                     TrUserData);
        3 ->
            skip_group_list_nodes_request(Rest,
                                          Key bsr 3,
                                          0,
                                          TrUserData);
        5 -> skip_32_list_nodes_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_list_nodes_request(<<>>, 0, 0, _) ->
    #{}.

skip_varint_list_nodes_request(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, TrUserData) ->
    skip_varint_list_nodes_request(Rest,
                                   Z1,
                                   Z2,
                                   TrUserData);
skip_varint_list_nodes_request(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, TrUserData) ->
    dfp_read_field_def_list_nodes_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

skip_length_delimited_list_nodes_request(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_nodes_request(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             TrUserData);
skip_length_delimited_list_nodes_request(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_nodes_request(Rest2,
                                          0,
                                          0,
                                          TrUserData).

skip_group_list_nodes_request(Bin, FNum, Z2,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_nodes_request(Rest,
                                          0,
                                          Z2,
                                          TrUserData).

skip_32_list_nodes_request(<<_:32, Rest/binary>>, Z1,
                           Z2, TrUserData) ->
    dfp_read_field_def_list_nodes_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

skip_64_list_nodes_request(<<_:64, Rest/binary>>, Z1,
                           Z2, TrUserData) ->
    dfp_read_field_def_list_nodes_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData).

decode_msg_list_nodes_response(Bin, TrUserData) ->
    dfp_read_field_def_list_nodes_response(Bin,
                                           0,
                                           0,
                                           id([], TrUserData),
                                           TrUserData).

dfp_read_field_def_list_nodes_response(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_list_nodes_response_nodes(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
dfp_read_field_def_list_nodes_response(<<>>, 0, 0, R1,
                                       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{nodes => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_nodes_response(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_list_nodes_response(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_list_nodes_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_nodes_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_list_nodes_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_nodes_response_nodes(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_nodes_response(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_list_nodes_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_list_nodes_response(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_list_nodes_response(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_list_nodes_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_list_nodes_response(<<>>, 0, 0, R1,
                                      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{nodes => lists_reverse(R1, TrUserData)}
    end.

d_field_list_nodes_response_nodes(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_nodes_response_nodes(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
d_field_list_nodes_response_nodes(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_node(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_nodes_response(RestF,
                                           0,
                                           0,
                                           cons(NewFValue, Prev, TrUserData),
                                           TrUserData).

skip_varint_list_nodes_response(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_list_nodes_response(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_list_nodes_response(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_nodes_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_list_nodes_response(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_nodes_response(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_list_nodes_response(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_nodes_response(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_list_nodes_response(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_nodes_response(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_list_nodes_response(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_nodes_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_list_nodes_response(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_nodes_response(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_node(Bin, TrUserData) ->
    dfp_read_field_def_node(Bin,
                            0,
                            0,
                            id(0, TrUserData),
                            id([], TrUserData),
                            id(<<>>, TrUserData),
                            id(<<>>, TrUserData),
                            TrUserData).

dfp_read_field_def_node(<<8, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_id(Rest,
                    Z1,
                    Z2,
                    F@_1,
                    F@_2,
                    F@_3,
                    F@_4,
                    TrUserData);
dfp_read_field_def_node(<<18, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_pfield_node_roles(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData);
dfp_read_field_def_node(<<16, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_roles(Rest,
                       Z1,
                       Z2,
                       F@_1,
                       F@_2,
                       F@_3,
                       F@_4,
                       TrUserData);
dfp_read_field_def_node(<<26, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_address(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         TrUserData);
dfp_read_field_def_node(<<34, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_status(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData);
dfp_read_field_def_node(<<>>, 0, 0, F@_1, R1, F@_3,
                        F@_4, TrUserData) ->
    #{id => F@_1, roles => lists_reverse(R1, TrUserData),
      address => F@_3, status => F@_4};
dfp_read_field_def_node(Other, Z1, Z2, F@_1, F@_2, F@_3,
                        F@_4, TrUserData) ->
    dg_read_field_def_node(Other,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           TrUserData).

dg_read_field_def_node(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_node(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           TrUserData);
dg_read_field_def_node(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_node_id(Rest,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData);
        18 ->
            d_pfield_node_roles(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
        16 ->
            d_field_node_roles(Rest,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               TrUserData);
        26 ->
            d_field_node_address(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
        34 ->
            d_field_node_status(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_node(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData);
                1 ->
                    skip_64_node(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
                2 ->
                    skip_length_delimited_node(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               TrUserData);
                3 ->
                    skip_group_node(Rest,
                                    Key bsr 3,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    TrUserData);
                5 ->
                    skip_32_node(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData)
            end
    end;
dg_read_field_def_node(<<>>, 0, 0, F@_1, R1, F@_3, F@_4,
                       TrUserData) ->
    #{id => F@_1, roles => lists_reverse(R1, TrUserData),
      address => F@_3, status => F@_4}.

d_field_node_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
                F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_id(Rest,
                    N + 7,
                    X bsl N + Acc,
                    F@_1,
                    F@_2,
                    F@_3,
                    F@_4,
                    TrUserData);
d_field_node_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
                F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_node(RestF,
                            0,
                            0,
                            NewFValue,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

d_field_node_roles(<<1:1, X:7, Rest/binary>>, N, Acc,
                   F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_roles(Rest,
                       N + 7,
                       X bsl N + Acc,
                       F@_1,
                       F@_2,
                       F@_3,
                       F@_4,
                       TrUserData);
d_field_node_roles(<<0:1, X:7, Rest/binary>>, N, Acc,
                   F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_node(RestF,
                            0,
                            0,
                            F@_1,
                            cons(NewFValue, Prev, TrUserData),
                            F@_3,
                            F@_4,
                            TrUserData).

d_pfield_node_roles(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_pfield_node_roles(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData);
d_pfield_node_roles(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, E, F@_3, F@_4, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_node_roles(PackedBytes,
                                       0,
                                       0,
                                       E,
                                       TrUserData),
    dfp_read_field_def_node(Rest2,
                            0,
                            0,
                            F@_1,
                            NewSeq,
                            F@_3,
                            F@_4,
                            TrUserData).

d_packed_field_node_roles(<<1:1, X:7, Rest/binary>>, N,
                          Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_node_roles(Rest,
                              N + 7,
                              X bsl N + Acc,
                              AccSeq,
                              TrUserData);
d_packed_field_node_roles(<<0:1, X:7, Rest/binary>>, N,
                          Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    d_packed_field_node_roles(RestF,
                              0,
                              0,
                              [NewFValue | AccSeq],
                              TrUserData);
d_packed_field_node_roles(<<>>, 0, 0, AccSeq, _) ->
    AccSeq.

d_field_node_address(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_address(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         TrUserData);
d_field_node_address(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_node(RestF,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            NewFValue,
                            F@_4,
                            TrUserData).

d_field_node_status(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_status(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData);
d_field_node_status(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_node(RestF,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            NewFValue,
                            TrUserData).

skip_varint_node(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_node(Rest,
                     Z1,
                     Z2,
                     F@_1,
                     F@_2,
                     F@_3,
                     F@_4,
                     TrUserData);
skip_varint_node(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

skip_length_delimited_node(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_node(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               TrUserData);
skip_length_delimited_node(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_node(Rest2,
                            0,
                            0,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

skip_group_node(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_node(Rest,
                            0,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

skip_32_node(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
             F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

skip_64_node(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
             F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData).

decode_msg_stats_interval_vals(Bin, TrUserData) ->
    dfp_read_field_def_stats_interval_vals(Bin,
                                           0,
                                           0,
                                           id([], TrUserData),
                                           TrUserData).

dfp_read_field_def_stats_interval_vals(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_pfield_stats_interval_vals_intervals(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
dfp_read_field_def_stats_interval_vals(<<8,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    d_field_stats_interval_vals_intervals(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_stats_interval_vals(<<>>, 0, 0, R1,
                                       TrUserData) ->
    #{intervals => lists_reverse(R1, TrUserData)};
dfp_read_field_def_stats_interval_vals(Other, Z1, Z2,
                                       F@_1, TrUserData) ->
    dg_read_field_def_stats_interval_vals(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData).

dg_read_field_def_stats_interval_vals(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stats_interval_vals(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
dg_read_field_def_stats_interval_vals(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_pfield_stats_interval_vals_intervals(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        8 ->
            d_field_stats_interval_vals_intervals(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_stats_interval_vals(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                1 ->
                    skip_64_stats_interval_vals(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                2 ->
                    skip_length_delimited_stats_interval_vals(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                3 ->
                    skip_group_stats_interval_vals(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                5 ->
                    skip_32_stats_interval_vals(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData)
            end
    end;
dg_read_field_def_stats_interval_vals(<<>>, 0, 0, R1,
                                      TrUserData) ->
    #{intervals => lists_reverse(R1, TrUserData)}.

d_field_stats_interval_vals_intervals(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_stats_interval_vals_intervals(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_stats_interval_vals_intervals(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_stats_interval_vals(RestF,
                                           0,
                                           0,
                                           cons(NewFValue, Prev, TrUserData),
                                           TrUserData).

d_pfield_stats_interval_vals_intervals(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_stats_interval_vals_intervals(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
d_pfield_stats_interval_vals_intervals(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
        d_packed_field_stats_interval_vals_intervals(PackedBytes,
                                                     0,
                                                     0,
                                                     E,
                                                     TrUserData),
    dfp_read_field_def_stats_interval_vals(Rest2,
                                           0,
                                           0,
                                           NewSeq,
                                           TrUserData).

d_packed_field_stats_interval_vals_intervals(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_stats_interval_vals_intervals(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 AccSeq,
                                                 TrUserData);
d_packed_field_stats_interval_vals_intervals(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    d_packed_field_stats_interval_vals_intervals(RestF,
                                                 0,
                                                 0,
                                                 [NewFValue | AccSeq],
                                                 TrUserData);
d_packed_field_stats_interval_vals_intervals(<<>>, 0, 0,
                                             AccSeq, _) ->
    AccSeq.

skip_varint_stats_interval_vals(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_stats_interval_vals(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
skip_varint_stats_interval_vals(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_stats_interval_vals(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_length_delimited_stats_interval_vals(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_stats_interval_vals(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
skip_length_delimited_stats_interval_vals(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stats_interval_vals(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData).

skip_group_stats_interval_vals(Bin, FNum, Z2, F@_1,
                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stats_interval_vals(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_32_stats_interval_vals(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_stats_interval_vals(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

skip_64_stats_interval_vals(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, TrUserData) ->
    dfp_read_field_def_stats_interval_vals(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

decode_msg_stats_double_vals(Bin, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Bin,
                                         0,
                                         0,
                                         id([], TrUserData),
                                         TrUserData).

dfp_read_field_def_stats_double_vals(<<10,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    d_pfield_stats_double_vals_vals(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData);
dfp_read_field_def_stats_double_vals(<<9, Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    d_field_stats_double_vals_vals(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData);
dfp_read_field_def_stats_double_vals(<<>>, 0, 0, R1,
                                     TrUserData) ->
    #{vals => lists_reverse(R1, TrUserData)};
dfp_read_field_def_stats_double_vals(Other, Z1, Z2,
                                     F@_1, TrUserData) ->
    dg_read_field_def_stats_double_vals(Other,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData).

dg_read_field_def_stats_double_vals(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stats_double_vals(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
dg_read_field_def_stats_double_vals(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_pfield_stats_double_vals_vals(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData);
        9 ->
            d_field_stats_double_vals_vals(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_stats_double_vals(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                1 ->
                    skip_64_stats_double_vals(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_stats_double_vals(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                3 ->
                    skip_group_stats_double_vals(Rest,
                                                 Key bsr 3,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                5 ->
                    skip_32_stats_double_vals(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_stats_double_vals(<<>>, 0, 0, R1,
                                    TrUserData) ->
    #{vals => lists_reverse(R1, TrUserData)}.

d_field_stats_double_vals_vals(<<0:48, 240, 127,
                                 Rest/binary>>,
                               Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         cons(id(infinity, TrUserData),
                                              Prev,
                                              TrUserData),
                                         TrUserData);
d_field_stats_double_vals_vals(<<0:48, 240, 255,
                                 Rest/binary>>,
                               Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         cons(id('-infinity', TrUserData),
                                              Prev,
                                              TrUserData),
                                         TrUserData);
d_field_stats_double_vals_vals(<<_:48, 15:4, _:4, _:1,
                                 127:7, Rest/binary>>,
                               Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         cons(id(nan, TrUserData),
                                              Prev,
                                              TrUserData),
                                         TrUserData);
d_field_stats_double_vals_vals(<<Value:64/little-float,
                                 Rest/binary>>,
                               Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         cons(id(Value, TrUserData),
                                              Prev,
                                              TrUserData),
                                         TrUserData).

d_pfield_stats_double_vals_vals(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_stats_double_vals_vals(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
d_pfield_stats_double_vals_vals(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
        d_packed_field_stats_double_vals_vals(PackedBytes,
                                              0,
                                              0,
                                              E,
                                              TrUserData),
    dfp_read_field_def_stats_double_vals(Rest2,
                                         0,
                                         0,
                                         NewSeq,
                                         TrUserData).

d_packed_field_stats_double_vals_vals(<<0:48, 240, 127,
                                        Rest/binary>>,
                                      Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_stats_double_vals_vals(Rest,
                                          Z1,
                                          Z2,
                                          cons(id(infinity, TrUserData),
                                               AccSeq,
                                               TrUserData),
                                          TrUserData);
d_packed_field_stats_double_vals_vals(<<0:48, 240, 255,
                                        Rest/binary>>,
                                      Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_stats_double_vals_vals(Rest,
                                          Z1,
                                          Z2,
                                          cons(id('-infinity', TrUserData),
                                               AccSeq,
                                               TrUserData),
                                          TrUserData);
d_packed_field_stats_double_vals_vals(<<_:48, 15:4, _:4,
                                        _:1, 127:7, Rest/binary>>,
                                      Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_stats_double_vals_vals(Rest,
                                          Z1,
                                          Z2,
                                          cons(id(nan, TrUserData),
                                               AccSeq,
                                               TrUserData),
                                          TrUserData);
d_packed_field_stats_double_vals_vals(<<Value:64/little-float,
                                        Rest/binary>>,
                                      Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_stats_double_vals_vals(Rest,
                                          Z1,
                                          Z2,
                                          cons(id(Value, TrUserData),
                                               AccSeq,
                                               TrUserData),
                                          TrUserData);
d_packed_field_stats_double_vals_vals(<<>>, _, _,
                                      AccSeq, _) ->
    AccSeq.

skip_varint_stats_double_vals(<<1:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, TrUserData) ->
    skip_varint_stats_double_vals(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData);
skip_varint_stats_double_vals(<<0:1, _:7, Rest/binary>>,
                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_length_delimited_stats_double_vals(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_stats_double_vals(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
skip_length_delimited_stats_double_vals(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stats_double_vals(Rest2,
                                         0,
                                         0,
                                         F@_1,
                                         TrUserData).

skip_group_stats_double_vals(Bin, FNum, Z2, F@_1,
                             TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stats_double_vals(Rest,
                                         0,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_32_stats_double_vals(<<_:32, Rest/binary>>, Z1, Z2,
                          F@_1, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

skip_64_stats_double_vals(<<_:64, Rest/binary>>, Z1, Z2,
                          F@_1, TrUserData) ->
    dfp_read_field_def_stats_double_vals(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData).

decode_msg_admin_command_request(Bin, TrUserData) ->
    dfp_read_field_def_admin_command_request(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             TrUserData).

dfp_read_field_def_admin_command_request(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    d_field_admin_command_request_command(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_admin_command_request(<<>>, 0, 0,
                                         F@_1, _) ->
    #{command => F@_1};
dfp_read_field_def_admin_command_request(Other, Z1, Z2,
                                         F@_1, TrUserData) ->
    dg_read_field_def_admin_command_request(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

dg_read_field_def_admin_command_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_admin_command_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
dg_read_field_def_admin_command_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_admin_command_request_command(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_admin_command_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                1 ->
                    skip_64_admin_command_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_admin_command_request(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                3 ->
                    skip_group_admin_command_request(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                5 ->
                    skip_32_admin_command_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData)
            end
    end;
dg_read_field_def_admin_command_request(<<>>, 0, 0,
                                        F@_1, _) ->
    #{command => F@_1}.

d_field_admin_command_request_command(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_admin_command_request_command(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_admin_command_request_command(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_admin_command_request(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             TrUserData).

skip_varint_admin_command_request(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_admin_command_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData);
skip_varint_admin_command_request(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_length_delimited_admin_command_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_admin_command_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
skip_length_delimited_admin_command_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_admin_command_request(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             TrUserData).

skip_group_admin_command_request(Bin, FNum, Z2, F@_1,
                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_admin_command_request(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_32_admin_command_request(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

skip_64_admin_command_request(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

decode_msg_admin_command_response(Bin, TrUserData) ->
    dfp_read_field_def_admin_command_response(Bin,
                                              0,
                                              0,
                                              id(<<>>, TrUserData),
                                              TrUserData).

dfp_read_field_def_admin_command_response(<<10,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    d_field_admin_command_response_result(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_admin_command_response(<<>>, 0, 0,
                                          F@_1, _) ->
    #{result => F@_1};
dfp_read_field_def_admin_command_response(Other, Z1, Z2,
                                          F@_1, TrUserData) ->
    dg_read_field_def_admin_command_response(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

dg_read_field_def_admin_command_response(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_admin_command_response(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
dg_read_field_def_admin_command_response(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_admin_command_response_result(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_admin_command_response(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                1 ->
                    skip_64_admin_command_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_admin_command_response(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                3 ->
                    skip_group_admin_command_response(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                5 ->
                    skip_32_admin_command_response(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData)
            end
    end;
dg_read_field_def_admin_command_response(<<>>, 0, 0,
                                         F@_1, _) ->
    #{result => F@_1}.

d_field_admin_command_response_result(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_admin_command_response_result(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_admin_command_response_result(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_admin_command_response(RestF,
                                              0,
                                              0,
                                              NewFValue,
                                              TrUserData).

skip_varint_admin_command_response(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_admin_command_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
skip_varint_admin_command_response(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_length_delimited_admin_command_response(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_admin_command_response(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
skip_length_delimited_admin_command_response(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_admin_command_response(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData).

skip_group_admin_command_response(Bin, FNum, Z2, F@_1,
                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_admin_command_response(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_32_admin_command_response(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_64_admin_command_response(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_admin_command_response(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

decode_msg_per_stream_time_series_stats_request(Bin,
                                                TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_request(Bin,
                                                            0,
                                                            0,
                                                            id(<<>>,
                                                               TrUserData),
                                                            id(<<>>,
                                                               TrUserData),
                                                            id('$undef',
                                                               TrUserData),
                                                            TrUserData).

dfp_read_field_def_per_stream_time_series_stats_request(<<10,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_per_stream_time_series_stats_request_method(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dfp_read_field_def_per_stream_time_series_stats_request(<<18,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_per_stream_time_series_stats_request_streamName(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
dfp_read_field_def_per_stream_time_series_stats_request(<<26,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_per_stream_time_series_stats_request_intervals(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
dfp_read_field_def_per_stream_time_series_stats_request(<<>>,
                                                        0, 0, F@_1, F@_2, F@_3,
                                                        _) ->
    S1 = #{method => F@_1, streamName => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{intervals => F@_3}
    end;
dfp_read_field_def_per_stream_time_series_stats_request(Other,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    dg_read_field_def_per_stream_time_series_stats_request(Other,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData).

dg_read_field_def_per_stream_time_series_stats_request(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_per_stream_time_series_stats_request(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
dg_read_field_def_per_stream_time_series_stats_request(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_per_stream_time_series_stats_request_method(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
        18 ->
            d_field_per_stream_time_series_stats_request_streamName(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
        26 ->
            d_field_per_stream_time_series_stats_request_intervals(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_per_stream_time_series_stats_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
                1 ->
                    skip_64_per_stream_time_series_stats_request(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                2 ->
                    skip_length_delimited_per_stream_time_series_stats_request(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
                3 ->
                    skip_group_per_stream_time_series_stats_request(Rest,
                                                                    Key bsr 3,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
                5 ->
                    skip_32_per_stream_time_series_stats_request(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData)
            end
    end;
dg_read_field_def_per_stream_time_series_stats_request(<<>>,
                                                       0, 0, F@_1, F@_2, F@_3,
                                                       _) ->
    S1 = #{method => F@_1, streamName => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{intervals => F@_3}
    end.

d_field_per_stream_time_series_stats_request_method(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_request_method(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
d_field_per_stream_time_series_stats_request_method(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2, F@_3,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_request(RestF,
                                                            0,
                                                            0,
                                                            NewFValue,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

d_field_per_stream_time_series_stats_request_streamName(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_request_streamName(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
d_field_per_stream_time_series_stats_request_streamName(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, _, F@_3,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_request(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            NewFValue,
                                                            F@_3,
                                                            TrUserData).

d_field_per_stream_time_series_stats_request_intervals(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_request_intervals(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
d_field_per_stream_time_series_stats_request_intervals(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, Prev,
                                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_stats_interval_vals(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_request(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            if Prev ==
                                                                   '$undef' ->
                                                                   NewFValue;
                                                               true ->
                                                                   merge_msg_stats_interval_vals(Prev,
                                                                                                 NewFValue,
                                                                                                 TrUserData)
                                                            end,
                                                            TrUserData).

skip_varint_per_stream_time_series_stats_request(<<1:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    skip_varint_per_stream_time_series_stats_request(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
skip_varint_per_stream_time_series_stats_request(<<0:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_request(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_length_delimited_per_stream_time_series_stats_request(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_per_stream_time_series_stats_request(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
skip_length_delimited_per_stream_time_series_stats_request(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_per_stream_time_series_stats_request(Rest2,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_group_per_stream_time_series_stats_request(Bin,
                                                FNum, Z2, F@_1, F@_2, F@_3,
                                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_per_stream_time_series_stats_request(Rest,
                                                            0,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_32_per_stream_time_series_stats_request(<<_:32,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_request(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_64_per_stream_time_series_stats_request(<<_:64,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_request(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

decode_msg_per_stream_time_series_stats_response(Bin,
                                                 TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_response(Bin,
                                                             0,
                                                             0,
                                                             id('$undef',
                                                                TrUserData),
                                                             TrUserData).

dfp_read_field_def_per_stream_time_series_stats_response(<<10,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1,
                                                         TrUserData) ->
    d_field_per_stream_time_series_stats_response_stats(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData);
dfp_read_field_def_per_stream_time_series_stats_response(<<>>,
                                                         0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{stats => F@_1}
    end;
dfp_read_field_def_per_stream_time_series_stats_response(Other,
                                                         Z1, Z2, F@_1,
                                                         TrUserData) ->
    dg_read_field_def_per_stream_time_series_stats_response(Other,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData).

dg_read_field_def_per_stream_time_series_stats_response(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_per_stream_time_series_stats_response(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
dg_read_field_def_per_stream_time_series_stats_response(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_per_stream_time_series_stats_response_stats(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_per_stream_time_series_stats_response(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                1 ->
                    skip_64_per_stream_time_series_stats_response(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                2 ->
                    skip_length_delimited_per_stream_time_series_stats_response(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                TrUserData);
                3 ->
                    skip_group_per_stream_time_series_stats_response(Rest,
                                                                     Key bsr 3,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
                5 ->
                    skip_32_per_stream_time_series_stats_response(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData)
            end
    end;
dg_read_field_def_per_stream_time_series_stats_response(<<>>,
                                                        0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{stats => F@_1}
    end.

d_field_per_stream_time_series_stats_response_stats(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_response_stats(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        TrUserData);
d_field_per_stream_time_series_stats_response_stats(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_stats_double_vals(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_response(RestF,
                                                             0,
                                                             0,
                                                             if Prev ==
                                                                    '$undef' ->
                                                                    NewFValue;
                                                                true ->
                                                                    merge_msg_stats_double_vals(Prev,
                                                                                                NewFValue,
                                                                                                TrUserData)
                                                             end,
                                                             TrUserData).

skip_varint_per_stream_time_series_stats_response(<<1:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_per_stream_time_series_stats_response(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData);
skip_varint_per_stream_time_series_stats_response(<<0:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_response(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_length_delimited_per_stream_time_series_stats_response(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData)
    when N < 57 ->
    skip_length_delimited_per_stream_time_series_stats_response(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                TrUserData);
skip_length_delimited_per_stream_time_series_stats_response(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_per_stream_time_series_stats_response(Rest2,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData).

skip_group_per_stream_time_series_stats_response(Bin,
                                                 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_per_stream_time_series_stats_response(Rest,
                                                             0,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_32_per_stream_time_series_stats_response(<<_:32,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_response(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_64_per_stream_time_series_stats_response(<<_:64,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_response(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

decode_msg_per_stream_time_series_stats_all_response(Bin,
                                                     TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_response(Bin,
                                                                 0,
                                                                 0,
                                                                 'tr_decode_init_default_per_stream_time_series_stats_all_response.stats'([],
                                                                                                                                          TrUserData),
                                                                 TrUserData).

dfp_read_field_def_per_stream_time_series_stats_all_response(<<10,
                                                               Rest/binary>>,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    d_field_per_stream_time_series_stats_all_response_stats(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData);
dfp_read_field_def_per_stream_time_series_stats_all_response(<<>>,
                                                             0, 0, R1,
                                                             TrUserData) ->
    #{stats =>
          'tr_decode_repeated_finalize_per_stream_time_series_stats_all_response.stats'(R1,
                                                                                        TrUserData)};
dfp_read_field_def_per_stream_time_series_stats_all_response(Other,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    dg_read_field_def_per_stream_time_series_stats_all_response(Other,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                TrUserData).

dg_read_field_def_per_stream_time_series_stats_all_response(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_per_stream_time_series_stats_all_response(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                TrUserData);
dg_read_field_def_per_stream_time_series_stats_all_response(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_per_stream_time_series_stats_all_response_stats(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_per_stream_time_series_stats_all_response(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          TrUserData);
                1 ->
                    skip_64_per_stream_time_series_stats_all_response(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                2 ->
                    skip_length_delimited_per_stream_time_series_stats_all_response(Rest,
                                                                                    0,
                                                                                    0,
                                                                                    F@_1,
                                                                                    TrUserData);
                3 ->
                    skip_group_per_stream_time_series_stats_all_response(Rest,
                                                                         Key bsr
                                                                             3,
                                                                         0,
                                                                         F@_1,
                                                                         TrUserData);
                5 ->
                    skip_32_per_stream_time_series_stats_all_response(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData)
            end
    end;
dg_read_field_def_per_stream_time_series_stats_all_response(<<>>,
                                                            0, 0, R1,
                                                            TrUserData) ->
    #{stats =>
          'tr_decode_repeated_finalize_per_stream_time_series_stats_all_response.stats'(R1,
                                                                                        TrUserData)}.

d_field_per_stream_time_series_stats_all_response_stats(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_all_response_stats(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
d_field_per_stream_time_series_stats_all_response_stats(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, Prev,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_map<string,stats_double_vals>'(Bs,
                                                                            TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_all_response(RestF,
                                                                 0,
                                                                 0,
                                                                 'tr_decode_repeated_add_elem_per_stream_time_series_stats_all_response.stats'(NewFValue,
                                                                                                                                               Prev,
                                                                                                                                               TrUserData),
                                                                 TrUserData).

skip_varint_per_stream_time_series_stats_all_response(<<1:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    skip_varint_per_stream_time_series_stats_all_response(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
skip_varint_per_stream_time_series_stats_all_response(<<0:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_response(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_length_delimited_per_stream_time_series_stats_all_response(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData)
    when N < 57 ->
    skip_length_delimited_per_stream_time_series_stats_all_response(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    TrUserData);
skip_length_delimited_per_stream_time_series_stats_all_response(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_per_stream_time_series_stats_all_response(Rest2,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData).

skip_group_per_stream_time_series_stats_all_response(Bin,
                                                     FNum, Z2, F@_1,
                                                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_per_stream_time_series_stats_all_response(Rest,
                                                                 0,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_32_per_stream_time_series_stats_all_response(<<_:32,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_response(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_64_per_stream_time_series_stats_all_response(<<_:64,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_response(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

decode_msg_per_stream_time_series_stats_all_request(Bin,
                                                    TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_request(Bin,
                                                                0,
                                                                0,
                                                                id(<<>>,
                                                                   TrUserData),
                                                                id('$undef',
                                                                   TrUserData),
                                                                TrUserData).

dfp_read_field_def_per_stream_time_series_stats_all_request(<<10,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    d_field_per_stream_time_series_stats_all_request_method(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
dfp_read_field_def_per_stream_time_series_stats_all_request(<<18,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    d_field_per_stream_time_series_stats_all_request_intervals(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
dfp_read_field_def_per_stream_time_series_stats_all_request(<<>>,
                                                            0, 0, F@_1, F@_2,
                                                            _) ->
    S1 = #{method => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{intervals => F@_2}
    end;
dfp_read_field_def_per_stream_time_series_stats_all_request(Other,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    dg_read_field_def_per_stream_time_series_stats_all_request(Other,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

dg_read_field_def_per_stream_time_series_stats_all_request(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_per_stream_time_series_stats_all_request(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
dg_read_field_def_per_stream_time_series_stats_all_request(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_per_stream_time_series_stats_all_request_method(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
        18 ->
            d_field_per_stream_time_series_stats_all_request_intervals(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_per_stream_time_series_stats_all_request(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         TrUserData);
                1 ->
                    skip_64_per_stream_time_series_stats_all_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData);
                2 ->
                    skip_length_delimited_per_stream_time_series_stats_all_request(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   TrUserData);
                3 ->
                    skip_group_per_stream_time_series_stats_all_request(Rest,
                                                                        Key bsr
                                                                            3,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        TrUserData);
                5 ->
                    skip_32_per_stream_time_series_stats_all_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData)
            end
    end;
dg_read_field_def_per_stream_time_series_stats_all_request(<<>>,
                                                           0, 0, F@_1, F@_2,
                                                           _) ->
    S1 = #{method => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{intervals => F@_2}
    end.

d_field_per_stream_time_series_stats_all_request_method(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_all_request_method(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
d_field_per_stream_time_series_stats_all_request_method(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, _, F@_2,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_all_request(RestF,
                                                                0,
                                                                0,
                                                                NewFValue,
                                                                F@_2,
                                                                TrUserData).

d_field_per_stream_time_series_stats_all_request_intervals(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           TrUserData)
    when N < 57 ->
    d_field_per_stream_time_series_stats_all_request_intervals(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
d_field_per_stream_time_series_stats_all_request_intervals(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, Prev,
                                                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_stats_interval_vals(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_per_stream_time_series_stats_all_request(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                if Prev ==
                                                                       '$undef' ->
                                                                       NewFValue;
                                                                   true ->
                                                                       merge_msg_stats_interval_vals(Prev,
                                                                                                     NewFValue,
                                                                                                     TrUserData)
                                                                end,
                                                                TrUserData).

skip_varint_per_stream_time_series_stats_all_request(<<1:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2,
                                                     TrUserData) ->
    skip_varint_per_stream_time_series_stats_all_request(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
skip_varint_per_stream_time_series_stats_all_request(<<0:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2,
                                                     TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_request(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_length_delimited_per_stream_time_series_stats_all_request(<<1:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_per_stream_time_series_stats_all_request(Rest,
                                                                   N + 7,
                                                                   X bsl N +
                                                                       Acc,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData);
skip_length_delimited_per_stream_time_series_stats_all_request(<<0:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2,
                                                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_per_stream_time_series_stats_all_request(Rest2,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_group_per_stream_time_series_stats_all_request(Bin,
                                                    FNum, Z2, F@_1, F@_2,
                                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_per_stream_time_series_stats_all_request(Rest,
                                                                0,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_32_per_stream_time_series_stats_all_request(<<_:32,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2,
                                                 TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_request(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_64_per_stream_time_series_stats_all_request(<<_:64,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2,
                                                 TrUserData) ->
    dfp_read_field_def_per_stream_time_series_stats_all_request(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

decode_msg_describe_cluster_response(Bin, TrUserData) ->
    dfp_read_field_def_describe_cluster_response(Bin,
                                                 0,
                                                 0,
                                                 id(<<>>, TrUserData),
                                                 id(<<>>, TrUserData),
                                                 id([], TrUserData),
                                                 id([], TrUserData),
                                                 TrUserData).

dfp_read_field_def_describe_cluster_response(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_describe_cluster_response_protocolVersion(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
dfp_read_field_def_describe_cluster_response(<<18,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_describe_cluster_response_serverVersion(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
dfp_read_field_def_describe_cluster_response(<<26,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_describe_cluster_response_serverNodes(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
dfp_read_field_def_describe_cluster_response(<<34,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_describe_cluster_response_serverNodesStatus(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
dfp_read_field_def_describe_cluster_response(<<>>, 0, 0,
                                             F@_1, F@_2, R1, R2, TrUserData) ->
    S1 = #{protocolVersion => F@_1, serverVersion => F@_2},
    S2 = if R1 == '$undef' -> S1;
            true ->
                S1#{serverNodes => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S2;
       true ->
           S2#{serverNodesStatus => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_describe_cluster_response(Other, Z1,
                                             Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    dg_read_field_def_describe_cluster_response(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

dg_read_field_def_describe_cluster_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_describe_cluster_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dg_read_field_def_describe_cluster_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_describe_cluster_response_protocolVersion(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              TrUserData);
        18 ->
            d_field_describe_cluster_response_serverVersion(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
        26 ->
            d_field_describe_cluster_response_serverNodes(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
        34 ->
            d_field_describe_cluster_response_serverNodesStatus(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_describe_cluster_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
                1 ->
                    skip_64_describe_cluster_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_describe_cluster_response(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    TrUserData);
                3 ->
                    skip_group_describe_cluster_response(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
                5 ->
                    skip_32_describe_cluster_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData)
            end
    end;
dg_read_field_def_describe_cluster_response(<<>>, 0, 0,
                                            F@_1, F@_2, R1, R2, TrUserData) ->
    S1 = #{protocolVersion => F@_1, serverVersion => F@_2},
    S2 = if R1 == '$undef' -> S1;
            true ->
                S1#{serverNodes => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S2;
       true ->
           S2#{serverNodesStatus => lists_reverse(R2, TrUserData)}
    end.

d_field_describe_cluster_response_protocolVersion(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, TrUserData)
    when N < 57 ->
    d_field_describe_cluster_response_protocolVersion(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
d_field_describe_cluster_response_protocolVersion(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, _, F@_2, F@_3, F@_4,
                                                  TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_describe_cluster_response(RestF,
                                                 0,
                                                 0,
                                                 NewFValue,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

d_field_describe_cluster_response_serverVersion(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    d_field_describe_cluster_response_serverVersion(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
d_field_describe_cluster_response_serverVersion(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, _, F@_3, F@_4,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_describe_cluster_response(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 NewFValue,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

d_field_describe_cluster_response_serverNodes(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              TrUserData)
    when N < 57 ->
    d_field_describe_cluster_response_serverNodes(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
d_field_describe_cluster_response_serverNodes(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, Prev, F@_4,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_describe_cluster_response(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_4,
                                                 TrUserData).

d_field_describe_cluster_response_serverNodesStatus(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, TrUserData)
    when N < 57 ->
    d_field_describe_cluster_response_serverNodesStatus(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
d_field_describe_cluster_response_serverNodesStatus(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node_status(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_describe_cluster_response(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 TrUserData).

skip_varint_describe_cluster_response(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    skip_varint_describe_cluster_response(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
skip_varint_describe_cluster_response(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    dfp_read_field_def_describe_cluster_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_length_delimited_describe_cluster_response(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    skip_length_delimited_describe_cluster_response(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
skip_length_delimited_describe_cluster_response(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_describe_cluster_response(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_group_describe_cluster_response(Bin, FNum, Z2,
                                     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_describe_cluster_response(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_32_describe_cluster_response(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_describe_cluster_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_64_describe_cluster_response(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_describe_cluster_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

decode_msg_server_node(Bin, TrUserData) ->
    dfp_read_field_def_server_node(Bin,
                                   0,
                                   0,
                                   id(0, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(0, TrUserData),
                                   TrUserData).

dfp_read_field_def_server_node(<<8, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_node_id(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           TrUserData);
dfp_read_field_def_server_node(<<18, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_node_host(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             TrUserData);
dfp_read_field_def_server_node(<<24, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_node_port(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             TrUserData);
dfp_read_field_def_server_node(<<>>, 0, 0, F@_1, F@_2,
                               F@_3, _) ->
    #{id => F@_1, host => F@_2, port => F@_3};
dfp_read_field_def_server_node(Other, Z1, Z2, F@_1,
                               F@_2, F@_3, TrUserData) ->
    dg_read_field_def_server_node(Other,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  TrUserData).

dg_read_field_def_server_node(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_node(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  TrUserData);
dg_read_field_def_server_node(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_server_node_id(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData);
        18 ->
            d_field_server_node_host(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
        24 ->
            d_field_server_node_port(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_server_node(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
                1 ->
                    skip_64_server_node(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
                2 ->
                    skip_length_delimited_server_node(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
                3 ->
                    skip_group_server_node(Rest,
                                           Key bsr 3,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
                5 ->
                    skip_32_server_node(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData)
            end
    end;
dg_read_field_def_server_node(<<>>, 0, 0, F@_1, F@_2,
                              F@_3, _) ->
    #{id => F@_1, host => F@_2, port => F@_3}.

d_field_server_node_id(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_node_id(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           TrUserData);
d_field_server_node_id(<<0:1, X:7, Rest/binary>>, N,
                       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_server_node(RestF,
                                   0,
                                   0,
                                   NewFValue,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

d_field_server_node_host(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_node_host(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             TrUserData);
d_field_server_node_host(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_server_node(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   NewFValue,
                                   F@_3,
                                   TrUserData).

d_field_server_node_port(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_node_port(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             TrUserData);
d_field_server_node_port(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_server_node(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   NewFValue,
                                   TrUserData).

skip_varint_server_node(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_server_node(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            TrUserData);
skip_varint_server_node(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server_node(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

skip_length_delimited_server_node(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_node(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
skip_length_delimited_server_node(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_node(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

skip_group_server_node(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_node(Rest,
                                   0,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

skip_32_server_node(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server_node(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

skip_64_server_node(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server_node(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   TrUserData).

decode_msg_server_node_status(Bin, TrUserData) ->
    dfp_read_field_def_server_node_status(Bin,
                                          0,
                                          0,
                                          id('$undef', TrUserData),
                                          id('Starting', TrUserData),
                                          TrUserData).

dfp_read_field_def_server_node_status(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_server_node_status_node(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dfp_read_field_def_server_node_status(<<16,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_server_node_status_state(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dfp_read_field_def_server_node_status(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    S1 = #{state => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{node => F@_1}
    end;
dfp_read_field_def_server_node_status(Other, Z1, Z2,
                                      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_server_node_status(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

dg_read_field_def_server_node_status(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_node_status(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
dg_read_field_def_server_node_status(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_server_node_status_node(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
        16 ->
            d_field_server_node_status_state(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_server_node_status(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                1 ->
                    skip_64_server_node_status(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                2 ->
                    skip_length_delimited_server_node_status(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                3 ->
                    skip_group_server_node_status(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                5 ->
                    skip_32_server_node_status(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData)
            end
    end;
dg_read_field_def_server_node_status(<<>>, 0, 0, F@_1,
                                     F@_2, _) ->
    S1 = #{state => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{node => F@_1}
    end.

d_field_server_node_status_node(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_server_node_status_node(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
d_field_server_node_status_node(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_server_node_status(RestF,
                                          0,
                                          0,
                                          if Prev == '$undef' -> NewFValue;
                                             true ->
                                                 merge_msg_server_node(Prev,
                                                                       NewFValue,
                                                                       TrUserData)
                                          end,
                                          F@_2,
                                          TrUserData).

d_field_server_node_status_state(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_server_node_status_state(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
d_field_server_node_status_state(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_hstream.server.NodeState'(begin
                                                  <<Res:32/signed-native>> =
                                                      <<(X bsl N +
                                                             Acc):32/unsigned-native>>,
                                                  id(Res, TrUserData)
                                              end),
            TrUserData),
         Rest},
    dfp_read_field_def_server_node_status(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          NewFValue,
                                          TrUserData).

skip_varint_server_node_status(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_server_node_status(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
skip_varint_server_node_status(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_server_node_status(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_length_delimited_server_node_status(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_node_status(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_length_delimited_server_node_status(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_node_status(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_group_server_node_status(Bin, FNum, Z2, F@_1, F@_2,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_node_status(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_32_server_node_status(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_server_node_status(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_64_server_node_status(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_server_node_status(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

decode_msg_lookup_shard_request(Bin, TrUserData) ->
    dfp_read_field_def_lookup_shard_request(Bin,
                                            0,
                                            0,
                                            id(0, TrUserData),
                                            TrUserData).

dfp_read_field_def_lookup_shard_request(<<8,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    d_field_lookup_shard_request_shardId(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
dfp_read_field_def_lookup_shard_request(<<>>, 0, 0,
                                        F@_1, _) ->
    #{shardId => F@_1};
dfp_read_field_def_lookup_shard_request(Other, Z1, Z2,
                                        F@_1, TrUserData) ->
    dg_read_field_def_lookup_shard_request(Other,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData).

dg_read_field_def_lookup_shard_request(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_shard_request(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
dg_read_field_def_lookup_shard_request(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_lookup_shard_request_shardId(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_shard_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                1 ->
                    skip_64_lookup_shard_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                2 ->
                    skip_length_delimited_lookup_shard_request(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
                3 ->
                    skip_group_lookup_shard_request(Rest,
                                                    Key bsr 3,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                5 ->
                    skip_32_lookup_shard_request(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData)
            end
    end;
dg_read_field_def_lookup_shard_request(<<>>, 0, 0, F@_1,
                                       _) ->
    #{shardId => F@_1}.

d_field_lookup_shard_request_shardId(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_request_shardId(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         TrUserData);
d_field_lookup_shard_request_shardId(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_lookup_shard_request(RestF,
                                            0,
                                            0,
                                            NewFValue,
                                            TrUserData).

skip_varint_lookup_shard_request(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_lookup_shard_request(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData);
skip_varint_lookup_shard_request(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_length_delimited_lookup_shard_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_shard_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
skip_length_delimited_lookup_shard_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_shard_request(Rest2,
                                            0,
                                            0,
                                            F@_1,
                                            TrUserData).

skip_group_lookup_shard_request(Bin, FNum, Z2, F@_1,
                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_shard_request(Rest,
                                            0,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_32_lookup_shard_request(<<_:32, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

skip_64_lookup_shard_request(<<_:64, Rest/binary>>, Z1,
                             Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData).

decode_msg_lookup_shard_response(Bin, TrUserData) ->
    dfp_read_field_def_lookup_shard_response(Bin,
                                             0,
                                             0,
                                             id(0, TrUserData),
                                             id('$undef', TrUserData),
                                             TrUserData).

dfp_read_field_def_lookup_shard_response(<<8,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_lookup_shard_response_shardId(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_lookup_shard_response(<<18,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_lookup_shard_response_serverNode(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
dfp_read_field_def_lookup_shard_response(<<>>, 0, 0,
                                         F@_1, F@_2, _) ->
    S1 = #{shardId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end;
dfp_read_field_def_lookup_shard_response(Other, Z1, Z2,
                                         F@_1, F@_2, TrUserData) ->
    dg_read_field_def_lookup_shard_response(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

dg_read_field_def_lookup_shard_response(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_shard_response(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dg_read_field_def_lookup_shard_response(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_lookup_shard_response_shardId(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        18 ->
            d_field_lookup_shard_response_serverNode(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_shard_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                1 ->
                    skip_64_lookup_shard_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_lookup_shard_response(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                3 ->
                    skip_group_lookup_shard_response(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
                5 ->
                    skip_32_lookup_shard_response(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData)
            end
    end;
dg_read_field_def_lookup_shard_response(<<>>, 0, 0,
                                        F@_1, F@_2, _) ->
    S1 = #{shardId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end.

d_field_lookup_shard_response_shardId(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_response_shardId(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_lookup_shard_response_shardId(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_lookup_shard_response(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             F@_2,
                                             TrUserData).

d_field_lookup_shard_response_serverNode(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_response_serverNode(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
d_field_lookup_shard_response_serverNode(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_lookup_shard_response(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             if Prev == '$undef' -> NewFValue;
                                                true ->
                                                    merge_msg_server_node(Prev,
                                                                          NewFValue,
                                                                          TrUserData)
                                             end,
                                             TrUserData).

skip_varint_lookup_shard_response(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_lookup_shard_response(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
skip_varint_lookup_shard_response(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_length_delimited_lookup_shard_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_shard_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
skip_length_delimited_lookup_shard_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_shard_response(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_group_lookup_shard_response(Bin, FNum, Z2, F@_1,
                                 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_shard_response(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_32_lookup_shard_response(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_64_lookup_shard_response(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

decode_msg_lookup_subscription_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_lookup_subscription_request(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_lookup_subscription_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    d_field_lookup_subscription_request_subscriptionId(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData);
dfp_read_field_def_lookup_subscription_request(<<>>, 0,
                                               0, F@_1, _) ->
    #{subscriptionId => F@_1};
dfp_read_field_def_lookup_subscription_request(Other,
                                               Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_lookup_subscription_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

dg_read_field_def_lookup_subscription_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_subscription_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
dg_read_field_def_lookup_subscription_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_subscription_request_subscriptionId(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_subscription_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                1 ->
                    skip_64_lookup_subscription_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_lookup_subscription_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                3 ->
                    skip_group_lookup_subscription_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                5 ->
                    skip_32_lookup_subscription_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData)
            end
    end;
dg_read_field_def_lookup_subscription_request(<<>>, 0,
                                              0, F@_1, _) ->
    #{subscriptionId => F@_1}.

d_field_lookup_subscription_request_subscriptionId(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_lookup_subscription_request_subscriptionId(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       TrUserData);
d_field_lookup_subscription_request_subscriptionId(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_subscription_request(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_lookup_subscription_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    skip_varint_lookup_subscription_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
skip_varint_lookup_subscription_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_length_delimited_lookup_subscription_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_subscription_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      TrUserData);
skip_length_delimited_lookup_subscription_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_subscription_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData).

skip_group_lookup_subscription_request(Bin, FNum, Z2,
                                       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_subscription_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_32_lookup_subscription_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_64_lookup_subscription_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_subscription_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

decode_msg_lookup_subscription_response(Bin,
                                        TrUserData) ->
    dfp_read_field_def_lookup_subscription_response(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id('$undef', TrUserData),
                                                    TrUserData).

dfp_read_field_def_lookup_subscription_response(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_lookup_subscription_response_subscriptionId(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
dfp_read_field_def_lookup_subscription_response(<<18,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_lookup_subscription_response_serverNode(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
dfp_read_field_def_lookup_subscription_response(<<>>, 0,
                                                0, F@_1, F@_2, _) ->
    S1 = #{subscriptionId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end;
dfp_read_field_def_lookup_subscription_response(Other,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dg_read_field_def_lookup_subscription_response(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

dg_read_field_def_lookup_subscription_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_subscription_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dg_read_field_def_lookup_subscription_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_subscription_response_subscriptionId(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
        18 ->
            d_field_lookup_subscription_response_serverNode(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_subscription_response(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                1 ->
                    skip_64_lookup_subscription_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_lookup_subscription_response(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                3 ->
                    skip_group_lookup_subscription_response(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                5 ->
                    skip_32_lookup_subscription_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData)
            end
    end;
dg_read_field_def_lookup_subscription_response(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    S1 = #{subscriptionId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end.

d_field_lookup_subscription_response_subscriptionId(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2,
                                                    TrUserData)
    when N < 57 ->
    d_field_lookup_subscription_response_subscriptionId(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
d_field_lookup_subscription_response_subscriptionId(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_subscription_response(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    TrUserData).

d_field_lookup_subscription_response_serverNode(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_subscription_response_serverNode(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
d_field_lookup_subscription_response_serverNode(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, Prev,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_lookup_subscription_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    if Prev == '$undef' ->
                                                           NewFValue;
                                                       true ->
                                                           merge_msg_server_node(Prev,
                                                                                 NewFValue,
                                                                                 TrUserData)
                                                    end,
                                                    TrUserData).

skip_varint_lookup_subscription_response(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_lookup_subscription_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_varint_lookup_subscription_response(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_subscription_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_length_delimited_lookup_subscription_response(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_subscription_response(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
skip_length_delimited_lookup_subscription_response(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_subscription_response(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_group_lookup_subscription_response(Bin, FNum, Z2,
                                        F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_subscription_response(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_32_lookup_subscription_response(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_subscription_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_64_lookup_subscription_response(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_subscription_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

decode_msg_lookup_connector_request(Bin, TrUserData) ->
    dfp_read_field_def_lookup_connector_request(Bin,
                                                0,
                                                0,
                                                id(<<>>, TrUserData),
                                                TrUserData).

dfp_read_field_def_lookup_connector_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_lookup_connector_request_name(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_lookup_connector_request(<<>>, 0, 0,
                                            F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_lookup_connector_request(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_lookup_connector_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_lookup_connector_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_connector_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_lookup_connector_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_connector_request_name(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_connector_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_lookup_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_lookup_connector_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_lookup_connector_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_lookup_connector_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_lookup_connector_request(<<>>, 0, 0,
                                           F@_1, _) ->
    #{name => F@_1}.

d_field_lookup_connector_request_name(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_lookup_connector_request_name(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_lookup_connector_request_name(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_connector_request(RestF,
                                                0,
                                                0,
                                                NewFValue,
                                                TrUserData).

skip_varint_lookup_connector_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_lookup_connector_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_lookup_connector_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_lookup_connector_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_connector_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_lookup_connector_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_connector_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_lookup_connector_request(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_connector_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_lookup_connector_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_lookup_connector_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_connector_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_lookup_connector_response(Bin, TrUserData) ->
    dfp_read_field_def_lookup_connector_response(Bin,
                                                 0,
                                                 0,
                                                 id(<<>>, TrUserData),
                                                 id('$undef', TrUserData),
                                                 TrUserData).

dfp_read_field_def_lookup_connector_response(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_lookup_connector_response_name(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
dfp_read_field_def_lookup_connector_response(<<18,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_lookup_connector_response_serverNode(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_lookup_connector_response(<<>>, 0, 0,
                                             F@_1, F@_2, _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end;
dfp_read_field_def_lookup_connector_response(Other, Z1,
                                             Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_lookup_connector_response(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData).

dg_read_field_def_lookup_connector_response(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_connector_response(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
dg_read_field_def_lookup_connector_response(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_connector_response_name(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
        18 ->
            d_field_lookup_connector_response_serverNode(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_connector_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                1 ->
                    skip_64_lookup_connector_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_lookup_connector_response(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
                3 ->
                    skip_group_lookup_connector_response(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                5 ->
                    skip_32_lookup_connector_response(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData)
            end
    end;
dg_read_field_def_lookup_connector_response(<<>>, 0, 0,
                                            F@_1, F@_2, _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end.

d_field_lookup_connector_response_name(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_connector_response_name(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
d_field_lookup_connector_response_name(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_connector_response(RestF,
                                                 0,
                                                 0,
                                                 NewFValue,
                                                 F@_2,
                                                 TrUserData).

d_field_lookup_connector_response_serverNode(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_connector_response_serverNode(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_lookup_connector_response_serverNode(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_lookup_connector_response(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 if Prev == '$undef' ->
                                                        NewFValue;
                                                    true ->
                                                        merge_msg_server_node(Prev,
                                                                              NewFValue,
                                                                              TrUserData)
                                                 end,
                                                 TrUserData).

skip_varint_lookup_connector_response(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_lookup_connector_response(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_varint_lookup_connector_response(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_connector_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_length_delimited_lookup_connector_response(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_connector_response(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
skip_length_delimited_lookup_connector_response(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2,
                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_connector_response(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_group_lookup_connector_response(Bin, FNum, Z2,
                                     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_connector_response(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_32_lookup_connector_response(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_connector_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_64_lookup_connector_response(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_connector_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

decode_msg_lookup_shard_reader_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_request(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_lookup_shard_reader_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    d_field_lookup_shard_reader_request_readerId(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
dfp_read_field_def_lookup_shard_reader_request(<<>>, 0,
                                               0, F@_1, _) ->
    #{readerId => F@_1};
dfp_read_field_def_lookup_shard_reader_request(Other,
                                               Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_lookup_shard_reader_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

dg_read_field_def_lookup_shard_reader_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_shard_reader_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
dg_read_field_def_lookup_shard_reader_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_shard_reader_request_readerId(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_shard_reader_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                1 ->
                    skip_64_lookup_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_lookup_shard_reader_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                3 ->
                    skip_group_lookup_shard_reader_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                5 ->
                    skip_32_lookup_shard_reader_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData)
            end
    end;
dg_read_field_def_lookup_shard_reader_request(<<>>, 0,
                                              0, F@_1, _) ->
    #{readerId => F@_1}.

d_field_lookup_shard_reader_request_readerId(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_reader_request_readerId(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
d_field_lookup_shard_reader_request_readerId(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_shard_reader_request(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_lookup_shard_reader_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    skip_varint_lookup_shard_reader_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
skip_varint_lookup_shard_reader_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_length_delimited_lookup_shard_reader_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_shard_reader_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      TrUserData);
skip_length_delimited_lookup_shard_reader_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_shard_reader_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData).

skip_group_lookup_shard_reader_request(Bin, FNum, Z2,
                                       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_shard_reader_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_32_lookup_shard_reader_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

skip_64_lookup_shard_reader_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

decode_msg_lookup_shard_reader_response(Bin,
                                        TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_response(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id('$undef', TrUserData),
                                                    TrUserData).

dfp_read_field_def_lookup_shard_reader_response(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_lookup_shard_reader_response_readerId(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dfp_read_field_def_lookup_shard_reader_response(<<18,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_lookup_shard_reader_response_serverNode(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
dfp_read_field_def_lookup_shard_reader_response(<<>>, 0,
                                                0, F@_1, F@_2, _) ->
    S1 = #{readerId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end;
dfp_read_field_def_lookup_shard_reader_response(Other,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dg_read_field_def_lookup_shard_reader_response(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

dg_read_field_def_lookup_shard_reader_response(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_shard_reader_response(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dg_read_field_def_lookup_shard_reader_response(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_lookup_shard_reader_response_readerId(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
        18 ->
            d_field_lookup_shard_reader_response_serverNode(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_lookup_shard_reader_response(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                1 ->
                    skip_64_lookup_shard_reader_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_lookup_shard_reader_response(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                3 ->
                    skip_group_lookup_shard_reader_response(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                5 ->
                    skip_32_lookup_shard_reader_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData)
            end
    end;
dg_read_field_def_lookup_shard_reader_response(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    S1 = #{readerId => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{serverNode => F@_2}
    end.

d_field_lookup_shard_reader_response_readerId(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_reader_response_readerId(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
d_field_lookup_shard_reader_response_readerId(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_lookup_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    TrUserData).

d_field_lookup_shard_reader_response_serverNode(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_lookup_shard_reader_response_serverNode(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
d_field_lookup_shard_reader_response_serverNode(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, Prev,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_server_node(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_lookup_shard_reader_response(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    if Prev == '$undef' ->
                                                           NewFValue;
                                                       true ->
                                                           merge_msg_server_node(Prev,
                                                                                 NewFValue,
                                                                                 TrUserData)
                                                    end,
                                                    TrUserData).

skip_varint_lookup_shard_reader_response(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_lookup_shard_reader_response(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_varint_lookup_shard_reader_response(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_length_delimited_lookup_shard_reader_response(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_shard_reader_response(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
skip_length_delimited_lookup_shard_reader_response(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_shard_reader_response(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_group_lookup_shard_reader_response(Bin, FNum, Z2,
                                        F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_shard_reader_response(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_32_lookup_shard_reader_response(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_64_lookup_shard_reader_response(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_lookup_shard_reader_response(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

decode_msg_struct(Bin, TrUserData) ->
    dfp_read_field_def_struct(Bin,
                              0,
                              0,
                              'tr_decode_init_default_struct.fields'([],
                                                                     TrUserData),
                              TrUserData).

dfp_read_field_def_struct(<<10, Rest/binary>>, Z1, Z2,
                          F@_1, TrUserData) ->
    d_field_struct_fields(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_struct(<<>>, 0, 0, R1, TrUserData) ->
    #{fields =>
          'tr_decode_repeated_finalize_struct.fields'(R1,
                                                      TrUserData)};
dfp_read_field_def_struct(Other, Z1, Z2, F@_1,
                          TrUserData) ->
    dg_read_field_def_struct(Other,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData).

dg_read_field_def_struct(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_struct(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
dg_read_field_def_struct(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_struct_fields(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_struct(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_struct(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_struct(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData);
                3 ->
                    skip_group_struct(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_struct(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_struct(<<>>, 0, 0, R1, TrUserData) ->
    #{fields =>
          'tr_decode_repeated_finalize_struct.fields'(R1,
                                                      TrUserData)}.

d_field_struct_fields(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, TrUserData)
    when N < 57 ->
    d_field_struct_fields(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          TrUserData);
d_field_struct_fields(<<0:1, X:7, Rest/binary>>, N, Acc,
                      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id('decode_msg_map<string,value>'(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_struct(RestF,
                              0,
                              0,
                              'tr_decode_repeated_add_elem_struct.fields'(NewFValue,
                                                                          Prev,
                                                                          TrUserData),
                              TrUserData).

skip_varint_struct(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, TrUserData) ->
    skip_varint_struct(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_struct(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, TrUserData) ->
    dfp_read_field_def_struct(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData).

skip_length_delimited_struct(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_struct(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
skip_length_delimited_struct(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_struct(Rest2,
                              0,
                              0,
                              F@_1,
                              TrUserData).

skip_group_struct(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_struct(Rest,
                              0,
                              Z2,
                              F@_1,
                              TrUserData).

skip_32_struct(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
               TrUserData) ->
    dfp_read_field_def_struct(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData).

skip_64_struct(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
               TrUserData) ->
    dfp_read_field_def_struct(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData).

decode_msg_value(Bin, TrUserData) ->
    dfp_read_field_def_value(Bin,
                             0,
                             0,
                             id('$undef', TrUserData),
                             TrUserData).

dfp_read_field_def_value(<<8, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_null_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
dfp_read_field_def_value(<<17, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_number_value(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_value(<<26, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_string_value(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_value(<<32, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_bool_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
dfp_read_field_def_value(<<42, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_struct_value(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_value(<<50, Rest/binary>>, Z1, Z2,
                         F@_1, TrUserData) ->
    d_field_value_list_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData);
dfp_read_field_def_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{kind => F@_1}
    end;
dfp_read_field_def_value(Other, Z1, Z2, F@_1,
                         TrUserData) ->
    dg_read_field_def_value(Other,
                            Z1,
                            Z2,
                            F@_1,
                            TrUserData).

dg_read_field_def_value(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_value(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            TrUserData);
dg_read_field_def_value(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_value_null_value(Rest, 0, 0, F@_1, TrUserData);
        17 ->
            d_field_value_number_value(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        26 ->
            d_field_value_string_value(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        32 ->
            d_field_value_bool_value(Rest, 0, 0, F@_1, TrUserData);
        42 ->
            d_field_value_struct_value(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        50 ->
            d_field_value_list_value(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_value(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_value(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_value(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                3 ->
                    skip_group_value(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_value(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{kind => F@_1}
    end.

d_field_value_null_value(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_null_value(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
d_field_value_null_value(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_google.protobuf.NullValue'(begin
                                                   <<Res:32/signed-native>> =
                                                       <<(X bsl N +
                                                              Acc):32/unsigned-native>>,
                                                   id(Res, TrUserData)
                                               end),
            TrUserData),
         Rest},
    dfp_read_field_def_value(RestF,
                             0,
                             0,
                             id({null_value, NewFValue}, TrUserData),
                             TrUserData).

d_field_value_number_value(<<0:48, 240, 127,
                             Rest/binary>>,
                           Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             id({number_value, id(infinity, TrUserData)},
                                TrUserData),
                             TrUserData);
d_field_value_number_value(<<0:48, 240, 255,
                             Rest/binary>>,
                           Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             id({number_value, id('-infinity', TrUserData)},
                                TrUserData),
                             TrUserData);
d_field_value_number_value(<<_:48, 15:4, _:4, _:1,
                             127:7, Rest/binary>>,
                           Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             id({number_value, id(nan, TrUserData)},
                                TrUserData),
                             TrUserData);
d_field_value_number_value(<<Value:64/little-float,
                             Rest/binary>>,
                           Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             id({number_value, id(Value, TrUserData)},
                                TrUserData),
                             TrUserData).

d_field_value_string_value(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_string_value(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_value_string_value(<<0:1, X:7, Rest/binary>>, N,
                           Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_value(RestF,
                             0,
                             0,
                             id({string_value, NewFValue}, TrUserData),
                             TrUserData).

d_field_value_bool_value(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_bool_value(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
d_field_value_bool_value(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_value(RestF,
                             0,
                             0,
                             id({bool_value, NewFValue}, TrUserData),
                             TrUserData).

d_field_value_struct_value(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_struct_value(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_value_struct_value(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_struct(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_value(RestF,
                             0,
                             0,
                             case Prev of
                                 '$undef' ->
                                     id({struct_value, NewFValue}, TrUserData);
                                 {struct_value, MVPrev} ->
                                     id({struct_value,
                                         merge_msg_struct(MVPrev,
                                                          NewFValue,
                                                          TrUserData)},
                                        TrUserData);
                                 _ -> id({struct_value, NewFValue}, TrUserData)
                             end,
                             TrUserData).

d_field_value_list_value(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_list_value(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
d_field_value_list_value(<<0:1, X:7, Rest/binary>>, N,
                         Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_list_value(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_value(RestF,
                             0,
                             0,
                             case Prev of
                                 '$undef' ->
                                     id({list_value, NewFValue}, TrUserData);
                                 {list_value, MVPrev} ->
                                     id({list_value,
                                         merge_msg_list_value(MVPrev,
                                                              NewFValue,
                                                              TrUserData)},
                                        TrUserData);
                                 _ -> id({list_value, NewFValue}, TrUserData)
                             end,
                             TrUserData).

skip_varint_value(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, TrUserData) ->
    skip_varint_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_value(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                  F@_1, TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData).

skip_length_delimited_value(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_value(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                TrUserData);
skip_length_delimited_value(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_value(Rest2, 0, 0, F@_1, TrUserData).

skip_group_value(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_value(Rest, 0, Z2, F@_1, TrUserData).

skip_32_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
              TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData).

skip_64_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
              TrUserData) ->
    dfp_read_field_def_value(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             TrUserData).

decode_msg_list_value(Bin, TrUserData) ->
    dfp_read_field_def_list_value(Bin,
                                  0,
                                  0,
                                  id([], TrUserData),
                                  TrUserData).

dfp_read_field_def_list_value(<<10, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    d_field_list_value_values(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
dfp_read_field_def_list_value(<<>>, 0, 0, R1,
                              TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_value(Other, Z1, Z2, F@_1,
                              TrUserData) ->
    dg_read_field_def_list_value(Other,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

dg_read_field_def_list_value(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_value(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
dg_read_field_def_list_value(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_list_value_values(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_list_value(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_list_value(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_list_value(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                3 ->
                    skip_group_list_value(Rest,
                                          Key bsr 3,
                                          0,
                                          F@_1,
                                          TrUserData);
                5 -> skip_32_list_value(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_list_value(<<>>, 0, 0, R1,
                             TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end.

d_field_list_value_values(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_value_values(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              TrUserData);
d_field_list_value_values(<<0:1, X:7, Rest/binary>>, N,
                          Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_value(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_list_value(RestF,
                                  0,
                                  0,
                                  cons(NewFValue, Prev, TrUserData),
                                  TrUserData).

skip_varint_list_value(<<1:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, TrUserData) ->
    skip_varint_list_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_list_value(<<0:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_value(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_length_delimited_list_value(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_value(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     TrUserData);
skip_length_delimited_list_value(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_value(Rest2,
                                  0,
                                  0,
                                  F@_1,
                                  TrUserData).

skip_group_list_value(Bin, FNum, Z2, F@_1,
                      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_value(Rest,
                                  0,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_32_list_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                   TrUserData) ->
    dfp_read_field_def_list_value(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_64_list_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                   TrUserData) ->
    dfp_read_field_def_list_value(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin,
                                 0,
                                 0,
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
                             F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
                             _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
                             TrUserData) ->
    dg_read_field_def_timestamp(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_timestamp_seconds(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
        16 ->
            d_field_timestamp_nanos(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_timestamp(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                1 ->
                    skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_timestamp(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                3 ->
                    skip_group_timestamp(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                5 ->
                    skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
                            _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                                                Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_timestamp(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_timestamp(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 NewFValue,
                                 TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

decode_msg_empty(Bin, TrUserData) ->
    dfp_read_field_def_empty(Bin, 0, 0, TrUserData).

dfp_read_field_def_empty(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_empty(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_empty(Other, Z1, Z2, TrUserData).

dg_read_field_def_empty(<<1:1, X:7, Rest/binary>>, N,
                        Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_empty(Rest,
                            N + 7,
                            X bsl N + Acc,
                            TrUserData);
dg_read_field_def_empty(<<0:1, X:7, Rest/binary>>, N,
                        Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_empty(Rest, 0, 0, TrUserData);
        1 -> skip_64_empty(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_empty(Rest, 0, 0, TrUserData);
        3 -> skip_group_empty(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_empty(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_empty(<<>>, 0, 0, _) -> #{}.

skip_varint_empty(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                  TrUserData) ->
    skip_varint_empty(Rest, Z1, Z2, TrUserData);
skip_varint_empty(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                  TrUserData) ->
    dfp_read_field_def_empty(Rest, Z1, Z2, TrUserData).

skip_length_delimited_empty(<<1:1, X:7, Rest/binary>>,
                            N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_empty(Rest,
                                N + 7,
                                X bsl N + Acc,
                                TrUserData);
skip_length_delimited_empty(<<0:1, X:7, Rest/binary>>,
                            N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_empty(Rest2, 0, 0, TrUserData).

skip_group_empty(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_empty(Rest, 0, Z2, TrUserData).

skip_32_empty(<<_:32, Rest/binary>>, Z1, Z2,
              TrUserData) ->
    dfp_read_field_def_empty(Rest, Z1, Z2, TrUserData).

skip_64_empty(<<_:64, Rest/binary>>, Z1, Z2,
              TrUserData) ->
    dfp_read_field_def_empty(Rest, Z1, Z2, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin,
                                            0,
                                            0,
                                            id(<<>>, TrUserData),
                                            id(<<>>, TrUserData),
                                            TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
                                        F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
                                        F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,string>_key'(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
        18 ->
            'd_field_map<string,string>_value'(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,string>'(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
                1 ->
                    'skip_64_map<string,string>'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
                2 ->
                    'skip_length_delimited_map<string,string>'(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
                3 ->
                    'skip_group_map<string,string>'(Rest,
                                                    Key bsr 3,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                5 ->
                    'skip_32_map<string,string>'(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData)
            end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
                                       F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_map<string,string>'(RestF,
                                            0,
                                            0,
                                            NewFValue,
                                            F@_2,
                                            TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_map<string,string>'(RestF,
                                            0,
                                            0,
                                            F@_1,
                                            NewFValue,
                                            TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
                                F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest,
                                            0,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

'decode_msg_map<string,stats_double_vals>'(Bin,
                                           TrUserData) ->
    'dfp_read_field_def_map<string,stats_double_vals>'(Bin,
                                                       0,
                                                       0,
                                                       id(<<>>, TrUserData),
                                                       id('$undef', TrUserData),
                                                       TrUserData).

'dfp_read_field_def_map<string,stats_double_vals>'(<<10,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    'd_field_map<string,stats_double_vals>_key'(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
'dfp_read_field_def_map<string,stats_double_vals>'(<<18,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    'd_field_map<string,stats_double_vals>_value'(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
'dfp_read_field_def_map<string,stats_double_vals>'(<<>>,
                                                   0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,stats_double_vals>'(Other,
                                                   Z1, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    'dg_read_field_def_map<string,stats_double_vals>'(Other,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

'dg_read_field_def_map<string,stats_double_vals>'(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,stats_double_vals>'(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
'dg_read_field_def_map<string,stats_double_vals>'(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,stats_double_vals>_key'(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
        18 ->
            'd_field_map<string,stats_double_vals>_value'(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,stats_double_vals>'(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                1 ->
                    'skip_64_map<string,stats_double_vals>'(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                2 ->
                    'skip_length_delimited_map<string,stats_double_vals>'(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          TrUserData);
                3 ->
                    'skip_group_map<string,stats_double_vals>'(Rest,
                                                               Key bsr 3,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
                5 ->
                    'skip_32_map<string,stats_double_vals>'(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData)
            end
    end;
'dg_read_field_def_map<string,stats_double_vals>'(<<>>,
                                                  0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,stats_double_vals>_key'(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,stats_double_vals>_key'(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
'd_field_map<string,stats_double_vals>_key'(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_map<string,stats_double_vals>'(RestF,
                                                       0,
                                                       0,
                                                       NewFValue,
                                                       F@_2,
                                                       TrUserData).

'd_field_map<string,stats_double_vals>_value'(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,stats_double_vals>_value'(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
'd_field_map<string,stats_double_vals>_value'(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_stats_double_vals(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    'dfp_read_field_def_map<string,stats_double_vals>'(RestF,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       if Prev == '$undef' ->
                                                              NewFValue;
                                                          true ->
                                                              merge_msg_stats_double_vals(Prev,
                                                                                          NewFValue,
                                                                                          TrUserData)
                                                       end,
                                                       TrUserData).

'skip_varint_map<string,stats_double_vals>'(<<1:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,stats_double_vals>'(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
'skip_varint_map<string,stats_double_vals>'(<<0:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,stats_double_vals>'(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData).

'skip_length_delimited_map<string,stats_double_vals>'(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2,
                                                      TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,stats_double_vals>'(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
'skip_length_delimited_map<string,stats_double_vals>'(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2,
                                                      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,stats_double_vals>'(Rest2,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData).

'skip_group_map<string,stats_double_vals>'(Bin, FNum,
                                           Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,stats_double_vals>'(Rest,
                                                       0,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData).

'skip_32_map<string,stats_double_vals>'(<<_:32,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,stats_double_vals>'(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData).

'skip_64_map<string,stats_double_vals>'(<<_:64,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,stats_double_vals>'(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData).

'decode_msg_map<string,value>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Bin,
                                           0,
                                           0,
                                           id(<<>>, TrUserData),
                                           id('$undef', TrUserData),
                                           TrUserData).

'dfp_read_field_def_map<string,value>'(<<10,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,value>_key'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
'dfp_read_field_def_map<string,value>'(<<18,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,value>_value'(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
'dfp_read_field_def_map<string,value>'(<<>>, 0, 0, F@_1,
                                       F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,value>'(Other, Z1, Z2,
                                       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,value>'(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

'dg_read_field_def_map<string,value>'(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,value>'(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
'dg_read_field_def_map<string,value>'(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_map<string,value>_key'(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
        18 ->
            'd_field_map<string,value>_value'(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_map<string,value>'(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                1 ->
                    'skip_64_map<string,value>'(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                2 ->
                    'skip_length_delimited_map<string,value>'(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
                3 ->
                    'skip_group_map<string,value>'(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                5 ->
                    'skip_32_map<string,value>'(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData)
            end
    end;
'dg_read_field_def_map<string,value>'(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,value>_key'(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,value>_key'(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
'd_field_map<string,value>_key'(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    'dfp_read_field_def_map<string,value>'(RestF,
                                           0,
                                           0,
                                           NewFValue,
                                           F@_2,
                                           TrUserData).

'd_field_map<string,value>_value'(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,value>_value'(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
'd_field_map<string,value>_value'(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_value(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    'dfp_read_field_def_map<string,value>'(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           if Prev == '$undef' -> NewFValue;
                                              true ->
                                                  merge_msg_value(Prev,
                                                                  NewFValue,
                                                                  TrUserData)
                                           end,
                                           TrUserData).

'skip_varint_map<string,value>'(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,value>'(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
'skip_varint_map<string,value>'(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'skip_length_delimited_map<string,value>'(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,value>'(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
'skip_length_delimited_map<string,value>'(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,value>'(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'skip_group_map<string,value>'(Bin, FNum, Z2, F@_1,
                               F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,value>'(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'skip_32_map<string,value>'(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'skip_64_map<string,value>'(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

'd_enum_hstream.server.SpecialOffset'(0) -> 'EARLIEST';
'd_enum_hstream.server.SpecialOffset'(1) -> 'LATEST';
'd_enum_hstream.server.SpecialOffset'(V) -> V.

'd_enum_h_stream_record_header.Flag'(0) -> 'JSON';
'd_enum_h_stream_record_header.Flag'(1) -> 'RAW';
'd_enum_h_stream_record_header.Flag'(V) -> V.

'd_enum_hstream.server.TaskStatusPB'(0) ->
    'TASK_CREATING';
'd_enum_hstream.server.TaskStatusPB'(1) ->
    'TASK_CREATED';
'd_enum_hstream.server.TaskStatusPB'(2) ->
    'TASK_RUNNING';
'd_enum_hstream.server.TaskStatusPB'(3) ->
    'TASK_CREATION_ABORT';
'd_enum_hstream.server.TaskStatusPB'(4) ->
    'TASK_CONNECTION_ABORT';
'd_enum_hstream.server.TaskStatusPB'(5) ->
    'TASK_TERMINATED';
'd_enum_hstream.server.TaskStatusPB'(V) -> V.

'd_enum_hstream.server.NodeState'(0) -> 'Starting';
'd_enum_hstream.server.NodeState'(1) -> 'Running';
'd_enum_hstream.server.NodeState'(2) -> 'Unavailable';
'd_enum_hstream.server.NodeState'(3) -> 'Dead';
'd_enum_hstream.server.NodeState'(V) -> V.

'd_enum_google.protobuf.NullValue'(0) -> 'NULL_VALUE';
'd_enum_google.protobuf.NullValue'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        shard_offset ->
            merge_msg_shard_offset(Prev, New, TrUserData);
        echo_request ->
            merge_msg_echo_request(Prev, New, TrUserData);
        echo_response ->
            merge_msg_echo_response(Prev, New, TrUserData);
        command_stream_task ->
            merge_msg_command_stream_task(Prev, New, TrUserData);
        command_stream_task_response ->
            merge_msg_command_stream_task_response(Prev,
                                                   New,
                                                   TrUserData);
        command_connect ->
            merge_msg_command_connect(Prev, New, TrUserData);
        command_connected ->
            merge_msg_command_connected(Prev, New, TrUserData);
        command_push_query ->
            merge_msg_command_push_query(Prev, New, TrUserData);
        command_query ->
            merge_msg_command_query(Prev, New, TrUserData);
        command_query_response ->
            merge_msg_command_query_response(Prev, New, TrUserData);
        append_request ->
            merge_msg_append_request(Prev, New, TrUserData);
        append_response ->
            merge_msg_append_response(Prev, New, TrUserData);
        subscription ->
            merge_msg_subscription(Prev, New, TrUserData);
        delete_subscription_request ->
            merge_msg_delete_subscription_request(Prev,
                                                  New,
                                                  TrUserData);
        check_subscription_exist_request ->
            merge_msg_check_subscription_exist_request(Prev,
                                                       New,
                                                       TrUserData);
        check_subscription_exist_response ->
            merge_msg_check_subscription_exist_response(Prev,
                                                        New,
                                                        TrUserData);
        streaming_fetch_request ->
            merge_msg_streaming_fetch_request(Prev,
                                              New,
                                              TrUserData);
        streaming_fetch_response ->
            merge_msg_streaming_fetch_response(Prev,
                                               New,
                                               TrUserData);
        received_record ->
            merge_msg_received_record(Prev, New, TrUserData);
        delete_stream_request ->
            merge_msg_delete_stream_request(Prev, New, TrUserData);
        list_streams_response ->
            merge_msg_list_streams_response(Prev, New, TrUserData);
        list_streams_request ->
            merge_msg_list_streams_request(Prev, New, TrUserData);
        list_subscriptions_request ->
            merge_msg_list_subscriptions_request(Prev,
                                                 New,
                                                 TrUserData);
        list_subscriptions_response ->
            merge_msg_list_subscriptions_response(Prev,
                                                  New,
                                                  TrUserData);
        stream -> merge_msg_stream(Prev, New, TrUserData);
        h_stream_record_batch ->
            merge_msg_h_stream_record_batch(Prev, New, TrUserData);
        h_stream_record ->
            merge_msg_h_stream_record(Prev, New, TrUserData);
        h_stream_record_header ->
            merge_msg_h_stream_record_header(Prev, New, TrUserData);
        record_id -> merge_msg_record_id(Prev, New, TrUserData);
        shard -> merge_msg_shard(Prev, New, TrUserData);
        list_shards_request ->
            merge_msg_list_shards_request(Prev, New, TrUserData);
        list_shards_response ->
            merge_msg_list_shards_response(Prev, New, TrUserData);
        create_shard_reader_request ->
            merge_msg_create_shard_reader_request(Prev,
                                                  New,
                                                  TrUserData);
        create_shard_reader_response ->
            merge_msg_create_shard_reader_response(Prev,
                                                   New,
                                                   TrUserData);
        read_shard_request ->
            merge_msg_read_shard_request(Prev, New, TrUserData);
        delete_shard_reader_request ->
            merge_msg_delete_shard_reader_request(Prev,
                                                  New,
                                                  TrUserData);
        read_shard_response ->
            merge_msg_read_shard_response(Prev, New, TrUserData);
        terminate_queries_request ->
            merge_msg_terminate_queries_request(Prev,
                                                New,
                                                TrUserData);
        terminate_queries_response ->
            merge_msg_terminate_queries_response(Prev,
                                                 New,
                                                 TrUserData);
        list_queries_request ->
            merge_msg_list_queries_request(Prev, New, TrUserData);
        list_queries_response ->
            merge_msg_list_queries_response(Prev, New, TrUserData);
        get_query_request ->
            merge_msg_get_query_request(Prev, New, TrUserData);
        query -> merge_msg_query(Prev, New, TrUserData);
        delete_query_request ->
            merge_msg_delete_query_request(Prev, New, TrUserData);
        delete_query_response ->
            merge_msg_delete_query_response(Prev, New, TrUserData);
        restart_query_request ->
            merge_msg_restart_query_request(Prev, New, TrUserData);
        restart_query_response ->
            merge_msg_restart_query_response(Prev, New, TrUserData);
        create_connector_request ->
            merge_msg_create_connector_request(Prev,
                                               New,
                                               TrUserData);
        list_connectors_request ->
            merge_msg_list_connectors_request(Prev,
                                              New,
                                              TrUserData);
        list_connectors_response ->
            merge_msg_list_connectors_response(Prev,
                                               New,
                                               TrUserData);
        get_connector_request ->
            merge_msg_get_connector_request(Prev, New, TrUserData);
        connector -> merge_msg_connector(Prev, New, TrUserData);
        delete_connector_request ->
            merge_msg_delete_connector_request(Prev,
                                               New,
                                               TrUserData);
        pause_connector_request ->
            merge_msg_pause_connector_request(Prev,
                                              New,
                                              TrUserData);
        resume_connector_request ->
            merge_msg_resume_connector_request(Prev,
                                               New,
                                               TrUserData);
        get_view_request ->
            merge_msg_get_view_request(Prev, New, TrUserData);
        delete_view_request ->
            merge_msg_delete_view_request(Prev, New, TrUserData);
        list_views_request ->
            merge_msg_list_views_request(Prev, New, TrUserData);
        list_views_response ->
            merge_msg_list_views_response(Prev, New, TrUserData);
        view -> merge_msg_view(Prev, New, TrUserData);
        get_node_request ->
            merge_msg_get_node_request(Prev, New, TrUserData);
        list_nodes_request ->
            merge_msg_list_nodes_request(Prev, New, TrUserData);
        list_nodes_response ->
            merge_msg_list_nodes_response(Prev, New, TrUserData);
        node -> merge_msg_node(Prev, New, TrUserData);
        stats_interval_vals ->
            merge_msg_stats_interval_vals(Prev, New, TrUserData);
        stats_double_vals ->
            merge_msg_stats_double_vals(Prev, New, TrUserData);
        admin_command_request ->
            merge_msg_admin_command_request(Prev, New, TrUserData);
        admin_command_response ->
            merge_msg_admin_command_response(Prev, New, TrUserData);
        per_stream_time_series_stats_request ->
            merge_msg_per_stream_time_series_stats_request(Prev,
                                                           New,
                                                           TrUserData);
        per_stream_time_series_stats_response ->
            merge_msg_per_stream_time_series_stats_response(Prev,
                                                            New,
                                                            TrUserData);
        per_stream_time_series_stats_all_response ->
            merge_msg_per_stream_time_series_stats_all_response(Prev,
                                                                New,
                                                                TrUserData);
        per_stream_time_series_stats_all_request ->
            merge_msg_per_stream_time_series_stats_all_request(Prev,
                                                               New,
                                                               TrUserData);
        describe_cluster_response ->
            merge_msg_describe_cluster_response(Prev,
                                                New,
                                                TrUserData);
        server_node ->
            merge_msg_server_node(Prev, New, TrUserData);
        server_node_status ->
            merge_msg_server_node_status(Prev, New, TrUserData);
        lookup_shard_request ->
            merge_msg_lookup_shard_request(Prev, New, TrUserData);
        lookup_shard_response ->
            merge_msg_lookup_shard_response(Prev, New, TrUserData);
        lookup_subscription_request ->
            merge_msg_lookup_subscription_request(Prev,
                                                  New,
                                                  TrUserData);
        lookup_subscription_response ->
            merge_msg_lookup_subscription_response(Prev,
                                                   New,
                                                   TrUserData);
        lookup_connector_request ->
            merge_msg_lookup_connector_request(Prev,
                                               New,
                                               TrUserData);
        lookup_connector_response ->
            merge_msg_lookup_connector_response(Prev,
                                                New,
                                                TrUserData);
        lookup_shard_reader_request ->
            merge_msg_lookup_shard_reader_request(Prev,
                                                  New,
                                                  TrUserData);
        lookup_shard_reader_response ->
            merge_msg_lookup_shard_reader_response(Prev,
                                                   New,
                                                   TrUserData);
        struct -> merge_msg_struct(Prev, New, TrUserData);
        value -> merge_msg_value(Prev, New, TrUserData);
        list_value ->
            merge_msg_list_value(Prev, New, TrUserData);
        timestamp -> merge_msg_timestamp(Prev, New, TrUserData);
        empty -> merge_msg_empty(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_shard_offset/3}).
merge_msg_shard_offset(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{offset := {recordOffset, OPFoffset}},
         #{offset := {recordOffset, ONFoffset}}} ->
            S1#{offset =>
                    {recordOffset,
                     merge_msg_record_id(OPFoffset, ONFoffset, TrUserData)}};
        {_, #{offset := NFoffset}} -> S1#{offset => NFoffset};
        {#{offset := PFoffset}, _} -> S1#{offset => PFoffset};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_echo_request/3}).
merge_msg_echo_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
        {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_echo_response/3}).
merge_msg_echo_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
        {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_stream_task/3}).
merge_msg_command_stream_task(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{command_sql := NFcommand_sql}} ->
            S1#{command_sql => NFcommand_sql};
        {#{command_sql := PFcommand_sql}, _} ->
            S1#{command_sql => PFcommand_sql};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_stream_task_response/3}).
merge_msg_command_stream_task_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{command_resp := NFcommand_resp}} ->
            S1#{command_resp => NFcommand_resp};
        {#{command_resp := PFcommand_resp}, _} ->
            S1#{command_resp => PFcommand_resp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_connect/3}).
merge_msg_command_connect(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{client_version := NFclient_version}} ->
                 S1#{client_version => NFclient_version};
             {#{client_version := PFclient_version}, _} ->
                 S1#{client_version => PFclient_version};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{protocol_version := NFprotocol_version}} ->
            S2#{protocol_version => NFprotocol_version};
        {#{protocol_version := PFprotocol_version}, _} ->
            S2#{protocol_version => PFprotocol_version};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_command_connected/3}).
merge_msg_command_connected(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{server_version := NFserver_version}} ->
                 S1#{server_version => NFserver_version};
             {#{server_version := PFserver_version}, _} ->
                 S1#{server_version => PFserver_version};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{protocol_version := NFprotocol_version}} ->
            S2#{protocol_version => NFprotocol_version};
        {#{protocol_version := PFprotocol_version}, _} ->
            S2#{protocol_version => PFprotocol_version};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_command_push_query/3}).
merge_msg_command_push_query(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{query_text := NFquery_text}} ->
            S1#{query_text => NFquery_text};
        {#{query_text := PFquery_text}, _} ->
            S1#{query_text => PFquery_text};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_query/3}).
merge_msg_command_query(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{stmt_text := NFstmt_text}} ->
            S1#{stmt_text => NFstmt_text};
        {#{stmt_text := PFstmt_text}, _} ->
            S1#{stmt_text => PFstmt_text};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_query_response/3}).
merge_msg_command_query_response(PMsg, NMsg,
                                 TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{result_set := PFresult_set},
         #{result_set := NFresult_set}} ->
            S1#{result_set =>
                    'erlang_++'(PFresult_set, NFresult_set, TrUserData)};
        {_, #{result_set := NFresult_set}} ->
            S1#{result_set => NFresult_set};
        {#{result_set := PFresult_set}, _} ->
            S1#{result_set => PFresult_set};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_append_request/3}).
merge_msg_append_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S2#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S2#{shardId => PFshardId};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{records := PFrecords}, #{records := NFrecords}} ->
            S3#{records =>
                    'erlang_++'(PFrecords, NFrecords, TrUserData)};
        {_, #{records := NFrecords}} ->
            S3#{records => NFrecords};
        {#{records := PFrecords}, _} ->
            S3#{records => PFrecords};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_append_response/3}).
merge_msg_append_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S2#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S2#{shardId => PFshardId};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{recordIds := PFrecordIds},
         #{recordIds := NFrecordIds}} ->
            S3#{recordIds =>
                    'erlang_++'(PFrecordIds, NFrecordIds, TrUserData)};
        {_, #{recordIds := NFrecordIds}} ->
            S3#{recordIds => NFrecordIds};
        {#{recordIds := PFrecordIds}, _} ->
            S3#{recordIds => PFrecordIds};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_subscription/3}).
merge_msg_subscription(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{subscriptionId := NFsubscriptionId}} ->
                 S1#{subscriptionId => NFsubscriptionId};
             {#{subscriptionId := PFsubscriptionId}, _} ->
                 S1#{subscriptionId => PFsubscriptionId};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S2#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S2#{streamName => PFstreamName};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{ackTimeoutSeconds := NFackTimeoutSeconds}} ->
                 S3#{ackTimeoutSeconds => NFackTimeoutSeconds};
             {#{ackTimeoutSeconds := PFackTimeoutSeconds}, _} ->
                 S3#{ackTimeoutSeconds => PFackTimeoutSeconds};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{maxUnackedRecords := NFmaxUnackedRecords}} ->
                 S4#{maxUnackedRecords => NFmaxUnackedRecords};
             {#{maxUnackedRecords := PFmaxUnackedRecords}, _} ->
                 S4#{maxUnackedRecords => PFmaxUnackedRecords};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{offset := NFoffset}} -> S5#{offset => NFoffset};
        {#{offset := PFoffset}, _} -> S5#{offset => PFoffset};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_delete_subscription_request/3}).
merge_msg_delete_subscription_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{subscriptionId := NFsubscriptionId}} ->
                 S1#{subscriptionId => NFsubscriptionId};
             {#{subscriptionId := PFsubscriptionId}, _} ->
                 S1#{subscriptionId => PFsubscriptionId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{force := NFforce}} -> S2#{force => NFforce};
        {#{force := PFforce}, _} -> S2#{force => PFforce};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_check_subscription_exist_request/3}).
merge_msg_check_subscription_exist_request(PMsg, NMsg,
                                           _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{subscriptionId := NFsubscriptionId}} ->
            S1#{subscriptionId => NFsubscriptionId};
        {#{subscriptionId := PFsubscriptionId}, _} ->
            S1#{subscriptionId => PFsubscriptionId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_check_subscription_exist_response/3}).
merge_msg_check_subscription_exist_response(PMsg, NMsg,
                                            _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{exists := NFexists}} -> S1#{exists => NFexists};
        {#{exists := PFexists}, _} -> S1#{exists => PFexists};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_streaming_fetch_request/3}).
merge_msg_streaming_fetch_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{subscriptionId := NFsubscriptionId}} ->
                 S1#{subscriptionId => NFsubscriptionId};
             {#{subscriptionId := PFsubscriptionId}, _} ->
                 S1#{subscriptionId => PFsubscriptionId};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{consumerName := NFconsumerName}} ->
                 S2#{consumerName => NFconsumerName};
             {#{consumerName := PFconsumerName}, _} ->
                 S2#{consumerName => PFconsumerName};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{ackIds := PFackIds}, #{ackIds := NFackIds}} ->
            S3#{ackIds =>
                    'erlang_++'(PFackIds, NFackIds, TrUserData)};
        {_, #{ackIds := NFackIds}} -> S3#{ackIds => NFackIds};
        {#{ackIds := PFackIds}, _} -> S3#{ackIds => PFackIds};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_streaming_fetch_response/3}).
merge_msg_streaming_fetch_response(PMsg, NMsg,
                                   TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{receivedRecords := PFreceivedRecords},
         #{receivedRecords := NFreceivedRecords}} ->
            S1#{receivedRecords =>
                    'erlang_++'(PFreceivedRecords,
                                NFreceivedRecords,
                                TrUserData)};
        {_, #{receivedRecords := NFreceivedRecords}} ->
            S1#{receivedRecords => NFreceivedRecords};
        {#{receivedRecords := PFreceivedRecords}, _} ->
            S1#{receivedRecords => PFreceivedRecords};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_received_record/3}).
merge_msg_received_record(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{recordId := PFrecordId},
              #{recordId := NFrecordId}} ->
                 S1#{recordId =>
                         merge_msg_record_id(PFrecordId,
                                             NFrecordId,
                                             TrUserData)};
             {_, #{recordId := NFrecordId}} ->
                 S1#{recordId => NFrecordId};
             {#{recordId := PFrecordId}, _} ->
                 S1#{recordId => PFrecordId};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{record := NFrecord}} -> S2#{record => NFrecord};
        {#{record := PFrecord}, _} -> S2#{record => PFrecord};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_delete_stream_request/3}).
merge_msg_delete_stream_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ignoreNonExist := NFignoreNonExist}} ->
                 S2#{ignoreNonExist => NFignoreNonExist};
             {#{ignoreNonExist := PFignoreNonExist}, _} ->
                 S2#{ignoreNonExist => PFignoreNonExist};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{force := NFforce}} -> S3#{force => NFforce};
        {#{force := PFforce}, _} -> S3#{force => PFforce};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_list_streams_response/3}).
merge_msg_list_streams_response(PMsg, NMsg,
                                TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{streams := PFstreams}, #{streams := NFstreams}} ->
            S1#{streams =>
                    'erlang_++'(PFstreams, NFstreams, TrUserData)};
        {_, #{streams := NFstreams}} ->
            S1#{streams => NFstreams};
        {#{streams := PFstreams}, _} ->
            S1#{streams => PFstreams};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_streams_request/3}).
merge_msg_list_streams_request(_Prev, New,
                               _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_subscriptions_request/3}).
merge_msg_list_subscriptions_request(_Prev, New,
                                     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_subscriptions_response/3}).
merge_msg_list_subscriptions_response(PMsg, NMsg,
                                      TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{subscription := PFsubscription},
         #{subscription := NFsubscription}} ->
            S1#{subscription =>
                    'erlang_++'(PFsubscription,
                                NFsubscription,
                                TrUserData)};
        {_, #{subscription := NFsubscription}} ->
            S1#{subscription => NFsubscription};
        {#{subscription := PFsubscription}, _} ->
            S1#{subscription => PFsubscription};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_stream/3}).
merge_msg_stream(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{replicationFactor := NFreplicationFactor}} ->
                 S2#{replicationFactor => NFreplicationFactor};
             {#{replicationFactor := PFreplicationFactor}, _} ->
                 S2#{replicationFactor => PFreplicationFactor};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{backlogDuration := NFbacklogDuration}} ->
                 S3#{backlogDuration => NFbacklogDuration};
             {#{backlogDuration := PFbacklogDuration}, _} ->
                 S3#{backlogDuration => PFbacklogDuration};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{shardCount := NFshardCount}} ->
            S4#{shardCount => NFshardCount};
        {#{shardCount := PFshardCount}, _} ->
            S4#{shardCount => PFshardCount};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_h_stream_record_batch/3}).
merge_msg_h_stream_record_batch(PMsg, NMsg,
                                TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{batch := PFbatch}, #{batch := NFbatch}} ->
            S1#{batch => 'erlang_++'(PFbatch, NFbatch, TrUserData)};
        {_, #{batch := NFbatch}} -> S1#{batch => NFbatch};
        {#{batch := PFbatch}, _} -> S1#{batch => PFbatch};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_h_stream_record/3}).
merge_msg_h_stream_record(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{header := PFheader}, #{header := NFheader}} ->
                 S1#{header =>
                         merge_msg_h_stream_record_header(PFheader,
                                                          NFheader,
                                                          TrUserData)};
             {_, #{header := NFheader}} -> S1#{header => NFheader};
             {#{header := PFheader}, _} -> S1#{header => PFheader};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} ->
            S2#{payload => NFpayload};
        {#{payload := PFpayload}, _} ->
            S2#{payload => PFpayload};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_h_stream_record_header/3}).
merge_msg_h_stream_record_header(PMsg, NMsg,
                                 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{flag := NFflag}} -> S1#{flag => NFflag};
             {#{flag := PFflag}, _} -> S1#{flag => PFflag};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{attributes := PFattributes},
              #{attributes := NFattributes}} ->
                 S2#{attributes =>
                         'tr_merge_h_stream_record_header.attributes'(PFattributes,
                                                                      NFattributes,
                                                                      TrUserData)};
             {_, #{attributes := NFattributes}} ->
                 S2#{attributes => NFattributes};
             {#{attributes := PFattributes}, _} ->
                 S2#{attributes => PFattributes};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{publish_time := PFpublish_time},
              #{publish_time := NFpublish_time}} ->
                 S3#{publish_time =>
                         merge_msg_timestamp(PFpublish_time,
                                             NFpublish_time,
                                             TrUserData)};
             {_, #{publish_time := NFpublish_time}} ->
                 S3#{publish_time => NFpublish_time};
             {#{publish_time := PFpublish_time}, _} ->
                 S3#{publish_time => PFpublish_time};
             {_, _} -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{key := NFkey}} -> S4#{key => NFkey};
        {#{key := PFkey}, _} -> S4#{key => PFkey};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_record_id/3}).
merge_msg_record_id(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S1#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S1#{shardId => PFshardId};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{batchId := NFbatchId}} ->
                 S2#{batchId => NFbatchId};
             {#{batchId := PFbatchId}, _} ->
                 S2#{batchId => PFbatchId};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{batchIndex := NFbatchIndex}} ->
            S3#{batchIndex => NFbatchIndex};
        {#{batchIndex := PFbatchIndex}, _} ->
            S3#{batchIndex => PFbatchIndex};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_shard/3}).
merge_msg_shard(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S2#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S2#{shardId => PFshardId};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{startHashRangeKey := NFstartHashRangeKey}} ->
                 S3#{startHashRangeKey => NFstartHashRangeKey};
             {#{startHashRangeKey := PFstartHashRangeKey}, _} ->
                 S3#{startHashRangeKey => PFstartHashRangeKey};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{endHashRangeKey := NFendHashRangeKey}} ->
                 S4#{endHashRangeKey => NFendHashRangeKey};
             {#{endHashRangeKey := PFendHashRangeKey}, _} ->
                 S4#{endHashRangeKey => PFendHashRangeKey};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{epoch := NFepoch}} -> S5#{epoch => NFepoch};
             {#{epoch := PFepoch}, _} -> S5#{epoch => PFepoch};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{isActive := NFisActive}} ->
            S6#{isActive => NFisActive};
        {#{isActive := PFisActive}, _} ->
            S6#{isActive => PFisActive};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_list_shards_request/3}).
merge_msg_list_shards_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{streamName := NFstreamName}} ->
            S1#{streamName => NFstreamName};
        {#{streamName := PFstreamName}, _} ->
            S1#{streamName => PFstreamName};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_shards_response/3}).
merge_msg_list_shards_response(PMsg, NMsg,
                               TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{shards := PFshards}, #{shards := NFshards}} ->
            S1#{shards =>
                    'erlang_++'(PFshards, NFshards, TrUserData)};
        {_, #{shards := NFshards}} -> S1#{shards => NFshards};
        {#{shards := PFshards}, _} -> S1#{shards => PFshards};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_create_shard_reader_request/3}).
merge_msg_create_shard_reader_request(PMsg, NMsg,
                                      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S2#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S2#{shardId => PFshardId};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{shardOffset := PFshardOffset},
              #{shardOffset := NFshardOffset}} ->
                 S3#{shardOffset =>
                         merge_msg_shard_offset(PFshardOffset,
                                                NFshardOffset,
                                                TrUserData)};
             {_, #{shardOffset := NFshardOffset}} ->
                 S3#{shardOffset => NFshardOffset};
             {#{shardOffset := PFshardOffset}, _} ->
                 S3#{shardOffset => PFshardOffset};
             {_, _} -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{readerId := NFreaderId}} ->
                 S4#{readerId => NFreaderId};
             {#{readerId := PFreaderId}, _} ->
                 S4#{readerId => PFreaderId};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{timeout := NFtimeout}} ->
            S5#{timeout => NFtimeout};
        {#{timeout := PFtimeout}, _} ->
            S5#{timeout => PFtimeout};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_create_shard_reader_response/3}).
merge_msg_create_shard_reader_response(PMsg, NMsg,
                                       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S1#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S1#{streamName => PFstreamName};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S2#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S2#{shardId => PFshardId};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{shardOffset := PFshardOffset},
              #{shardOffset := NFshardOffset}} ->
                 S3#{shardOffset =>
                         merge_msg_shard_offset(PFshardOffset,
                                                NFshardOffset,
                                                TrUserData)};
             {_, #{shardOffset := NFshardOffset}} ->
                 S3#{shardOffset => NFshardOffset};
             {#{shardOffset := PFshardOffset}, _} ->
                 S3#{shardOffset => PFshardOffset};
             {_, _} -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{readerId := NFreaderId}} ->
                 S4#{readerId => NFreaderId};
             {#{readerId := PFreaderId}, _} ->
                 S4#{readerId => PFreaderId};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{timeout := NFtimeout}} ->
            S5#{timeout => NFtimeout};
        {#{timeout := PFtimeout}, _} ->
            S5#{timeout => PFtimeout};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_read_shard_request/3}).
merge_msg_read_shard_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{readerId := NFreaderId}} ->
                 S1#{readerId => NFreaderId};
             {#{readerId := PFreaderId}, _} ->
                 S1#{readerId => PFreaderId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{maxRecords := NFmaxRecords}} ->
            S2#{maxRecords => NFmaxRecords};
        {#{maxRecords := PFmaxRecords}, _} ->
            S2#{maxRecords => PFmaxRecords};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_delete_shard_reader_request/3}).
merge_msg_delete_shard_reader_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{readerId := NFreaderId}} ->
            S1#{readerId => NFreaderId};
        {#{readerId := PFreaderId}, _} ->
            S1#{readerId => PFreaderId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_read_shard_response/3}).
merge_msg_read_shard_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{receivedRecords := PFreceivedRecords},
         #{receivedRecords := NFreceivedRecords}} ->
            S1#{receivedRecords =>
                    'erlang_++'(PFreceivedRecords,
                                NFreceivedRecords,
                                TrUserData)};
        {_, #{receivedRecords := NFreceivedRecords}} ->
            S1#{receivedRecords => NFreceivedRecords};
        {#{receivedRecords := PFreceivedRecords}, _} ->
            S1#{receivedRecords => PFreceivedRecords};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_terminate_queries_request/3}).
merge_msg_terminate_queries_request(PMsg, NMsg,
                                    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{queryId := PFqueryId}, #{queryId := NFqueryId}} ->
                 S1#{queryId =>
                         'erlang_++'(PFqueryId, NFqueryId, TrUserData)};
             {_, #{queryId := NFqueryId}} ->
                 S1#{queryId => NFqueryId};
             {#{queryId := PFqueryId}, _} ->
                 S1#{queryId => PFqueryId};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{all := NFall}} -> S2#{all => NFall};
        {#{all := PFall}, _} -> S2#{all => PFall};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_terminate_queries_response/3}).
merge_msg_terminate_queries_response(PMsg, NMsg,
                                     TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{queryId := PFqueryId}, #{queryId := NFqueryId}} ->
            S1#{queryId =>
                    'erlang_++'(PFqueryId, NFqueryId, TrUserData)};
        {_, #{queryId := NFqueryId}} ->
            S1#{queryId => NFqueryId};
        {#{queryId := PFqueryId}, _} ->
            S1#{queryId => PFqueryId};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_queries_request/3}).
merge_msg_list_queries_request(_Prev, New,
                               _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_queries_response/3}).
merge_msg_list_queries_response(PMsg, NMsg,
                                TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{queries := PFqueries}, #{queries := NFqueries}} ->
            S1#{queries =>
                    'erlang_++'(PFqueries, NFqueries, TrUserData)};
        {_, #{queries := NFqueries}} ->
            S1#{queries => NFqueries};
        {#{queries := PFqueries}, _} ->
            S1#{queries => PFqueries};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_query_request/3}).
merge_msg_get_query_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_query/3}).
merge_msg_query(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{status := NFstatus}} -> S2#{status => NFstatus};
             {#{status := PFstatus}, _} -> S2#{status => PFstatus};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{createdTime := NFcreatedTime}} ->
                 S3#{createdTime => NFcreatedTime};
             {#{createdTime := PFcreatedTime}, _} ->
                 S3#{createdTime => PFcreatedTime};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{queryText := NFqueryText}} ->
            S4#{queryText => NFqueryText};
        {#{queryText := PFqueryText}, _} ->
            S4#{queryText => PFqueryText};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_delete_query_request/3}).
merge_msg_delete_query_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_query_response/3}).
merge_msg_delete_query_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{success := NFsuccess}} ->
            S1#{success => NFsuccess};
        {#{success := PFsuccess}, _} ->
            S1#{success => PFsuccess};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_restart_query_request/3}).
merge_msg_restart_query_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_restart_query_response/3}).
merge_msg_restart_query_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{success := NFsuccess}} ->
            S1#{success => NFsuccess};
        {#{success := PFsuccess}, _} ->
            S1#{success => PFsuccess};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_create_connector_request/3}).
merge_msg_create_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{sql := NFsql}} -> S1#{sql => NFsql};
        {#{sql := PFsql}, _} -> S1#{sql => PFsql};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_connectors_request/3}).
merge_msg_list_connectors_request(_Prev, New,
                                  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_connectors_response/3}).
merge_msg_list_connectors_response(PMsg, NMsg,
                                   TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{connectors := PFconnectors},
         #{connectors := NFconnectors}} ->
            S1#{connectors =>
                    'erlang_++'(PFconnectors, NFconnectors, TrUserData)};
        {_, #{connectors := NFconnectors}} ->
            S1#{connectors => NFconnectors};
        {#{connectors := PFconnectors}, _} ->
            S1#{connectors => PFconnectors};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_connector_request/3}).
merge_msg_get_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_connector/3}).
merge_msg_connector(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{info := PFinfo}, #{info := NFinfo}} ->
            S1#{info =>
                    merge_msg_struct(PFinfo, NFinfo, TrUserData)};
        {_, #{info := NFinfo}} -> S1#{info => NFinfo};
        {#{info := PFinfo}, _} -> S1#{info => PFinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_connector_request/3}).
merge_msg_delete_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_pause_connector_request/3}).
merge_msg_pause_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_resume_connector_request/3}).
merge_msg_resume_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_view_request/3}).
merge_msg_get_view_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{viewId := NFviewId}} -> S1#{viewId => NFviewId};
        {#{viewId := PFviewId}, _} -> S1#{viewId => PFviewId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_view_request/3}).
merge_msg_delete_view_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{viewId := NFviewId}} -> S1#{viewId => NFviewId};
             {#{viewId := PFviewId}, _} -> S1#{viewId => PFviewId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{ignoreNonExist := NFignoreNonExist}} ->
            S2#{ignoreNonExist => NFignoreNonExist};
        {#{ignoreNonExist := PFignoreNonExist}, _} ->
            S2#{ignoreNonExist => PFignoreNonExist};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_list_views_request/3}).
merge_msg_list_views_request(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_views_response/3}).
merge_msg_list_views_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{views := PFviews}, #{views := NFviews}} ->
            S1#{views => 'erlang_++'(PFviews, NFviews, TrUserData)};
        {_, #{views := NFviews}} -> S1#{views => NFviews};
        {#{views := PFviews}, _} -> S1#{views => PFviews};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_view/3}).
merge_msg_view(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{viewId := NFviewId}} -> S1#{viewId => NFviewId};
             {#{viewId := PFviewId}, _} -> S1#{viewId => PFviewId};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{status := NFstatus}} -> S2#{status => NFstatus};
             {#{status := PFstatus}, _} -> S2#{status => PFstatus};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{createdTime := NFcreatedTime}} ->
                 S3#{createdTime => NFcreatedTime};
             {#{createdTime := PFcreatedTime}, _} ->
                 S3#{createdTime => PFcreatedTime};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{sql := NFsql}} -> S4#{sql => NFsql};
             {#{sql := PFsql}, _} -> S4#{sql => PFsql};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {#{schema := PFschema}, #{schema := NFschema}} ->
            S5#{schema =>
                    'erlang_++'(PFschema, NFschema, TrUserData)};
        {_, #{schema := NFschema}} -> S5#{schema => NFschema};
        {#{schema := PFschema}, _} -> S5#{schema => PFschema};
        {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_get_node_request/3}).
merge_msg_get_node_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_nodes_request/3}).
merge_msg_list_nodes_request(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_list_nodes_response/3}).
merge_msg_list_nodes_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{nodes := PFnodes}, #{nodes := NFnodes}} ->
            S1#{nodes => 'erlang_++'(PFnodes, NFnodes, TrUserData)};
        {_, #{nodes := NFnodes}} -> S1#{nodes => NFnodes};
        {#{nodes := PFnodes}, _} -> S1#{nodes => PFnodes};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_node/3}).
merge_msg_node(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{roles := PFroles}, #{roles := NFroles}} ->
                 S2#{roles => 'erlang_++'(PFroles, NFroles, TrUserData)};
             {_, #{roles := NFroles}} -> S2#{roles => NFroles};
             {#{roles := PFroles}, _} -> S2#{roles => PFroles};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} ->
                 S3#{address => NFaddress};
             {#{address := PFaddress}, _} ->
                 S3#{address => PFaddress};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{status := NFstatus}} -> S4#{status => NFstatus};
        {#{status := PFstatus}, _} -> S4#{status => PFstatus};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_stats_interval_vals/3}).
merge_msg_stats_interval_vals(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{intervals := PFintervals},
         #{intervals := NFintervals}} ->
            S1#{intervals =>
                    'erlang_++'(PFintervals, NFintervals, TrUserData)};
        {_, #{intervals := NFintervals}} ->
            S1#{intervals => NFintervals};
        {#{intervals := PFintervals}, _} ->
            S1#{intervals => PFintervals};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_stats_double_vals/3}).
merge_msg_stats_double_vals(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{vals := PFvals}, #{vals := NFvals}} ->
            S1#{vals => 'erlang_++'(PFvals, NFvals, TrUserData)};
        {_, #{vals := NFvals}} -> S1#{vals => NFvals};
        {#{vals := PFvals}, _} -> S1#{vals => PFvals};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_admin_command_request/3}).
merge_msg_admin_command_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{command := NFcommand}} ->
            S1#{command => NFcommand};
        {#{command := PFcommand}, _} ->
            S1#{command => PFcommand};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_admin_command_response/3}).
merge_msg_admin_command_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{result := NFresult}} -> S1#{result => NFresult};
        {#{result := PFresult}, _} -> S1#{result => PFresult};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_per_stream_time_series_stats_request/3}).
merge_msg_per_stream_time_series_stats_request(PMsg,
                                               NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{method := NFmethod}} -> S1#{method => NFmethod};
             {#{method := PFmethod}, _} -> S1#{method => PFmethod};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{streamName := NFstreamName}} ->
                 S2#{streamName => NFstreamName};
             {#{streamName := PFstreamName}, _} ->
                 S2#{streamName => PFstreamName};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{intervals := PFintervals},
         #{intervals := NFintervals}} ->
            S3#{intervals =>
                    merge_msg_stats_interval_vals(PFintervals,
                                                  NFintervals,
                                                  TrUserData)};
        {_, #{intervals := NFintervals}} ->
            S3#{intervals => NFintervals};
        {#{intervals := PFintervals}, _} ->
            S3#{intervals => PFintervals};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_per_stream_time_series_stats_response/3}).
merge_msg_per_stream_time_series_stats_response(PMsg,
                                                NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{stats := PFstats}, #{stats := NFstats}} ->
            S1#{stats =>
                    merge_msg_stats_double_vals(PFstats,
                                                NFstats,
                                                TrUserData)};
        {_, #{stats := NFstats}} -> S1#{stats => NFstats};
        {#{stats := PFstats}, _} -> S1#{stats => PFstats};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_per_stream_time_series_stats_all_response/3}).
merge_msg_per_stream_time_series_stats_all_response(PMsg,
                                                    NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{stats := PFstats}, #{stats := NFstats}} ->
            S1#{stats =>
                    'tr_merge_per_stream_time_series_stats_all_response.stats'(PFstats,
                                                                               NFstats,
                                                                               TrUserData)};
        {_, #{stats := NFstats}} -> S1#{stats => NFstats};
        {#{stats := PFstats}, _} -> S1#{stats => PFstats};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_per_stream_time_series_stats_all_request/3}).
merge_msg_per_stream_time_series_stats_all_request(PMsg,
                                                   NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{method := NFmethod}} -> S1#{method => NFmethod};
             {#{method := PFmethod}, _} -> S1#{method => PFmethod};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{intervals := PFintervals},
         #{intervals := NFintervals}} ->
            S2#{intervals =>
                    merge_msg_stats_interval_vals(PFintervals,
                                                  NFintervals,
                                                  TrUserData)};
        {_, #{intervals := NFintervals}} ->
            S2#{intervals => NFintervals};
        {#{intervals := PFintervals}, _} ->
            S2#{intervals => PFintervals};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_describe_cluster_response/3}).
merge_msg_describe_cluster_response(PMsg, NMsg,
                                    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{protocolVersion := NFprotocolVersion}} ->
                 S1#{protocolVersion => NFprotocolVersion};
             {#{protocolVersion := PFprotocolVersion}, _} ->
                 S1#{protocolVersion => PFprotocolVersion};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{serverVersion := NFserverVersion}} ->
                 S2#{serverVersion => NFserverVersion};
             {#{serverVersion := PFserverVersion}, _} ->
                 S2#{serverVersion => PFserverVersion};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{serverNodes := PFserverNodes},
              #{serverNodes := NFserverNodes}} ->
                 S3#{serverNodes =>
                         'erlang_++'(PFserverNodes, NFserverNodes, TrUserData)};
             {_, #{serverNodes := NFserverNodes}} ->
                 S3#{serverNodes => NFserverNodes};
             {#{serverNodes := PFserverNodes}, _} ->
                 S3#{serverNodes => PFserverNodes};
             {_, _} -> S3
         end,
    case {PMsg, NMsg} of
        {#{serverNodesStatus := PFserverNodesStatus},
         #{serverNodesStatus := NFserverNodesStatus}} ->
            S4#{serverNodesStatus =>
                    'erlang_++'(PFserverNodesStatus,
                                NFserverNodesStatus,
                                TrUserData)};
        {_, #{serverNodesStatus := NFserverNodesStatus}} ->
            S4#{serverNodesStatus => NFserverNodesStatus};
        {#{serverNodesStatus := PFserverNodesStatus}, _} ->
            S4#{serverNodesStatus => PFserverNodesStatus};
        {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_server_node/3}).
merge_msg_server_node(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{host := NFhost}} -> S2#{host => NFhost};
             {#{host := PFhost}, _} -> S2#{host => PFhost};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{port := NFport}} -> S3#{port => NFport};
        {#{port := PFport}, _} -> S3#{port => PFport};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_server_node_status/3}).
merge_msg_server_node_status(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{node := PFnode}, #{node := NFnode}} ->
                 S1#{node =>
                         merge_msg_server_node(PFnode, NFnode, TrUserData)};
             {_, #{node := NFnode}} -> S1#{node => NFnode};
             {#{node := PFnode}, _} -> S1#{node => PFnode};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{state := NFstate}} -> S2#{state => NFstate};
        {#{state := PFstate}, _} -> S2#{state => PFstate};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_lookup_shard_request/3}).
merge_msg_lookup_shard_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{shardId := NFshardId}} ->
            S1#{shardId => NFshardId};
        {#{shardId := PFshardId}, _} ->
            S1#{shardId => PFshardId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_lookup_shard_response/3}).
merge_msg_lookup_shard_response(PMsg, NMsg,
                                TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{shardId := NFshardId}} ->
                 S1#{shardId => NFshardId};
             {#{shardId := PFshardId}, _} ->
                 S1#{shardId => PFshardId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{serverNode := PFserverNode},
         #{serverNode := NFserverNode}} ->
            S2#{serverNode =>
                    merge_msg_server_node(PFserverNode,
                                          NFserverNode,
                                          TrUserData)};
        {_, #{serverNode := NFserverNode}} ->
            S2#{serverNode => NFserverNode};
        {#{serverNode := PFserverNode}, _} ->
            S2#{serverNode => PFserverNode};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_lookup_subscription_request/3}).
merge_msg_lookup_subscription_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{subscriptionId := NFsubscriptionId}} ->
            S1#{subscriptionId => NFsubscriptionId};
        {#{subscriptionId := PFsubscriptionId}, _} ->
            S1#{subscriptionId => PFsubscriptionId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_lookup_subscription_response/3}).
merge_msg_lookup_subscription_response(PMsg, NMsg,
                                       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{subscriptionId := NFsubscriptionId}} ->
                 S1#{subscriptionId => NFsubscriptionId};
             {#{subscriptionId := PFsubscriptionId}, _} ->
                 S1#{subscriptionId => PFsubscriptionId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{serverNode := PFserverNode},
         #{serverNode := NFserverNode}} ->
            S2#{serverNode =>
                    merge_msg_server_node(PFserverNode,
                                          NFserverNode,
                                          TrUserData)};
        {_, #{serverNode := NFserverNode}} ->
            S2#{serverNode => NFserverNode};
        {#{serverNode := PFserverNode}, _} ->
            S2#{serverNode => PFserverNode};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_lookup_connector_request/3}).
merge_msg_lookup_connector_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_lookup_connector_response/3}).
merge_msg_lookup_connector_response(PMsg, NMsg,
                                    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{serverNode := PFserverNode},
         #{serverNode := NFserverNode}} ->
            S2#{serverNode =>
                    merge_msg_server_node(PFserverNode,
                                          NFserverNode,
                                          TrUserData)};
        {_, #{serverNode := NFserverNode}} ->
            S2#{serverNode => NFserverNode};
        {#{serverNode := PFserverNode}, _} ->
            S2#{serverNode => PFserverNode};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_lookup_shard_reader_request/3}).
merge_msg_lookup_shard_reader_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{readerId := NFreaderId}} ->
            S1#{readerId => NFreaderId};
        {#{readerId := PFreaderId}, _} ->
            S1#{readerId => PFreaderId};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_lookup_shard_reader_response/3}).
merge_msg_lookup_shard_reader_response(PMsg, NMsg,
                                       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{readerId := NFreaderId}} ->
                 S1#{readerId => NFreaderId};
             {#{readerId := PFreaderId}, _} ->
                 S1#{readerId => PFreaderId};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{serverNode := PFserverNode},
         #{serverNode := NFserverNode}} ->
            S2#{serverNode =>
                    merge_msg_server_node(PFserverNode,
                                          NFserverNode,
                                          TrUserData)};
        {_, #{serverNode := NFserverNode}} ->
            S2#{serverNode => NFserverNode};
        {#{serverNode := PFserverNode}, _} ->
            S2#{serverNode => PFserverNode};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_struct/3}).
merge_msg_struct(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{fields := PFfields}, #{fields := NFfields}} ->
            S1#{fields =>
                    'tr_merge_struct.fields'(PFfields,
                                             NFfields,
                                             TrUserData)};
        {_, #{fields := NFfields}} -> S1#{fields => NFfields};
        {#{fields := PFfields}, _} -> S1#{fields => PFfields};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_value/3}).
merge_msg_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{kind := {struct_value, OPFkind}},
         #{kind := {struct_value, ONFkind}}} ->
            S1#{kind =>
                    {struct_value,
                     merge_msg_struct(OPFkind, ONFkind, TrUserData)}};
        {#{kind := {list_value, OPFkind}},
         #{kind := {list_value, ONFkind}}} ->
            S1#{kind =>
                    {list_value,
                     merge_msg_list_value(OPFkind, ONFkind, TrUserData)}};
        {_, #{kind := NFkind}} -> S1#{kind => NFkind};
        {#{kind := PFkind}, _} -> S1#{kind => PFkind};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_value/3}).
merge_msg_list_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{values := PFvalues}, #{values := NFvalues}} ->
            S1#{values =>
                    'erlang_++'(PFvalues, NFvalues, TrUserData)};
        {_, #{values := NFvalues}} -> S1#{values => NFvalues};
        {#{values := PFvalues}, _} -> S1#{values => PFvalues};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{seconds := NFseconds}} ->
                 S1#{seconds => NFseconds};
             {#{seconds := PFseconds}, _} ->
                 S1#{seconds => PFseconds};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
        {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_empty/3}).
merge_msg_empty(_Prev, New, _TrUserData) -> New.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        shard_offset ->
            v_msg_shard_offset(Msg, [MsgName], TrUserData);
        echo_request ->
            v_msg_echo_request(Msg, [MsgName], TrUserData);
        echo_response ->
            v_msg_echo_response(Msg, [MsgName], TrUserData);
        command_stream_task ->
            v_msg_command_stream_task(Msg, [MsgName], TrUserData);
        command_stream_task_response ->
            v_msg_command_stream_task_response(Msg,
                                               [MsgName],
                                               TrUserData);
        command_connect ->
            v_msg_command_connect(Msg, [MsgName], TrUserData);
        command_connected ->
            v_msg_command_connected(Msg, [MsgName], TrUserData);
        command_push_query ->
            v_msg_command_push_query(Msg, [MsgName], TrUserData);
        command_query ->
            v_msg_command_query(Msg, [MsgName], TrUserData);
        command_query_response ->
            v_msg_command_query_response(Msg,
                                         [MsgName],
                                         TrUserData);
        append_request ->
            v_msg_append_request(Msg, [MsgName], TrUserData);
        append_response ->
            v_msg_append_response(Msg, [MsgName], TrUserData);
        subscription ->
            v_msg_subscription(Msg, [MsgName], TrUserData);
        delete_subscription_request ->
            v_msg_delete_subscription_request(Msg,
                                              [MsgName],
                                              TrUserData);
        check_subscription_exist_request ->
            v_msg_check_subscription_exist_request(Msg,
                                                   [MsgName],
                                                   TrUserData);
        check_subscription_exist_response ->
            v_msg_check_subscription_exist_response(Msg,
                                                    [MsgName],
                                                    TrUserData);
        streaming_fetch_request ->
            v_msg_streaming_fetch_request(Msg,
                                          [MsgName],
                                          TrUserData);
        streaming_fetch_response ->
            v_msg_streaming_fetch_response(Msg,
                                           [MsgName],
                                           TrUserData);
        received_record ->
            v_msg_received_record(Msg, [MsgName], TrUserData);
        delete_stream_request ->
            v_msg_delete_stream_request(Msg, [MsgName], TrUserData);
        list_streams_response ->
            v_msg_list_streams_response(Msg, [MsgName], TrUserData);
        list_streams_request ->
            v_msg_list_streams_request(Msg, [MsgName], TrUserData);
        list_subscriptions_request ->
            v_msg_list_subscriptions_request(Msg,
                                             [MsgName],
                                             TrUserData);
        list_subscriptions_response ->
            v_msg_list_subscriptions_response(Msg,
                                              [MsgName],
                                              TrUserData);
        stream -> v_msg_stream(Msg, [MsgName], TrUserData);
        h_stream_record_batch ->
            v_msg_h_stream_record_batch(Msg, [MsgName], TrUserData);
        h_stream_record ->
            v_msg_h_stream_record(Msg, [MsgName], TrUserData);
        h_stream_record_header ->
            v_msg_h_stream_record_header(Msg,
                                         [MsgName],
                                         TrUserData);
        record_id ->
            v_msg_record_id(Msg, [MsgName], TrUserData);
        shard -> v_msg_shard(Msg, [MsgName], TrUserData);
        list_shards_request ->
            v_msg_list_shards_request(Msg, [MsgName], TrUserData);
        list_shards_response ->
            v_msg_list_shards_response(Msg, [MsgName], TrUserData);
        create_shard_reader_request ->
            v_msg_create_shard_reader_request(Msg,
                                              [MsgName],
                                              TrUserData);
        create_shard_reader_response ->
            v_msg_create_shard_reader_response(Msg,
                                               [MsgName],
                                               TrUserData);
        read_shard_request ->
            v_msg_read_shard_request(Msg, [MsgName], TrUserData);
        delete_shard_reader_request ->
            v_msg_delete_shard_reader_request(Msg,
                                              [MsgName],
                                              TrUserData);
        read_shard_response ->
            v_msg_read_shard_response(Msg, [MsgName], TrUserData);
        terminate_queries_request ->
            v_msg_terminate_queries_request(Msg,
                                            [MsgName],
                                            TrUserData);
        terminate_queries_response ->
            v_msg_terminate_queries_response(Msg,
                                             [MsgName],
                                             TrUserData);
        list_queries_request ->
            v_msg_list_queries_request(Msg, [MsgName], TrUserData);
        list_queries_response ->
            v_msg_list_queries_response(Msg, [MsgName], TrUserData);
        get_query_request ->
            v_msg_get_query_request(Msg, [MsgName], TrUserData);
        query -> v_msg_query(Msg, [MsgName], TrUserData);
        delete_query_request ->
            v_msg_delete_query_request(Msg, [MsgName], TrUserData);
        delete_query_response ->
            v_msg_delete_query_response(Msg, [MsgName], TrUserData);
        restart_query_request ->
            v_msg_restart_query_request(Msg, [MsgName], TrUserData);
        restart_query_response ->
            v_msg_restart_query_response(Msg,
                                         [MsgName],
                                         TrUserData);
        create_connector_request ->
            v_msg_create_connector_request(Msg,
                                           [MsgName],
                                           TrUserData);
        list_connectors_request ->
            v_msg_list_connectors_request(Msg,
                                          [MsgName],
                                          TrUserData);
        list_connectors_response ->
            v_msg_list_connectors_response(Msg,
                                           [MsgName],
                                           TrUserData);
        get_connector_request ->
            v_msg_get_connector_request(Msg, [MsgName], TrUserData);
        connector ->
            v_msg_connector(Msg, [MsgName], TrUserData);
        delete_connector_request ->
            v_msg_delete_connector_request(Msg,
                                           [MsgName],
                                           TrUserData);
        pause_connector_request ->
            v_msg_pause_connector_request(Msg,
                                          [MsgName],
                                          TrUserData);
        resume_connector_request ->
            v_msg_resume_connector_request(Msg,
                                           [MsgName],
                                           TrUserData);
        get_view_request ->
            v_msg_get_view_request(Msg, [MsgName], TrUserData);
        delete_view_request ->
            v_msg_delete_view_request(Msg, [MsgName], TrUserData);
        list_views_request ->
            v_msg_list_views_request(Msg, [MsgName], TrUserData);
        list_views_response ->
            v_msg_list_views_response(Msg, [MsgName], TrUserData);
        view -> v_msg_view(Msg, [MsgName], TrUserData);
        get_node_request ->
            v_msg_get_node_request(Msg, [MsgName], TrUserData);
        list_nodes_request ->
            v_msg_list_nodes_request(Msg, [MsgName], TrUserData);
        list_nodes_response ->
            v_msg_list_nodes_response(Msg, [MsgName], TrUserData);
        node -> v_msg_node(Msg, [MsgName], TrUserData);
        stats_interval_vals ->
            v_msg_stats_interval_vals(Msg, [MsgName], TrUserData);
        stats_double_vals ->
            v_msg_stats_double_vals(Msg, [MsgName], TrUserData);
        admin_command_request ->
            v_msg_admin_command_request(Msg, [MsgName], TrUserData);
        admin_command_response ->
            v_msg_admin_command_response(Msg,
                                         [MsgName],
                                         TrUserData);
        per_stream_time_series_stats_request ->
            v_msg_per_stream_time_series_stats_request(Msg,
                                                       [MsgName],
                                                       TrUserData);
        per_stream_time_series_stats_response ->
            v_msg_per_stream_time_series_stats_response(Msg,
                                                        [MsgName],
                                                        TrUserData);
        per_stream_time_series_stats_all_response ->
            v_msg_per_stream_time_series_stats_all_response(Msg,
                                                            [MsgName],
                                                            TrUserData);
        per_stream_time_series_stats_all_request ->
            v_msg_per_stream_time_series_stats_all_request(Msg,
                                                           [MsgName],
                                                           TrUserData);
        describe_cluster_response ->
            v_msg_describe_cluster_response(Msg,
                                            [MsgName],
                                            TrUserData);
        server_node ->
            v_msg_server_node(Msg, [MsgName], TrUserData);
        server_node_status ->
            v_msg_server_node_status(Msg, [MsgName], TrUserData);
        lookup_shard_request ->
            v_msg_lookup_shard_request(Msg, [MsgName], TrUserData);
        lookup_shard_response ->
            v_msg_lookup_shard_response(Msg, [MsgName], TrUserData);
        lookup_subscription_request ->
            v_msg_lookup_subscription_request(Msg,
                                              [MsgName],
                                              TrUserData);
        lookup_subscription_response ->
            v_msg_lookup_subscription_response(Msg,
                                               [MsgName],
                                               TrUserData);
        lookup_connector_request ->
            v_msg_lookup_connector_request(Msg,
                                           [MsgName],
                                           TrUserData);
        lookup_connector_response ->
            v_msg_lookup_connector_response(Msg,
                                            [MsgName],
                                            TrUserData);
        lookup_shard_reader_request ->
            v_msg_lookup_shard_reader_request(Msg,
                                              [MsgName],
                                              TrUserData);
        lookup_shard_reader_response ->
            v_msg_lookup_shard_reader_response(Msg,
                                               [MsgName],
                                               TrUserData);
        struct -> v_msg_struct(Msg, [MsgName], TrUserData);
        value -> v_msg_value(Msg, [MsgName], TrUserData);
        list_value ->
            v_msg_list_value(Msg, [MsgName], TrUserData);
        timestamp ->
            v_msg_timestamp(Msg, [MsgName], TrUserData);
        empty -> v_msg_empty(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_shard_offset/3}).
-dialyzer({nowarn_function,v_msg_shard_offset/3}).
v_msg_shard_offset(#{} = M, Path, TrUserData) ->
    case M of
        #{offset := {specialOffset, OF1}} ->
            'v_enum_hstream.server.SpecialOffset'(OF1,
                                                  [specialOffset, offset
                                                   | Path],
                                                  TrUserData);
        #{offset := {recordOffset, OF1}} ->
            v_msg_record_id(OF1,
                            [recordOffset, offset | Path],
                            TrUserData);
        #{offset := F1} ->
            mk_type_error(invalid_oneof, F1, [offset | Path]);
        _ -> ok
    end,
    lists:foreach(fun (offset) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_shard_offset(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   shard_offset},
                  M,
                  Path);
v_msg_shard_offset(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, shard_offset}, X, Path).

-compile({nowarn_unused_function,v_msg_echo_request/3}).
-dialyzer({nowarn_function,v_msg_echo_request/3}).
v_msg_echo_request(#{} = M, Path, TrUserData) ->
    case M of
        #{msg := F1} ->
            v_type_string(F1, [msg | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_echo_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   echo_request},
                  M,
                  Path);
v_msg_echo_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, echo_request}, X, Path).

-compile({nowarn_unused_function,v_msg_echo_response/3}).
-dialyzer({nowarn_function,v_msg_echo_response/3}).
v_msg_echo_response(#{} = M, Path, TrUserData) ->
    case M of
        #{msg := F1} ->
            v_type_string(F1, [msg | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_echo_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   echo_response},
                  M,
                  Path);
v_msg_echo_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, echo_response}, X, Path).

-compile({nowarn_unused_function,v_msg_command_stream_task/3}).
-dialyzer({nowarn_function,v_msg_command_stream_task/3}).
v_msg_command_stream_task(#{} = M, Path, TrUserData) ->
    case M of
        #{command_sql := F1} ->
            v_type_string(F1, [command_sql | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (command_sql) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_stream_task(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_stream_task},
                  M,
                  Path);
v_msg_command_stream_task(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_stream_task},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_command_stream_task_response/3}).
-dialyzer({nowarn_function,v_msg_command_stream_task_response/3}).
v_msg_command_stream_task_response(#{} = M, Path,
                                   TrUserData) ->
    case M of
        #{command_resp := F1} ->
            v_type_string(F1, [command_resp | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (command_resp) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_stream_task_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_stream_task_response},
                  M,
                  Path);
v_msg_command_stream_task_response(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   command_stream_task_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_command_connect/3}).
-dialyzer({nowarn_function,v_msg_command_connect/3}).
v_msg_command_connect(#{} = M, Path, TrUserData) ->
    case M of
        #{client_version := F1} ->
            v_type_string(F1, [client_version | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{protocol_version := F2} ->
            v_type_int32(F2, [protocol_version | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (client_version) -> ok;
                      (protocol_version) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_connect(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_connect},
                  M,
                  Path);
v_msg_command_connect(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_connect}, X, Path).

-compile({nowarn_unused_function,v_msg_command_connected/3}).
-dialyzer({nowarn_function,v_msg_command_connected/3}).
v_msg_command_connected(#{} = M, Path, TrUserData) ->
    case M of
        #{server_version := F1} ->
            v_type_string(F1, [server_version | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{protocol_version := F2} ->
            v_type_int32(F2, [protocol_version | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (server_version) -> ok;
                      (protocol_version) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_connected(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_connected},
                  M,
                  Path);
v_msg_command_connected(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_connected},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_command_push_query/3}).
-dialyzer({nowarn_function,v_msg_command_push_query/3}).
v_msg_command_push_query(#{} = M, Path, TrUserData) ->
    case M of
        #{query_text := F1} ->
            v_type_string(F1, [query_text | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (query_text) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_push_query(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_push_query},
                  M,
                  Path);
v_msg_command_push_query(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_push_query},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_command_query/3}).
-dialyzer({nowarn_function,v_msg_command_query/3}).
v_msg_command_query(#{} = M, Path, TrUserData) ->
    case M of
        #{stmt_text := F1} ->
            v_type_string(F1, [stmt_text | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (stmt_text) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_query(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_query},
                  M,
                  Path);
v_msg_command_query(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_query}, X, Path).

-compile({nowarn_unused_function,v_msg_command_query_response/3}).
-dialyzer({nowarn_function,v_msg_command_query_response/3}).
v_msg_command_query_response(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{result_set := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_struct(Elem, [result_set | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, struct}},
                                 F1,
                                 [result_set | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (result_set) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_query_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   command_query_response},
                  M,
                  Path);
v_msg_command_query_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, command_query_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_append_request/3}).
-dialyzer({nowarn_function,v_msg_append_request/3}).
v_msg_append_request(#{} = M, Path, TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardId := F2} ->
            v_type_uint64(F2, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{records := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_h_stream_record(Elem,
                                              [records | Path],
                                              TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, h_stream_record}},
                                 F3,
                                 [records | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (shardId) -> ok;
                      (records) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_append_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   append_request},
                  M,
                  Path);
v_msg_append_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, append_request}, X, Path).

-compile({nowarn_unused_function,v_msg_append_response/3}).
-dialyzer({nowarn_function,v_msg_append_response/3}).
v_msg_append_response(#{} = M, Path, TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardId := F2} ->
            v_type_uint64(F2, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{recordIds := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_record_id(Elem,
                                        [recordIds | Path],
                                        TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, record_id}},
                                 F3,
                                 [recordIds | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (shardId) -> ok;
                      (recordIds) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_append_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   append_response},
                  M,
                  Path);
v_msg_append_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, append_response}, X, Path).

-compile({nowarn_unused_function,v_msg_subscription/3}).
-dialyzer({nowarn_function,v_msg_subscription/3}).
v_msg_subscription(#{} = M, Path, TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{streamName := F2} ->
            v_type_string(F2, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ackTimeoutSeconds := F3} ->
            v_type_int32(F3,
                         [ackTimeoutSeconds | Path],
                         TrUserData);
        _ -> ok
    end,
    case M of
        #{maxUnackedRecords := F4} ->
            v_type_int32(F4,
                         [maxUnackedRecords | Path],
                         TrUserData);
        _ -> ok
    end,
    case M of
        #{offset := F5} ->
            'v_enum_hstream.server.SpecialOffset'(F5,
                                                  [offset | Path],
                                                  TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (streamName) -> ok;
                      (ackTimeoutSeconds) -> ok;
                      (maxUnackedRecords) -> ok;
                      (offset) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_subscription(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   subscription},
                  M,
                  Path);
v_msg_subscription(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, subscription}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_subscription_request/3}).
-dialyzer({nowarn_function,v_msg_delete_subscription_request/3}).
v_msg_delete_subscription_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{force := F2} ->
            v_type_bool(F2, [force | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (force) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_subscription_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_subscription_request},
                  M,
                  Path);
v_msg_delete_subscription_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   delete_subscription_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_check_subscription_exist_request/3}).
-dialyzer({nowarn_function,v_msg_check_subscription_exist_request/3}).
v_msg_check_subscription_exist_request(#{} = M, Path,
                                       TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_check_subscription_exist_request(M, Path,
                                       _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   check_subscription_exist_request},
                  M,
                  Path);
v_msg_check_subscription_exist_request(X, Path,
                                       _TrUserData) ->
    mk_type_error({expected_msg,
                   check_subscription_exist_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_check_subscription_exist_response/3}).
-dialyzer({nowarn_function,v_msg_check_subscription_exist_response/3}).
v_msg_check_subscription_exist_response(#{} = M, Path,
                                        TrUserData) ->
    case M of
        #{exists := F1} ->
            v_type_bool(F1, [exists | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (exists) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_check_subscription_exist_response(M, Path,
                                        _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   check_subscription_exist_response},
                  M,
                  Path);
v_msg_check_subscription_exist_response(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   check_subscription_exist_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_streaming_fetch_request/3}).
-dialyzer({nowarn_function,v_msg_streaming_fetch_request/3}).
v_msg_streaming_fetch_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{consumerName := F2} ->
            v_type_string(F2, [consumerName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ackIds := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_record_id(Elem, [ackIds | Path], TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, record_id}},
                                 F3,
                                 [ackIds | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (consumerName) -> ok;
                      (ackIds) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_streaming_fetch_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   streaming_fetch_request},
                  M,
                  Path);
v_msg_streaming_fetch_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, streaming_fetch_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_streaming_fetch_response/3}).
-dialyzer({nowarn_function,v_msg_streaming_fetch_response/3}).
v_msg_streaming_fetch_response(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{receivedRecords := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_received_record(Elem,
                                              [receivedRecords | Path],
                                              TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, received_record}},
                                 F1,
                                 [receivedRecords | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (receivedRecords) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_streaming_fetch_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   streaming_fetch_response},
                  M,
                  Path);
v_msg_streaming_fetch_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, streaming_fetch_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_received_record/3}).
-dialyzer({nowarn_function,v_msg_received_record/3}).
v_msg_received_record(#{} = M, Path, TrUserData) ->
    case M of
        #{recordId := F1} ->
            v_msg_record_id(F1, [recordId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{record := F2} ->
            v_type_bytes(F2, [record | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (recordId) -> ok;
                      (record) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_received_record(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   received_record},
                  M,
                  Path);
v_msg_received_record(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, received_record}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_stream_request/3}).
-dialyzer({nowarn_function,v_msg_delete_stream_request/3}).
v_msg_delete_stream_request(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ignoreNonExist := F2} ->
            v_type_bool(F2, [ignoreNonExist | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{force := F3} ->
            v_type_bool(F3, [force | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (ignoreNonExist) -> ok;
                      (force) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_stream_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_stream_request},
                  M,
                  Path);
v_msg_delete_stream_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_stream_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_streams_response/3}).
-dialyzer({nowarn_function,v_msg_list_streams_response/3}).
v_msg_list_streams_response(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{streams := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_stream(Elem, [streams | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, stream}},
                                 F1,
                                 [streams | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (streams) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_streams_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_streams_response},
                  M,
                  Path);
v_msg_list_streams_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_streams_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_streams_request/3}).
-dialyzer({nowarn_function,v_msg_list_streams_request/3}).
v_msg_list_streams_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_streams_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_streams_request},
                  M,
                  Path);
v_msg_list_streams_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_streams_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_subscriptions_request/3}).
-dialyzer({nowarn_function,v_msg_list_subscriptions_request/3}).
v_msg_list_subscriptions_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_subscriptions_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_subscriptions_request},
                  M,
                  Path);
v_msg_list_subscriptions_request(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   list_subscriptions_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_subscriptions_response/3}).
-dialyzer({nowarn_function,v_msg_list_subscriptions_response/3}).
v_msg_list_subscriptions_response(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{subscription := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_subscription(Elem,
                                           [subscription | Path],
                                           TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, subscription}},
                                 F1,
                                 [subscription | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (subscription) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_subscriptions_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_subscriptions_response},
                  M,
                  Path);
v_msg_list_subscriptions_response(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   list_subscriptions_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_stream/3}).
-dialyzer({nowarn_function,v_msg_stream/3}).
v_msg_stream(#{} = M, Path, TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{replicationFactor := F2} ->
            v_type_uint32(F2,
                          [replicationFactor | Path],
                          TrUserData);
        _ -> ok
    end,
    case M of
        #{backlogDuration := F3} ->
            v_type_uint32(F3, [backlogDuration | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardCount := F4} ->
            v_type_uint32(F4, [shardCount | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (replicationFactor) -> ok;
                      (backlogDuration) -> ok;
                      (shardCount) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_stream(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   stream},
                  M,
                  Path);
v_msg_stream(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stream}, X, Path).

-compile({nowarn_unused_function,v_msg_h_stream_record_batch/3}).
-dialyzer({nowarn_function,v_msg_h_stream_record_batch/3}).
v_msg_h_stream_record_batch(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{batch := F1} ->
            if is_list(F1) ->
                   _ = [v_type_bytes(Elem, [batch | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, bytes},
                                 F1,
                                 [batch | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (batch) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_h_stream_record_batch(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   h_stream_record_batch},
                  M,
                  Path);
v_msg_h_stream_record_batch(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, h_stream_record_batch},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_h_stream_record/3}).
-dialyzer({nowarn_function,v_msg_h_stream_record/3}).
v_msg_h_stream_record(#{} = M, Path, TrUserData) ->
    case M of
        #{header := F1} ->
            v_msg_h_stream_record_header(F1,
                                         [header | Path],
                                         TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F2} ->
            v_type_bytes(F2, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (header) -> ok;
                      (payload) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_h_stream_record(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   h_stream_record},
                  M,
                  Path);
v_msg_h_stream_record(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, h_stream_record}, X, Path).

-compile({nowarn_unused_function,v_msg_h_stream_record_header/3}).
-dialyzer({nowarn_function,v_msg_h_stream_record_header/3}).
v_msg_h_stream_record_header(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{flag := F1} ->
            'v_enum_h_stream_record_header.Flag'(F1,
                                                 [flag | Path],
                                                 TrUserData);
        _ -> ok
    end,
    case M of
        #{attributes := F2} ->
            'v_map<string,string>'(F2,
                                   [attributes | Path],
                                   TrUserData);
        _ -> ok
    end,
    case M of
        #{publish_time := F3} ->
            v_msg_timestamp(F3, [publish_time | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{key := F4} ->
            v_type_string(F4, [key | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (flag) -> ok;
                      (attributes) -> ok;
                      (publish_time) -> ok;
                      (key) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_h_stream_record_header(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   h_stream_record_header},
                  M,
                  Path);
v_msg_h_stream_record_header(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, h_stream_record_header},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_record_id/3}).
-dialyzer({nowarn_function,v_msg_record_id/3}).
v_msg_record_id(#{} = M, Path, TrUserData) ->
    case M of
        #{shardId := F1} ->
            v_type_uint64(F1, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{batchId := F2} ->
            v_type_uint64(F2, [batchId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{batchIndex := F3} ->
            v_type_uint32(F3, [batchIndex | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (shardId) -> ok;
                      (batchId) -> ok;
                      (batchIndex) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_record_id(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   record_id},
                  M,
                  Path);
v_msg_record_id(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, record_id}, X, Path).

-compile({nowarn_unused_function,v_msg_shard/3}).
-dialyzer({nowarn_function,v_msg_shard/3}).
v_msg_shard(#{} = M, Path, TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardId := F2} ->
            v_type_uint64(F2, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{startHashRangeKey := F3} ->
            v_type_string(F3,
                          [startHashRangeKey | Path],
                          TrUserData);
        _ -> ok
    end,
    case M of
        #{endHashRangeKey := F4} ->
            v_type_string(F4, [endHashRangeKey | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{epoch := F5} ->
            v_type_uint64(F5, [epoch | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{isActive := F6} ->
            v_type_bool(F6, [isActive | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (shardId) -> ok;
                      (startHashRangeKey) -> ok;
                      (endHashRangeKey) -> ok;
                      (epoch) -> ok;
                      (isActive) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_shard(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   shard},
                  M,
                  Path);
v_msg_shard(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, shard}, X, Path).

-compile({nowarn_unused_function,v_msg_list_shards_request/3}).
-dialyzer({nowarn_function,v_msg_list_shards_request/3}).
v_msg_list_shards_request(#{} = M, Path, TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_shards_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_shards_request},
                  M,
                  Path);
v_msg_list_shards_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_shards_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_shards_response/3}).
-dialyzer({nowarn_function,v_msg_list_shards_response/3}).
v_msg_list_shards_response(#{} = M, Path, TrUserData) ->
    case M of
        #{shards := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_shard(Elem, [shards | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, shard}},
                                 F1,
                                 [shards | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (shards) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_shards_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_shards_response},
                  M,
                  Path);
v_msg_list_shards_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_shards_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_create_shard_reader_request/3}).
-dialyzer({nowarn_function,v_msg_create_shard_reader_request/3}).
v_msg_create_shard_reader_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardId := F2} ->
            v_type_uint64(F2, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardOffset := F3} ->
            v_msg_shard_offset(F3,
                               [shardOffset | Path],
                               TrUserData);
        _ -> ok
    end,
    case M of
        #{readerId := F4} ->
            v_type_string(F4, [readerId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timeout := F5} ->
            v_type_uint32(F5, [timeout | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (shardId) -> ok;
                      (shardOffset) -> ok;
                      (readerId) -> ok;
                      (timeout) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_create_shard_reader_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   create_shard_reader_request},
                  M,
                  Path);
v_msg_create_shard_reader_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   create_shard_reader_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_create_shard_reader_response/3}).
-dialyzer({nowarn_function,v_msg_create_shard_reader_response/3}).
v_msg_create_shard_reader_response(#{} = M, Path,
                                   TrUserData) ->
    case M of
        #{streamName := F1} ->
            v_type_string(F1, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardId := F2} ->
            v_type_uint64(F2, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{shardOffset := F3} ->
            v_msg_shard_offset(F3,
                               [shardOffset | Path],
                               TrUserData);
        _ -> ok
    end,
    case M of
        #{readerId := F4} ->
            v_type_string(F4, [readerId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timeout := F5} ->
            v_type_uint32(F5, [timeout | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (streamName) -> ok;
                      (shardId) -> ok;
                      (shardOffset) -> ok;
                      (readerId) -> ok;
                      (timeout) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_create_shard_reader_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   create_shard_reader_response},
                  M,
                  Path);
v_msg_create_shard_reader_response(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   create_shard_reader_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_read_shard_request/3}).
-dialyzer({nowarn_function,v_msg_read_shard_request/3}).
v_msg_read_shard_request(#{} = M, Path, TrUserData) ->
    case M of
        #{readerId := F1} ->
            v_type_string(F1, [readerId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{maxRecords := F2} ->
            v_type_uint32(F2, [maxRecords | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (readerId) -> ok;
                      (maxRecords) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_read_shard_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   read_shard_request},
                  M,
                  Path);
v_msg_read_shard_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, read_shard_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_delete_shard_reader_request/3}).
-dialyzer({nowarn_function,v_msg_delete_shard_reader_request/3}).
v_msg_delete_shard_reader_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{readerId := F1} ->
            v_type_string(F1, [readerId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (readerId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_shard_reader_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_shard_reader_request},
                  M,
                  Path);
v_msg_delete_shard_reader_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   delete_shard_reader_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_read_shard_response/3}).
-dialyzer({nowarn_function,v_msg_read_shard_response/3}).
v_msg_read_shard_response(#{} = M, Path, TrUserData) ->
    case M of
        #{receivedRecords := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_received_record(Elem,
                                              [receivedRecords | Path],
                                              TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, received_record}},
                                 F1,
                                 [receivedRecords | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (receivedRecords) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_read_shard_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   read_shard_response},
                  M,
                  Path);
v_msg_read_shard_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, read_shard_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_terminate_queries_request/3}).
-dialyzer({nowarn_function,v_msg_terminate_queries_request/3}).
v_msg_terminate_queries_request(#{} = M, Path,
                                TrUserData) ->
    case M of
        #{queryId := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [queryId | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F1,
                                 [queryId | Path])
            end;
        _ -> ok
    end,
    case M of
        #{all := F2} ->
            v_type_bool(F2, [all | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (queryId) -> ok;
                      (all) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_terminate_queries_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   terminate_queries_request},
                  M,
                  Path);
v_msg_terminate_queries_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, terminate_queries_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_terminate_queries_response/3}).
-dialyzer({nowarn_function,v_msg_terminate_queries_response/3}).
v_msg_terminate_queries_response(#{} = M, Path,
                                 TrUserData) ->
    case M of
        #{queryId := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [queryId | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F1,
                                 [queryId | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (queryId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_terminate_queries_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   terminate_queries_response},
                  M,
                  Path);
v_msg_terminate_queries_response(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   terminate_queries_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_queries_request/3}).
-dialyzer({nowarn_function,v_msg_list_queries_request/3}).
v_msg_list_queries_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_queries_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_queries_request},
                  M,
                  Path);
v_msg_list_queries_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_queries_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_queries_response/3}).
-dialyzer({nowarn_function,v_msg_list_queries_response/3}).
v_msg_list_queries_response(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{queries := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_query(Elem, [queries | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, query}},
                                 F1,
                                 [queries | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (queries) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_queries_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_queries_response},
                  M,
                  Path);
v_msg_list_queries_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_queries_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_get_query_request/3}).
-dialyzer({nowarn_function,v_msg_get_query_request/3}).
v_msg_get_query_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_query_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   get_query_request},
                  M,
                  Path);
v_msg_get_query_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_query_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_query/3}).
-dialyzer({nowarn_function,v_msg_query/3}).
v_msg_query(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{status := F2} ->
            'v_enum_hstream.server.TaskStatusPB'(F2,
                                                 [status | Path],
                                                 TrUserData);
        _ -> ok
    end,
    case M of
        #{createdTime := F3} ->
            v_type_int64(F3, [createdTime | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{queryText := F4} ->
            v_type_string(F4, [queryText | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (status) -> ok;
                      (createdTime) -> ok;
                      (queryText) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_query(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   query},
                  M,
                  Path);
v_msg_query(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, query}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_query_request/3}).
-dialyzer({nowarn_function,v_msg_delete_query_request/3}).
v_msg_delete_query_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_query_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_query_request},
                  M,
                  Path);
v_msg_delete_query_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_query_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_delete_query_response/3}).
-dialyzer({nowarn_function,v_msg_delete_query_response/3}).
v_msg_delete_query_response(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{success := F1} ->
            v_type_bool(F1, [success | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_query_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_query_response},
                  M,
                  Path);
v_msg_delete_query_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_query_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_restart_query_request/3}).
-dialyzer({nowarn_function,v_msg_restart_query_request/3}).
v_msg_restart_query_request(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_restart_query_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   restart_query_request},
                  M,
                  Path);
v_msg_restart_query_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, restart_query_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_restart_query_response/3}).
-dialyzer({nowarn_function,v_msg_restart_query_response/3}).
v_msg_restart_query_response(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{success := F1} ->
            v_type_bool(F1, [success | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_restart_query_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   restart_query_response},
                  M,
                  Path);
v_msg_restart_query_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, restart_query_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_create_connector_request/3}).
-dialyzer({nowarn_function,v_msg_create_connector_request/3}).
v_msg_create_connector_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{sql := F1} ->
            v_type_string(F1, [sql | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (sql) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_create_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   create_connector_request},
                  M,
                  Path);
v_msg_create_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_connectors_request/3}).
-dialyzer({nowarn_function,v_msg_list_connectors_request/3}).
v_msg_list_connectors_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_connectors_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_connectors_request},
                  M,
                  Path);
v_msg_list_connectors_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_connectors_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_connectors_response/3}).
-dialyzer({nowarn_function,v_msg_list_connectors_response/3}).
v_msg_list_connectors_response(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{connectors := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_connector(Elem,
                                        [connectors | Path],
                                        TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, connector}},
                                 F1,
                                 [connectors | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (connectors) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_connectors_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_connectors_response},
                  M,
                  Path);
v_msg_list_connectors_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_connectors_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_get_connector_request/3}).
-dialyzer({nowarn_function,v_msg_get_connector_request/3}).
v_msg_get_connector_request(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   get_connector_request},
                  M,
                  Path);
v_msg_get_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_connector/3}).
-dialyzer({nowarn_function,v_msg_connector/3}).
v_msg_connector(#{} = M, Path, TrUserData) ->
    case M of
        #{info := F1} ->
            v_msg_struct(F1, [info | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (info) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_connector(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   connector},
                  M,
                  Path);
v_msg_connector(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, connector}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_connector_request/3}).
-dialyzer({nowarn_function,v_msg_delete_connector_request/3}).
v_msg_delete_connector_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_connector_request},
                  M,
                  Path);
v_msg_delete_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_pause_connector_request/3}).
-dialyzer({nowarn_function,v_msg_pause_connector_request/3}).
v_msg_pause_connector_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_pause_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   pause_connector_request},
                  M,
                  Path);
v_msg_pause_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, pause_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_resume_connector_request/3}).
-dialyzer({nowarn_function,v_msg_resume_connector_request/3}).
v_msg_resume_connector_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_resume_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   resume_connector_request},
                  M,
                  Path);
v_msg_resume_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, resume_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_get_view_request/3}).
-dialyzer({nowarn_function,v_msg_get_view_request/3}).
v_msg_get_view_request(#{} = M, Path, TrUserData) ->
    case M of
        #{viewId := F1} ->
            v_type_string(F1, [viewId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (viewId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_view_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   get_view_request},
                  M,
                  Path);
v_msg_get_view_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_view_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_delete_view_request/3}).
-dialyzer({nowarn_function,v_msg_delete_view_request/3}).
v_msg_delete_view_request(#{} = M, Path, TrUserData) ->
    case M of
        #{viewId := F1} ->
            v_type_string(F1, [viewId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ignoreNonExist := F2} ->
            v_type_bool(F2, [ignoreNonExist | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (viewId) -> ok;
                      (ignoreNonExist) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_view_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   delete_view_request},
                  M,
                  Path);
v_msg_delete_view_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_view_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_views_request/3}).
-dialyzer({nowarn_function,v_msg_list_views_request/3}).
v_msg_list_views_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_views_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_views_request},
                  M,
                  Path);
v_msg_list_views_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_views_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_views_response/3}).
-dialyzer({nowarn_function,v_msg_list_views_response/3}).
v_msg_list_views_response(#{} = M, Path, TrUserData) ->
    case M of
        #{views := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_view(Elem, [views | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, view}},
                                 F1,
                                 [views | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (views) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_views_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_views_response},
                  M,
                  Path);
v_msg_list_views_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_views_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_view/3}).
-dialyzer({nowarn_function,v_msg_view/3}).
v_msg_view(#{} = M, Path, TrUserData) ->
    case M of
        #{viewId := F1} ->
            v_type_string(F1, [viewId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{status := F2} ->
            'v_enum_hstream.server.TaskStatusPB'(F2,
                                                 [status | Path],
                                                 TrUserData);
        _ -> ok
    end,
    case M of
        #{createdTime := F3} ->
            v_type_int64(F3, [createdTime | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sql := F4} ->
            v_type_string(F4, [sql | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{schema := F5} ->
            if is_list(F5) ->
                   _ = [v_type_string(Elem, [schema | Path], TrUserData)
                        || Elem <- F5],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F5,
                                 [schema | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (viewId) -> ok;
                      (status) -> ok;
                      (createdTime) -> ok;
                      (sql) -> ok;
                      (schema) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_view(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   view},
                  M,
                  Path);
v_msg_view(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, view}, X, Path).

-compile({nowarn_unused_function,v_msg_get_node_request/3}).
-dialyzer({nowarn_function,v_msg_get_node_request/3}).
v_msg_get_node_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_int32(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_node_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   get_node_request},
                  M,
                  Path);
v_msg_get_node_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_node_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_nodes_request/3}).
-dialyzer({nowarn_function,v_msg_list_nodes_request/3}).
v_msg_list_nodes_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_nodes_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_nodes_request},
                  M,
                  Path);
v_msg_list_nodes_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_nodes_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_list_nodes_response/3}).
-dialyzer({nowarn_function,v_msg_list_nodes_response/3}).
v_msg_list_nodes_response(#{} = M, Path, TrUserData) ->
    case M of
        #{nodes := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_node(Elem, [nodes | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, node}},
                                 F1,
                                 [nodes | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (nodes) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_nodes_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_nodes_response},
                  M,
                  Path);
v_msg_list_nodes_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_nodes_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_node/3}).
-dialyzer({nowarn_function,v_msg_node/3}).
v_msg_node(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_int32(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{roles := F2} ->
            if is_list(F2) ->
                   _ = [v_type_int32(Elem, [roles | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, int32},
                                 F2,
                                 [roles | Path])
            end;
        _ -> ok
    end,
    case M of
        #{address := F3} ->
            v_type_string(F3, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{status := F4} ->
            v_type_string(F4, [status | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (roles) -> ok;
                      (address) -> ok;
                      (status) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_node(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   node},
                  M,
                  Path);
v_msg_node(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, node}, X, Path).

-compile({nowarn_unused_function,v_msg_stats_interval_vals/3}).
-dialyzer({nowarn_function,v_msg_stats_interval_vals/3}).
v_msg_stats_interval_vals(#{} = M, Path, TrUserData) ->
    case M of
        #{intervals := F1} ->
            if is_list(F1) ->
                   _ = [v_type_int32(Elem, [intervals | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, int32},
                                 F1,
                                 [intervals | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (intervals) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_stats_interval_vals(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   stats_interval_vals},
                  M,
                  Path);
v_msg_stats_interval_vals(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stats_interval_vals},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_stats_double_vals/3}).
-dialyzer({nowarn_function,v_msg_stats_double_vals/3}).
v_msg_stats_double_vals(#{} = M, Path, TrUserData) ->
    case M of
        #{vals := F1} ->
            if is_list(F1) ->
                   _ = [v_type_double(Elem, [vals | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, double},
                                 F1,
                                 [vals | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (vals) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_stats_double_vals(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   stats_double_vals},
                  M,
                  Path);
v_msg_stats_double_vals(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stats_double_vals},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_admin_command_request/3}).
-dialyzer({nowarn_function,v_msg_admin_command_request/3}).
v_msg_admin_command_request(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{command := F1} ->
            v_type_string(F1, [command | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (command) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_admin_command_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   admin_command_request},
                  M,
                  Path);
v_msg_admin_command_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, admin_command_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_admin_command_response/3}).
-dialyzer({nowarn_function,v_msg_admin_command_response/3}).
v_msg_admin_command_response(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{result := F1} ->
            v_type_string(F1, [result | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (result) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_admin_command_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   admin_command_response},
                  M,
                  Path);
v_msg_admin_command_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, admin_command_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_per_stream_time_series_stats_request/3}).
-dialyzer({nowarn_function,v_msg_per_stream_time_series_stats_request/3}).
v_msg_per_stream_time_series_stats_request(#{} = M,
                                           Path, TrUserData) ->
    case M of
        #{method := F1} ->
            v_type_string(F1, [method | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{streamName := F2} ->
            v_type_string(F2, [streamName | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{intervals := F3} ->
            v_msg_stats_interval_vals(F3,
                                      [intervals | Path],
                                      TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (method) -> ok;
                      (streamName) -> ok;
                      (intervals) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_per_stream_time_series_stats_request(M, Path,
                                           _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   per_stream_time_series_stats_request},
                  M,
                  Path);
v_msg_per_stream_time_series_stats_request(X, Path,
                                           _TrUserData) ->
    mk_type_error({expected_msg,
                   per_stream_time_series_stats_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_per_stream_time_series_stats_response/3}).
-dialyzer({nowarn_function,v_msg_per_stream_time_series_stats_response/3}).
v_msg_per_stream_time_series_stats_response(#{} = M,
                                            Path, TrUserData) ->
    case M of
        #{stats := F1} ->
            v_msg_stats_double_vals(F1, [stats | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (stats) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_per_stream_time_series_stats_response(M, Path,
                                            _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   per_stream_time_series_stats_response},
                  M,
                  Path);
v_msg_per_stream_time_series_stats_response(X, Path,
                                            _TrUserData) ->
    mk_type_error({expected_msg,
                   per_stream_time_series_stats_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_per_stream_time_series_stats_all_response/3}).
-dialyzer({nowarn_function,v_msg_per_stream_time_series_stats_all_response/3}).
v_msg_per_stream_time_series_stats_all_response(#{} = M,
                                                Path, TrUserData) ->
    case M of
        #{stats := F1} ->
            'v_map<string,stats_double_vals>'(F1,
                                              [stats | Path],
                                              TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (stats) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_per_stream_time_series_stats_all_response(M, Path,
                                                _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   per_stream_time_series_stats_all_response},
                  M,
                  Path);
v_msg_per_stream_time_series_stats_all_response(X, Path,
                                                _TrUserData) ->
    mk_type_error({expected_msg,
                   per_stream_time_series_stats_all_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_per_stream_time_series_stats_all_request/3}).
-dialyzer({nowarn_function,v_msg_per_stream_time_series_stats_all_request/3}).
v_msg_per_stream_time_series_stats_all_request(#{} = M,
                                               Path, TrUserData) ->
    case M of
        #{method := F1} ->
            v_type_string(F1, [method | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{intervals := F2} ->
            v_msg_stats_interval_vals(F2,
                                      [intervals | Path],
                                      TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (method) -> ok;
                      (intervals) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_per_stream_time_series_stats_all_request(M, Path,
                                               _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   per_stream_time_series_stats_all_request},
                  M,
                  Path);
v_msg_per_stream_time_series_stats_all_request(X, Path,
                                               _TrUserData) ->
    mk_type_error({expected_msg,
                   per_stream_time_series_stats_all_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_describe_cluster_response/3}).
-dialyzer({nowarn_function,v_msg_describe_cluster_response/3}).
v_msg_describe_cluster_response(#{} = M, Path,
                                TrUserData) ->
    case M of
        #{protocolVersion := F1} ->
            v_type_string(F1, [protocolVersion | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverVersion := F2} ->
            v_type_string(F2, [serverVersion | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverNodes := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_server_node(Elem,
                                          [serverNodes | Path],
                                          TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, server_node}},
                                 F3,
                                 [serverNodes | Path])
            end;
        _ -> ok
    end,
    case M of
        #{serverNodesStatus := F4} ->
            if is_list(F4) ->
                   _ = [v_msg_server_node_status(Elem,
                                                 [serverNodesStatus | Path],
                                                 TrUserData)
                        || Elem <- F4],
                   ok;
               true ->
                   mk_type_error({invalid_list_of,
                                  {msg, server_node_status}},
                                 F4,
                                 [serverNodesStatus | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (protocolVersion) -> ok;
                      (serverVersion) -> ok;
                      (serverNodes) -> ok;
                      (serverNodesStatus) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_describe_cluster_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   describe_cluster_response},
                  M,
                  Path);
v_msg_describe_cluster_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, describe_cluster_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_server_node/3}).
-dialyzer({nowarn_function,v_msg_server_node/3}).
v_msg_server_node(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} ->
            v_type_uint32(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{host := F2} ->
            v_type_string(F2, [host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F3} ->
            v_type_uint32(F3, [port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (host) -> ok;
                      (port) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_server_node(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   server_node},
                  M,
                  Path);
v_msg_server_node(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_node}, X, Path).

-compile({nowarn_unused_function,v_msg_server_node_status/3}).
-dialyzer({nowarn_function,v_msg_server_node_status/3}).
v_msg_server_node_status(#{} = M, Path, TrUserData) ->
    case M of
        #{node := F1} ->
            v_msg_server_node(F1, [node | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{state := F2} ->
            'v_enum_hstream.server.NodeState'(F2,
                                              [state | Path],
                                              TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
                      (state) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_server_node_status(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   server_node_status},
                  M,
                  Path);
v_msg_server_node_status(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_node_status},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_shard_request/3}).
-dialyzer({nowarn_function,v_msg_lookup_shard_request/3}).
v_msg_lookup_shard_request(#{} = M, Path, TrUserData) ->
    case M of
        #{shardId := F1} ->
            v_type_uint64(F1, [shardId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (shardId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_shard_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_shard_request},
                  M,
                  Path);
v_msg_lookup_shard_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_shard_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_shard_response/3}).
-dialyzer({nowarn_function,v_msg_lookup_shard_response/3}).
v_msg_lookup_shard_response(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{shardId := F1} ->
            v_type_uint64(F1, [shardId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverNode := F2} ->
            v_msg_server_node(F2, [serverNode | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (shardId) -> ok;
                      (serverNode) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_shard_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_shard_response},
                  M,
                  Path);
v_msg_lookup_shard_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_shard_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_subscription_request/3}).
-dialyzer({nowarn_function,v_msg_lookup_subscription_request/3}).
v_msg_lookup_subscription_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_subscription_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_subscription_request},
                  M,
                  Path);
v_msg_lookup_subscription_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   lookup_subscription_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_subscription_response/3}).
-dialyzer({nowarn_function,v_msg_lookup_subscription_response/3}).
v_msg_lookup_subscription_response(#{} = M, Path,
                                   TrUserData) ->
    case M of
        #{subscriptionId := F1} ->
            v_type_string(F1, [subscriptionId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverNode := F2} ->
            v_msg_server_node(F2, [serverNode | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (subscriptionId) -> ok;
                      (serverNode) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_subscription_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_subscription_response},
                  M,
                  Path);
v_msg_lookup_subscription_response(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   lookup_subscription_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_connector_request/3}).
-dialyzer({nowarn_function,v_msg_lookup_connector_request/3}).
v_msg_lookup_connector_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_connector_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_connector_request},
                  M,
                  Path);
v_msg_lookup_connector_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_connector_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_connector_response/3}).
-dialyzer({nowarn_function,v_msg_lookup_connector_response/3}).
v_msg_lookup_connector_response(#{} = M, Path,
                                TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverNode := F2} ->
            v_msg_server_node(F2, [serverNode | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (serverNode) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_connector_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_connector_response},
                  M,
                  Path);
v_msg_lookup_connector_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_connector_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_shard_reader_request/3}).
-dialyzer({nowarn_function,v_msg_lookup_shard_reader_request/3}).
v_msg_lookup_shard_reader_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{readerId := F1} ->
            v_type_string(F1, [readerId | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (readerId) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_shard_reader_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_shard_reader_request},
                  M,
                  Path);
v_msg_lookup_shard_reader_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   lookup_shard_reader_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_lookup_shard_reader_response/3}).
-dialyzer({nowarn_function,v_msg_lookup_shard_reader_response/3}).
v_msg_lookup_shard_reader_response(#{} = M, Path,
                                   TrUserData) ->
    case M of
        #{readerId := F1} ->
            v_type_string(F1, [readerId | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{serverNode := F2} ->
            v_msg_server_node(F2, [serverNode | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (readerId) -> ok;
                      (serverNode) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lookup_shard_reader_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   lookup_shard_reader_response},
                  M,
                  Path);
v_msg_lookup_shard_reader_response(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   lookup_shard_reader_response},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_struct/3}).
-dialyzer({nowarn_function,v_msg_struct/3}).
v_msg_struct(#{} = M, Path, TrUserData) ->
    case M of
        #{fields := F1} ->
            'v_map<string,value>'(F1, [fields | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (fields) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_struct(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   struct},
                  M,
                  Path);
v_msg_struct(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, struct}, X, Path).

-compile({nowarn_unused_function,v_msg_value/3}).
-dialyzer({nowarn_function,v_msg_value/3}).
v_msg_value(#{} = M, Path, TrUserData) ->
    case M of
        #{kind := {null_value, OF1}} ->
            'v_enum_google.protobuf.NullValue'(OF1,
                                               [null_value, kind | Path],
                                               TrUserData);
        #{kind := {number_value, OF1}} ->
            v_type_double(OF1,
                          [number_value, kind | Path],
                          TrUserData);
        #{kind := {string_value, OF1}} ->
            v_type_string(OF1,
                          [string_value, kind | Path],
                          TrUserData);
        #{kind := {bool_value, OF1}} ->
            v_type_bool(OF1, [bool_value, kind | Path], TrUserData);
        #{kind := {struct_value, OF1}} ->
            v_msg_struct(OF1,
                         [struct_value, kind | Path],
                         TrUserData);
        #{kind := {list_value, OF1}} ->
            v_msg_list_value(OF1,
                             [list_value, kind | Path],
                             TrUserData);
        #{kind := F1} ->
            mk_type_error(invalid_oneof, F1, [kind | Path]);
        _ -> ok
    end,
    lists:foreach(fun (kind) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   value},
                  M,
                  Path);
v_msg_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, value}, X, Path).

-compile({nowarn_unused_function,v_msg_list_value/3}).
-dialyzer({nowarn_function,v_msg_list_value/3}).
v_msg_list_value(#{} = M, Path, TrUserData) ->
    case M of
        #{values := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_value(Elem, [values | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, value}},
                                 F1,
                                 [values | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (values) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   list_value},
                  M,
                  Path);
v_msg_list_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_value}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
        #{seconds := F1} ->
            v_type_int64(F1, [seconds | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nanos := F2} ->
            v_type_int32(F2, [nanos | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
                      (nanos) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   timestamp},
                  M,
                  Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_msg_empty/3}).
-dialyzer({nowarn_function,v_msg_empty/3}).
v_msg_empty(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_empty(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   empty},
                  M,
                  Path);
v_msg_empty(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, empty}, X, Path).

-compile({nowarn_unused_function,'v_enum_hstream.server.SpecialOffset'/3}).
-dialyzer({nowarn_function,'v_enum_hstream.server.SpecialOffset'/3}).
'v_enum_hstream.server.SpecialOffset'('EARLIEST', _Path,
                                      _TrUserData) ->
    ok;
'v_enum_hstream.server.SpecialOffset'('LATEST', _Path,
                                      _TrUserData) ->
    ok;
'v_enum_hstream.server.SpecialOffset'(V, Path,
                                      TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_hstream.server.SpecialOffset'(X, Path,
                                      _TrUserData) ->
    mk_type_error({invalid_enum,
                   'hstream.server.SpecialOffset'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_h_stream_record_header.Flag'/3}).
-dialyzer({nowarn_function,'v_enum_h_stream_record_header.Flag'/3}).
'v_enum_h_stream_record_header.Flag'('JSON', _Path,
                                     _TrUserData) ->
    ok;
'v_enum_h_stream_record_header.Flag'('RAW', _Path,
                                     _TrUserData) ->
    ok;
'v_enum_h_stream_record_header.Flag'(V, Path,
                                     TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_h_stream_record_header.Flag'(X, Path,
                                     _TrUserData) ->
    mk_type_error({invalid_enum,
                   'h_stream_record_header.Flag'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_hstream.server.TaskStatusPB'/3}).
-dialyzer({nowarn_function,'v_enum_hstream.server.TaskStatusPB'/3}).
'v_enum_hstream.server.TaskStatusPB'('TASK_CREATING',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'('TASK_CREATED',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'('TASK_RUNNING',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'('TASK_CREATION_ABORT',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'('TASK_CONNECTION_ABORT',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'('TASK_TERMINATED',
                                     _Path, _TrUserData) ->
    ok;
'v_enum_hstream.server.TaskStatusPB'(V, Path,
                                     TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_hstream.server.TaskStatusPB'(X, Path,
                                     _TrUserData) ->
    mk_type_error({invalid_enum,
                   'hstream.server.TaskStatusPB'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_hstream.server.NodeState'/3}).
-dialyzer({nowarn_function,'v_enum_hstream.server.NodeState'/3}).
'v_enum_hstream.server.NodeState'('Starting', _Path,
                                  _TrUserData) ->
    ok;
'v_enum_hstream.server.NodeState'('Running', _Path,
                                  _TrUserData) ->
    ok;
'v_enum_hstream.server.NodeState'('Unavailable', _Path,
                                  _TrUserData) ->
    ok;
'v_enum_hstream.server.NodeState'('Dead', _Path,
                                  _TrUserData) ->
    ok;
'v_enum_hstream.server.NodeState'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_hstream.server.NodeState'(X, Path,
                                  _TrUserData) ->
    mk_type_error({invalid_enum,
                   'hstream.server.NodeState'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_google.protobuf.NullValue'/3}).
-dialyzer({nowarn_function,'v_enum_google.protobuf.NullValue'/3}).
'v_enum_google.protobuf.NullValue'('NULL_VALUE', _Path,
                                   _TrUserData) ->
    ok;
'v_enum_google.protobuf.NullValue'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_google.protobuf.NullValue'(X, Path,
                                   _TrUserData) ->
    mk_type_error({invalid_enum,
                   'google.protobuf.NullValue'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
                  N,
                  Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
         N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
                  N,
                  Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint32,
                   unsigned,
                   32},
                  N,
                  Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint64,
                   unsigned,
                   64},
                  N,
                  Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
         v_type_string(Key, [key | Path], TrUserData),
         v_type_string(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,stats_double_vals>'/3}).
-dialyzer({nowarn_function,'v_map<string,stats_double_vals>'/3}).
'v_map<string,stats_double_vals>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
         v_type_string(Key, [key | Path], TrUserData),
         v_msg_stats_double_vals(Value,
                                 [value | Path],
                                 TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,stats_double_vals>'(X, Path,
                                  _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,value>'/3}).
-dialyzer({nowarn_function,'v_map<string,value>'/3}).
'v_map<string,value>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
         v_type_string(Key, [key | Path], TrUserData),
         v_msg_value(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,value>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_per_stream_time_series_stats_all_response.stats'/2}).
'tr_decode_init_default_per_stream_time_series_stats_all_response.stats'(_,
                                                                         _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_per_stream_time_series_stats_all_response.stats'/3}).
'tr_merge_per_stream_time_series_stats_all_response.stats'(X1,
                                                           X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_per_stream_time_series_stats_all_response.stats'/2}).
'tr_decode_repeated_finalize_per_stream_time_series_stats_all_response.stats'(L,
                                                                              TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_per_stream_time_series_stats_all_response.stats'/2}).
'tr_encode_per_stream_time_series_stats_all_response.stats'(X,
                                                            _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_per_stream_time_series_stats_all_response.stats'/3}).
'tr_decode_repeated_add_elem_per_stream_time_series_stats_all_response.stats'(Elem,
                                                                              L,
                                                                              _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_struct.fields'/2}).
'tr_decode_init_default_struct.fields'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_struct.fields'/3}).
'tr_merge_struct.fields'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_struct.fields'/2}).
'tr_decode_repeated_finalize_struct.fields'(L,
                                            TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_struct.fields'/2}).
'tr_encode_struct.fields'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_struct.fields'/3}).
'tr_decode_repeated_add_elem_struct.fields'(Elem, L,
                                            _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_h_stream_record_header.attributes[x]'/2}).
'tr_encode_h_stream_record_header.attributes[x]'(X,
                                                 _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_h_stream_record_header.attributes'/2}).
'tr_decode_init_default_h_stream_record_header.attributes'(_,
                                                           _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_h_stream_record_header.attributes'/3}).
'tr_merge_h_stream_record_header.attributes'(X1, X2,
                                             _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_h_stream_record_header.attributes'/2}).
'tr_decode_repeated_finalize_h_stream_record_header.attributes'(L,
                                                                TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_h_stream_record_header.attributes'/2}).
'tr_encode_h_stream_record_header.attributes'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_h_stream_record_header.attributes'/3}).
'tr_decode_repeated_add_elem_h_stream_record_header.attributes'(Elem,
                                                                L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_per_stream_time_series_stats_all_response.stats[x]'/2}).
'tr_encode_per_stream_time_series_stats_all_response.stats[x]'(X,
                                                               _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_struct.fields[x]'/2}).
'tr_encode_struct.fields[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.

-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
                           M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).




get_msg_defs() ->
    [{{enum, 'hstream.server.SpecialOffset'},
      [{'EARLIEST', 0}, {'LATEST', 1}]},
     {{enum, 'h_stream_record_header.Flag'},
      [{'JSON', 0}, {'RAW', 1}]},
     {{enum, 'hstream.server.TaskStatusPB'},
      [{'TASK_CREATING', 0},
       {'TASK_CREATED', 1},
       {'TASK_RUNNING', 2},
       {'TASK_CREATION_ABORT', 3},
       {'TASK_CONNECTION_ABORT', 4},
       {'TASK_TERMINATED', 5}]},
     {{enum, 'hstream.server.NodeState'},
      [{'Starting', 0},
       {'Running', 1},
       {'Unavailable', 2},
       {'Dead', 3}]},
     {{enum, 'google.protobuf.NullValue'},
      [{'NULL_VALUE', 0}]},
     {{msg, shard_offset},
      [#{name => offset, rnum => 2,
         fields =>
             [#{name => specialOffset, fnum => 1, rnum => 2,
                type => {enum, 'hstream.server.SpecialOffset'},
                occurrence => optional, opts => []},
              #{name => recordOffset, fnum => 2, rnum => 2,
                type => {msg, record_id}, occurrence => optional,
                opts => []}]}]},
     {{msg, echo_request},
      [#{name => msg, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, echo_response},
      [#{name => msg, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, command_stream_task},
      [#{name => command_sql, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, command_stream_task_response},
      [#{name => command_resp, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, command_connect},
      [#{name => client_version, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => protocol_version, fnum => 2, rnum => 3,
         type => int32, occurrence => optional, opts => []}]},
     {{msg, command_connected},
      [#{name => server_version, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => protocol_version, fnum => 2, rnum => 3,
         type => int32, occurrence => optional, opts => []}]},
     {{msg, command_push_query},
      [#{name => query_text, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, command_query},
      [#{name => stmt_text, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, command_query_response},
      [#{name => result_set, fnum => 1, rnum => 2,
         type => {msg, struct}, occurrence => repeated,
         opts => []}]},
     {{msg, append_request},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => shardId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => records, fnum => 3, rnum => 4,
         type => {msg, h_stream_record}, occurrence => repeated,
         opts => []}]},
     {{msg, append_response},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => shardId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => recordIds, fnum => 3, rnum => 4,
         type => {msg, record_id}, occurrence => repeated,
         opts => []}]},
     {{msg, subscription},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => streamName, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => ackTimeoutSeconds, fnum => 3, rnum => 4,
         type => int32, occurrence => optional, opts => []},
       #{name => maxUnackedRecords, fnum => 4, rnum => 5,
         type => int32, occurrence => optional, opts => []},
       #{name => offset, fnum => 5, rnum => 6,
         type => {enum, 'hstream.server.SpecialOffset'},
         occurrence => optional, opts => []}]},
     {{msg, delete_subscription_request},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => force, fnum => 2, rnum => 3, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, check_subscription_exist_request},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, check_subscription_exist_response},
      [#{name => exists, fnum => 1, rnum => 2, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, streaming_fetch_request},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => consumerName, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => ackIds, fnum => 3, rnum => 4,
         type => {msg, record_id}, occurrence => repeated,
         opts => []}]},
     {{msg, streaming_fetch_response},
      [#{name => receivedRecords, fnum => 1, rnum => 2,
         type => {msg, received_record}, occurrence => repeated,
         opts => []}]},
     {{msg, received_record},
      [#{name => recordId, fnum => 1, rnum => 2,
         type => {msg, record_id}, occurrence => optional,
         opts => []},
       #{name => record, fnum => 2, rnum => 3, type => bytes,
         occurrence => optional, opts => []}]},
     {{msg, delete_stream_request},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => ignoreNonExist, fnum => 2, rnum => 3,
         type => bool, occurrence => optional, opts => []},
       #{name => force, fnum => 3, rnum => 4, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, list_streams_response},
      [#{name => streams, fnum => 1, rnum => 2,
         type => {msg, stream}, occurrence => repeated,
         opts => []}]},
     {{msg, list_streams_request}, []},
     {{msg, list_subscriptions_request}, []},
     {{msg, list_subscriptions_response},
      [#{name => subscription, fnum => 1, rnum => 2,
         type => {msg, subscription}, occurrence => repeated,
         opts => []}]},
     {{msg, stream},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => replicationFactor, fnum => 2, rnum => 3,
         type => uint32, occurrence => optional, opts => []},
       #{name => backlogDuration, fnum => 3, rnum => 4,
         type => uint32, occurrence => optional, opts => []},
       #{name => shardCount, fnum => 4, rnum => 5,
         type => uint32, occurrence => optional, opts => []}]},
     {{msg, h_stream_record_batch},
      [#{name => batch, fnum => 1, rnum => 2, type => bytes,
         occurrence => repeated, opts => []}]},
     {{msg, h_stream_record},
      [#{name => header, fnum => 1, rnum => 2,
         type => {msg, h_stream_record_header},
         occurrence => optional, opts => []},
       #{name => payload, fnum => 2, rnum => 3, type => bytes,
         occurrence => optional, opts => []}]},
     {{msg, h_stream_record_header},
      [#{name => flag, fnum => 1, rnum => 2,
         type => {enum, 'h_stream_record_header.Flag'},
         occurrence => optional, opts => []},
       #{name => attributes, fnum => 2, rnum => 3,
         type => {map, string, string}, occurrence => repeated,
         opts => []},
       #{name => publish_time, fnum => 3, rnum => 4,
         type => {msg, timestamp}, occurrence => optional,
         opts => []},
       #{name => key, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []}]},
     {{msg, record_id},
      [#{name => shardId, fnum => 1, rnum => 2,
         type => uint64, occurrence => optional, opts => []},
       #{name => batchId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => batchIndex, fnum => 3, rnum => 4,
         type => uint32, occurrence => optional, opts => []}]},
     {{msg, shard},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => shardId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => startHashRangeKey, fnum => 3, rnum => 4,
         type => string, occurrence => optional, opts => []},
       #{name => endHashRangeKey, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => epoch, fnum => 5, rnum => 6, type => uint64,
         occurrence => optional, opts => []},
       #{name => isActive, fnum => 6, rnum => 7, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, list_shards_request},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, list_shards_response},
      [#{name => shards, fnum => 1, rnum => 2,
         type => {msg, shard}, occurrence => repeated,
         opts => []}]},
     {{msg, create_shard_reader_request},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => shardId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => shardOffset, fnum => 3, rnum => 4,
         type => {msg, shard_offset}, occurrence => optional,
         opts => []},
       #{name => readerId, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => timeout, fnum => 5, rnum => 6, type => uint32,
         occurrence => optional, opts => []}]},
     {{msg, create_shard_reader_response},
      [#{name => streamName, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => shardId, fnum => 2, rnum => 3, type => uint64,
         occurrence => optional, opts => []},
       #{name => shardOffset, fnum => 3, rnum => 4,
         type => {msg, shard_offset}, occurrence => optional,
         opts => []},
       #{name => readerId, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => timeout, fnum => 5, rnum => 6, type => uint32,
         occurrence => optional, opts => []}]},
     {{msg, read_shard_request},
      [#{name => readerId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => maxRecords, fnum => 2, rnum => 3,
         type => uint32, occurrence => optional, opts => []}]},
     {{msg, delete_shard_reader_request},
      [#{name => readerId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, read_shard_response},
      [#{name => receivedRecords, fnum => 1, rnum => 2,
         type => {msg, received_record}, occurrence => repeated,
         opts => []}]},
     {{msg, terminate_queries_request},
      [#{name => queryId, fnum => 1, rnum => 2,
         type => string, occurrence => repeated, opts => []},
       #{name => all, fnum => 2, rnum => 3, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, terminate_queries_response},
      [#{name => queryId, fnum => 1, rnum => 2,
         type => string, occurrence => repeated, opts => []}]},
     {{msg, list_queries_request}, []},
     {{msg, list_queries_response},
      [#{name => queries, fnum => 1, rnum => 2,
         type => {msg, query}, occurrence => repeated,
         opts => []}]},
     {{msg, get_query_request},
      [#{name => id, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, query},
      [#{name => id, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => status, fnum => 2, rnum => 3,
         type => {enum, 'hstream.server.TaskStatusPB'},
         occurrence => optional, opts => []},
       #{name => createdTime, fnum => 3, rnum => 4,
         type => int64, occurrence => optional, opts => []},
       #{name => queryText, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []}]},
     {{msg, delete_query_request},
      [#{name => id, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, delete_query_response},
      [#{name => success, fnum => 1, rnum => 2, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, restart_query_request},
      [#{name => id, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, restart_query_response},
      [#{name => success, fnum => 1, rnum => 2, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, create_connector_request},
      [#{name => sql, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, list_connectors_request}, []},
     {{msg, list_connectors_response},
      [#{name => connectors, fnum => 1, rnum => 2,
         type => {msg, connector}, occurrence => repeated,
         opts => []}]},
     {{msg, get_connector_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, connector},
      [#{name => info, fnum => 1, rnum => 2,
         type => {msg, struct}, occurrence => optional,
         opts => []}]},
     {{msg, delete_connector_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, pause_connector_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, resume_connector_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, get_view_request},
      [#{name => viewId, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, delete_view_request},
      [#{name => viewId, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => ignoreNonExist, fnum => 2, rnum => 3,
         type => bool, occurrence => optional, opts => []}]},
     {{msg, list_views_request}, []},
     {{msg, list_views_response},
      [#{name => views, fnum => 1, rnum => 2,
         type => {msg, view}, occurrence => repeated,
         opts => []}]},
     {{msg, view},
      [#{name => viewId, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => status, fnum => 2, rnum => 3,
         type => {enum, 'hstream.server.TaskStatusPB'},
         occurrence => optional, opts => []},
       #{name => createdTime, fnum => 3, rnum => 4,
         type => int64, occurrence => optional, opts => []},
       #{name => sql, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []},
       #{name => schema, fnum => 5, rnum => 6, type => string,
         occurrence => repeated, opts => []}]},
     {{msg, get_node_request},
      [#{name => id, fnum => 1, rnum => 2, type => int32,
         occurrence => optional, opts => []}]},
     {{msg, list_nodes_request}, []},
     {{msg, list_nodes_response},
      [#{name => nodes, fnum => 1, rnum => 2,
         type => {msg, node}, occurrence => repeated,
         opts => []}]},
     {{msg, node},
      [#{name => id, fnum => 1, rnum => 2, type => int32,
         occurrence => optional, opts => []},
       #{name => roles, fnum => 2, rnum => 3, type => int32,
         occurrence => repeated, opts => [packed]},
       #{name => address, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => status, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []}]},
     {{msg, stats_interval_vals},
      [#{name => intervals, fnum => 1, rnum => 2,
         type => int32, occurrence => repeated,
         opts => [packed]}]},
     {{msg, stats_double_vals},
      [#{name => vals, fnum => 1, rnum => 2, type => double,
         occurrence => repeated, opts => [packed]}]},
     {{msg, admin_command_request},
      [#{name => command, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, admin_command_response},
      [#{name => result, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, per_stream_time_series_stats_request},
      [#{name => method, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => streamName, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => intervals, fnum => 3, rnum => 4,
         type => {msg, stats_interval_vals},
         occurrence => optional, opts => []}]},
     {{msg, per_stream_time_series_stats_response},
      [#{name => stats, fnum => 1, rnum => 2,
         type => {msg, stats_double_vals},
         occurrence => optional, opts => []}]},
     {{msg, per_stream_time_series_stats_all_response},
      [#{name => stats, fnum => 1, rnum => 2,
         type => {map, string, {msg, stats_double_vals}},
         occurrence => repeated, opts => []}]},
     {{msg, per_stream_time_series_stats_all_request},
      [#{name => method, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => intervals, fnum => 2, rnum => 3,
         type => {msg, stats_interval_vals},
         occurrence => optional, opts => []}]},
     {{msg, describe_cluster_response},
      [#{name => protocolVersion, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => serverVersion, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => serverNodes, fnum => 3, rnum => 4,
         type => {msg, server_node}, occurrence => repeated,
         opts => []},
       #{name => serverNodesStatus, fnum => 4, rnum => 5,
         type => {msg, server_node_status},
         occurrence => repeated, opts => []}]},
     {{msg, server_node},
      [#{name => id, fnum => 1, rnum => 2, type => uint32,
         occurrence => optional, opts => []},
       #{name => host, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => port, fnum => 3, rnum => 4, type => uint32,
         occurrence => optional, opts => []}]},
     {{msg, server_node_status},
      [#{name => node, fnum => 1, rnum => 2,
         type => {msg, server_node}, occurrence => optional,
         opts => []},
       #{name => state, fnum => 2, rnum => 3,
         type => {enum, 'hstream.server.NodeState'},
         occurrence => optional, opts => []}]},
     {{msg, lookup_shard_request},
      [#{name => shardId, fnum => 1, rnum => 2,
         type => uint64, occurrence => optional, opts => []}]},
     {{msg, lookup_shard_response},
      [#{name => shardId, fnum => 1, rnum => 2,
         type => uint64, occurrence => optional, opts => []},
       #{name => serverNode, fnum => 2, rnum => 3,
         type => {msg, server_node}, occurrence => optional,
         opts => []}]},
     {{msg, lookup_subscription_request},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, lookup_subscription_response},
      [#{name => subscriptionId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => serverNode, fnum => 2, rnum => 3,
         type => {msg, server_node}, occurrence => optional,
         opts => []}]},
     {{msg, lookup_connector_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []}]},
     {{msg, lookup_connector_response},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => serverNode, fnum => 2, rnum => 3,
         type => {msg, server_node}, occurrence => optional,
         opts => []}]},
     {{msg, lookup_shard_reader_request},
      [#{name => readerId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []}]},
     {{msg, lookup_shard_reader_response},
      [#{name => readerId, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => serverNode, fnum => 2, rnum => 3,
         type => {msg, server_node}, occurrence => optional,
         opts => []}]},
     {{msg, struct},
      [#{name => fields, fnum => 1, rnum => 2,
         type => {map, string, {msg, value}},
         occurrence => repeated, opts => []}]},
     {{msg, value},
      [#{name => kind, rnum => 2,
         fields =>
             [#{name => null_value, fnum => 1, rnum => 2,
                type => {enum, 'google.protobuf.NullValue'},
                occurrence => optional, opts => []},
              #{name => number_value, fnum => 2, rnum => 2,
                type => double, occurrence => optional, opts => []},
              #{name => string_value, fnum => 3, rnum => 2,
                type => string, occurrence => optional, opts => []},
              #{name => bool_value, fnum => 4, rnum => 2,
                type => bool, occurrence => optional, opts => []},
              #{name => struct_value, fnum => 5, rnum => 2,
                type => {msg, struct}, occurrence => optional,
                opts => []},
              #{name => list_value, fnum => 6, rnum => 2,
                type => {msg, list_value}, occurrence => optional,
                opts => []}]}]},
     {{msg, list_value},
      [#{name => values, fnum => 1, rnum => 2,
         type => {msg, value}, occurrence => repeated,
         opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
         occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
         occurrence => optional, opts => []}]},
     {{msg, empty}, []}].


get_msg_names() ->
    [shard_offset,
     echo_request,
     echo_response,
     command_stream_task,
     command_stream_task_response,
     command_connect,
     command_connected,
     command_push_query,
     command_query,
     command_query_response,
     append_request,
     append_response,
     subscription,
     delete_subscription_request,
     check_subscription_exist_request,
     check_subscription_exist_response,
     streaming_fetch_request,
     streaming_fetch_response,
     received_record,
     delete_stream_request,
     list_streams_response,
     list_streams_request,
     list_subscriptions_request,
     list_subscriptions_response,
     stream,
     h_stream_record_batch,
     h_stream_record,
     h_stream_record_header,
     record_id,
     shard,
     list_shards_request,
     list_shards_response,
     create_shard_reader_request,
     create_shard_reader_response,
     read_shard_request,
     delete_shard_reader_request,
     read_shard_response,
     terminate_queries_request,
     terminate_queries_response,
     list_queries_request,
     list_queries_response,
     get_query_request,
     query,
     delete_query_request,
     delete_query_response,
     restart_query_request,
     restart_query_response,
     create_connector_request,
     list_connectors_request,
     list_connectors_response,
     get_connector_request,
     connector,
     delete_connector_request,
     pause_connector_request,
     resume_connector_request,
     get_view_request,
     delete_view_request,
     list_views_request,
     list_views_response,
     view,
     get_node_request,
     list_nodes_request,
     list_nodes_response,
     node,
     stats_interval_vals,
     stats_double_vals,
     admin_command_request,
     admin_command_response,
     per_stream_time_series_stats_request,
     per_stream_time_series_stats_response,
     per_stream_time_series_stats_all_response,
     per_stream_time_series_stats_all_request,
     describe_cluster_response,
     server_node,
     server_node_status,
     lookup_shard_request,
     lookup_shard_response,
     lookup_subscription_request,
     lookup_subscription_response,
     lookup_connector_request,
     lookup_connector_response,
     lookup_shard_reader_request,
     lookup_shard_reader_response,
     struct,
     value,
     list_value,
     timestamp,
     empty].


get_group_names() -> [].


get_msg_or_group_names() ->
    [shard_offset,
     echo_request,
     echo_response,
     command_stream_task,
     command_stream_task_response,
     command_connect,
     command_connected,
     command_push_query,
     command_query,
     command_query_response,
     append_request,
     append_response,
     subscription,
     delete_subscription_request,
     check_subscription_exist_request,
     check_subscription_exist_response,
     streaming_fetch_request,
     streaming_fetch_response,
     received_record,
     delete_stream_request,
     list_streams_response,
     list_streams_request,
     list_subscriptions_request,
     list_subscriptions_response,
     stream,
     h_stream_record_batch,
     h_stream_record,
     h_stream_record_header,
     record_id,
     shard,
     list_shards_request,
     list_shards_response,
     create_shard_reader_request,
     create_shard_reader_response,
     read_shard_request,
     delete_shard_reader_request,
     read_shard_response,
     terminate_queries_request,
     terminate_queries_response,
     list_queries_request,
     list_queries_response,
     get_query_request,
     query,
     delete_query_request,
     delete_query_response,
     restart_query_request,
     restart_query_response,
     create_connector_request,
     list_connectors_request,
     list_connectors_response,
     get_connector_request,
     connector,
     delete_connector_request,
     pause_connector_request,
     resume_connector_request,
     get_view_request,
     delete_view_request,
     list_views_request,
     list_views_response,
     view,
     get_node_request,
     list_nodes_request,
     list_nodes_response,
     node,
     stats_interval_vals,
     stats_double_vals,
     admin_command_request,
     admin_command_response,
     per_stream_time_series_stats_request,
     per_stream_time_series_stats_response,
     per_stream_time_series_stats_all_response,
     per_stream_time_series_stats_all_request,
     describe_cluster_response,
     server_node,
     server_node_status,
     lookup_shard_request,
     lookup_shard_response,
     lookup_subscription_request,
     lookup_subscription_response,
     lookup_connector_request,
     lookup_connector_response,
     lookup_shard_reader_request,
     lookup_shard_reader_response,
     struct,
     value,
     list_value,
     timestamp,
     empty].


get_enum_names() ->
    ['hstream.server.SpecialOffset',
     'h_stream_record_header.Flag',
     'hstream.server.TaskStatusPB',
     'hstream.server.NodeState',
     'google.protobuf.NullValue'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(shard_offset) ->
    [#{name => offset, rnum => 2,
       fields =>
           [#{name => specialOffset, fnum => 1, rnum => 2,
              type => {enum, 'hstream.server.SpecialOffset'},
              occurrence => optional, opts => []},
            #{name => recordOffset, fnum => 2, rnum => 2,
              type => {msg, record_id}, occurrence => optional,
              opts => []}]}];
find_msg_def(echo_request) ->
    [#{name => msg, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(echo_response) ->
    [#{name => msg, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(command_stream_task) ->
    [#{name => command_sql, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(command_stream_task_response) ->
    [#{name => command_resp, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(command_connect) ->
    [#{name => client_version, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => protocol_version, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(command_connected) ->
    [#{name => server_version, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => protocol_version, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(command_push_query) ->
    [#{name => query_text, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(command_query) ->
    [#{name => stmt_text, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(command_query_response) ->
    [#{name => result_set, fnum => 1, rnum => 2,
       type => {msg, struct}, occurrence => repeated,
       opts => []}];
find_msg_def(append_request) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => shardId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => records, fnum => 3, rnum => 4,
       type => {msg, h_stream_record}, occurrence => repeated,
       opts => []}];
find_msg_def(append_response) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => shardId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => recordIds, fnum => 3, rnum => 4,
       type => {msg, record_id}, occurrence => repeated,
       opts => []}];
find_msg_def(subscription) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => streamName, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => ackTimeoutSeconds, fnum => 3, rnum => 4,
       type => int32, occurrence => optional, opts => []},
     #{name => maxUnackedRecords, fnum => 4, rnum => 5,
       type => int32, occurrence => optional, opts => []},
     #{name => offset, fnum => 5, rnum => 6,
       type => {enum, 'hstream.server.SpecialOffset'},
       occurrence => optional, opts => []}];
find_msg_def(delete_subscription_request) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => force, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(check_subscription_exist_request) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(check_subscription_exist_response) ->
    [#{name => exists, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(streaming_fetch_request) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => consumerName, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => ackIds, fnum => 3, rnum => 4,
       type => {msg, record_id}, occurrence => repeated,
       opts => []}];
find_msg_def(streaming_fetch_response) ->
    [#{name => receivedRecords, fnum => 1, rnum => 2,
       type => {msg, received_record}, occurrence => repeated,
       opts => []}];
find_msg_def(received_record) ->
    [#{name => recordId, fnum => 1, rnum => 2,
       type => {msg, record_id}, occurrence => optional,
       opts => []},
     #{name => record, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(delete_stream_request) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => ignoreNonExist, fnum => 2, rnum => 3,
       type => bool, occurrence => optional, opts => []},
     #{name => force, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(list_streams_response) ->
    [#{name => streams, fnum => 1, rnum => 2,
       type => {msg, stream}, occurrence => repeated,
       opts => []}];
find_msg_def(list_streams_request) -> [];
find_msg_def(list_subscriptions_request) -> [];
find_msg_def(list_subscriptions_response) ->
    [#{name => subscription, fnum => 1, rnum => 2,
       type => {msg, subscription}, occurrence => repeated,
       opts => []}];
find_msg_def(stream) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => replicationFactor, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => backlogDuration, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => shardCount, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def(h_stream_record_batch) ->
    [#{name => batch, fnum => 1, rnum => 2, type => bytes,
       occurrence => repeated, opts => []}];
find_msg_def(h_stream_record) ->
    [#{name => header, fnum => 1, rnum => 2,
       type => {msg, h_stream_record_header},
       occurrence => optional, opts => []},
     #{name => payload, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(h_stream_record_header) ->
    [#{name => flag, fnum => 1, rnum => 2,
       type => {enum, 'h_stream_record_header.Flag'},
       occurrence => optional, opts => []},
     #{name => attributes, fnum => 2, rnum => 3,
       type => {map, string, string}, occurrence => repeated,
       opts => []},
     #{name => publish_time, fnum => 3, rnum => 4,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => key, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []}];
find_msg_def(record_id) ->
    [#{name => shardId, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => batchId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => batchIndex, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def(shard) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => shardId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => startHashRangeKey, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => endHashRangeKey, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => epoch, fnum => 5, rnum => 6, type => uint64,
       occurrence => optional, opts => []},
     #{name => isActive, fnum => 6, rnum => 7, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(list_shards_request) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(list_shards_response) ->
    [#{name => shards, fnum => 1, rnum => 2,
       type => {msg, shard}, occurrence => repeated,
       opts => []}];
find_msg_def(create_shard_reader_request) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => shardId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => shardOffset, fnum => 3, rnum => 4,
       type => {msg, shard_offset}, occurrence => optional,
       opts => []},
     #{name => readerId, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => timeout, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(create_shard_reader_response) ->
    [#{name => streamName, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => shardId, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => shardOffset, fnum => 3, rnum => 4,
       type => {msg, shard_offset}, occurrence => optional,
       opts => []},
     #{name => readerId, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => timeout, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(read_shard_request) ->
    [#{name => readerId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => maxRecords, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def(delete_shard_reader_request) ->
    [#{name => readerId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(read_shard_response) ->
    [#{name => receivedRecords, fnum => 1, rnum => 2,
       type => {msg, received_record}, occurrence => repeated,
       opts => []}];
find_msg_def(terminate_queries_request) ->
    [#{name => queryId, fnum => 1, rnum => 2,
       type => string, occurrence => repeated, opts => []},
     #{name => all, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(terminate_queries_response) ->
    [#{name => queryId, fnum => 1, rnum => 2,
       type => string, occurrence => repeated, opts => []}];
find_msg_def(list_queries_request) -> [];
find_msg_def(list_queries_response) ->
    [#{name => queries, fnum => 1, rnum => 2,
       type => {msg, query}, occurrence => repeated,
       opts => []}];
find_msg_def(get_query_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(query) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => status, fnum => 2, rnum => 3,
       type => {enum, 'hstream.server.TaskStatusPB'},
       occurrence => optional, opts => []},
     #{name => createdTime, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => queryText, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []}];
find_msg_def(delete_query_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(delete_query_response) ->
    [#{name => success, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(restart_query_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(restart_query_response) ->
    [#{name => success, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(create_connector_request) ->
    [#{name => sql, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(list_connectors_request) -> [];
find_msg_def(list_connectors_response) ->
    [#{name => connectors, fnum => 1, rnum => 2,
       type => {msg, connector}, occurrence => repeated,
       opts => []}];
find_msg_def(get_connector_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(connector) ->
    [#{name => info, fnum => 1, rnum => 2,
       type => {msg, struct}, occurrence => optional,
       opts => []}];
find_msg_def(delete_connector_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(pause_connector_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(resume_connector_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(get_view_request) ->
    [#{name => viewId, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(delete_view_request) ->
    [#{name => viewId, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => ignoreNonExist, fnum => 2, rnum => 3,
       type => bool, occurrence => optional, opts => []}];
find_msg_def(list_views_request) -> [];
find_msg_def(list_views_response) ->
    [#{name => views, fnum => 1, rnum => 2,
       type => {msg, view}, occurrence => repeated,
       opts => []}];
find_msg_def(view) ->
    [#{name => viewId, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => status, fnum => 2, rnum => 3,
       type => {enum, 'hstream.server.TaskStatusPB'},
       occurrence => optional, opts => []},
     #{name => createdTime, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => sql, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => schema, fnum => 5, rnum => 6, type => string,
       occurrence => repeated, opts => []}];
find_msg_def(get_node_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(list_nodes_request) -> [];
find_msg_def(list_nodes_response) ->
    [#{name => nodes, fnum => 1, rnum => 2,
       type => {msg, node}, occurrence => repeated,
       opts => []}];
find_msg_def(node) ->
    [#{name => id, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => roles, fnum => 2, rnum => 3, type => int32,
       occurrence => repeated, opts => [packed]},
     #{name => address, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => status, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []}];
find_msg_def(stats_interval_vals) ->
    [#{name => intervals, fnum => 1, rnum => 2,
       type => int32, occurrence => repeated,
       opts => [packed]}];
find_msg_def(stats_double_vals) ->
    [#{name => vals, fnum => 1, rnum => 2, type => double,
       occurrence => repeated, opts => [packed]}];
find_msg_def(admin_command_request) ->
    [#{name => command, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(admin_command_response) ->
    [#{name => result, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(per_stream_time_series_stats_request) ->
    [#{name => method, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => streamName, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => intervals, fnum => 3, rnum => 4,
       type => {msg, stats_interval_vals},
       occurrence => optional, opts => []}];
find_msg_def(per_stream_time_series_stats_response) ->
    [#{name => stats, fnum => 1, rnum => 2,
       type => {msg, stats_double_vals},
       occurrence => optional, opts => []}];
find_msg_def(per_stream_time_series_stats_all_response) ->
    [#{name => stats, fnum => 1, rnum => 2,
       type => {map, string, {msg, stats_double_vals}},
       occurrence => repeated, opts => []}];
find_msg_def(per_stream_time_series_stats_all_request) ->
    [#{name => method, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => intervals, fnum => 2, rnum => 3,
       type => {msg, stats_interval_vals},
       occurrence => optional, opts => []}];
find_msg_def(describe_cluster_response) ->
    [#{name => protocolVersion, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => serverVersion, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => serverNodes, fnum => 3, rnum => 4,
       type => {msg, server_node}, occurrence => repeated,
       opts => []},
     #{name => serverNodesStatus, fnum => 4, rnum => 5,
       type => {msg, server_node_status},
       occurrence => repeated, opts => []}];
find_msg_def(server_node) ->
    [#{name => id, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => host, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => port, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(server_node_status) ->
    [#{name => node, fnum => 1, rnum => 2,
       type => {msg, server_node}, occurrence => optional,
       opts => []},
     #{name => state, fnum => 2, rnum => 3,
       type => {enum, 'hstream.server.NodeState'},
       occurrence => optional, opts => []}];
find_msg_def(lookup_shard_request) ->
    [#{name => shardId, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def(lookup_shard_response) ->
    [#{name => shardId, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => serverNode, fnum => 2, rnum => 3,
       type => {msg, server_node}, occurrence => optional,
       opts => []}];
find_msg_def(lookup_subscription_request) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(lookup_subscription_response) ->
    [#{name => subscriptionId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => serverNode, fnum => 2, rnum => 3,
       type => {msg, server_node}, occurrence => optional,
       opts => []}];
find_msg_def(lookup_connector_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(lookup_connector_response) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => serverNode, fnum => 2, rnum => 3,
       type => {msg, server_node}, occurrence => optional,
       opts => []}];
find_msg_def(lookup_shard_reader_request) ->
    [#{name => readerId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(lookup_shard_reader_response) ->
    [#{name => readerId, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => serverNode, fnum => 2, rnum => 3,
       type => {msg, server_node}, occurrence => optional,
       opts => []}];
find_msg_def(struct) ->
    [#{name => fields, fnum => 1, rnum => 2,
       type => {map, string, {msg, value}},
       occurrence => repeated, opts => []}];
find_msg_def(value) ->
    [#{name => kind, rnum => 2,
       fields =>
           [#{name => null_value, fnum => 1, rnum => 2,
              type => {enum, 'google.protobuf.NullValue'},
              occurrence => optional, opts => []},
            #{name => number_value, fnum => 2, rnum => 2,
              type => double, occurrence => optional, opts => []},
            #{name => string_value, fnum => 3, rnum => 2,
              type => string, occurrence => optional, opts => []},
            #{name => bool_value, fnum => 4, rnum => 2,
              type => bool, occurrence => optional, opts => []},
            #{name => struct_value, fnum => 5, rnum => 2,
              type => {msg, struct}, occurrence => optional,
              opts => []},
            #{name => list_value, fnum => 6, rnum => 2,
              type => {msg, list_value}, occurrence => optional,
              opts => []}]}];
find_msg_def(list_value) ->
    [#{name => values, fnum => 1, rnum => 2,
       type => {msg, value}, occurrence => repeated,
       opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(empty) -> [];
find_msg_def(_) -> error.


find_enum_def('hstream.server.SpecialOffset') ->
    [{'EARLIEST', 0}, {'LATEST', 1}];
find_enum_def('h_stream_record_header.Flag') ->
    [{'JSON', 0}, {'RAW', 1}];
find_enum_def('hstream.server.TaskStatusPB') ->
    [{'TASK_CREATING', 0},
     {'TASK_CREATED', 1},
     {'TASK_RUNNING', 2},
     {'TASK_CREATION_ABORT', 3},
     {'TASK_CONNECTION_ABORT', 4},
     {'TASK_TERMINATED', 5}];
find_enum_def('hstream.server.NodeState') ->
    [{'Starting', 0},
     {'Running', 1},
     {'Unavailable', 2},
     {'Dead', 3}];
find_enum_def('google.protobuf.NullValue') ->
    [{'NULL_VALUE', 0}];
find_enum_def(_) -> error.


enum_symbol_by_value('hstream.server.SpecialOffset',
                     Value) ->
    'enum_symbol_by_value_hstream.server.SpecialOffset'(Value);
enum_symbol_by_value('h_stream_record_header.Flag',
                     Value) ->
    'enum_symbol_by_value_h_stream_record_header.Flag'(Value);
enum_symbol_by_value('hstream.server.TaskStatusPB',
                     Value) ->
    'enum_symbol_by_value_hstream.server.TaskStatusPB'(Value);
enum_symbol_by_value('hstream.server.NodeState',
                     Value) ->
    'enum_symbol_by_value_hstream.server.NodeState'(Value);
enum_symbol_by_value('google.protobuf.NullValue',
                     Value) ->
    'enum_symbol_by_value_google.protobuf.NullValue'(Value).


enum_value_by_symbol('hstream.server.SpecialOffset',
                     Sym) ->
    'enum_value_by_symbol_hstream.server.SpecialOffset'(Sym);
enum_value_by_symbol('h_stream_record_header.Flag',
                     Sym) ->
    'enum_value_by_symbol_h_stream_record_header.Flag'(Sym);
enum_value_by_symbol('hstream.server.TaskStatusPB',
                     Sym) ->
    'enum_value_by_symbol_hstream.server.TaskStatusPB'(Sym);
enum_value_by_symbol('hstream.server.NodeState', Sym) ->
    'enum_value_by_symbol_hstream.server.NodeState'(Sym);
enum_value_by_symbol('google.protobuf.NullValue',
                     Sym) ->
    'enum_value_by_symbol_google.protobuf.NullValue'(Sym).


'enum_symbol_by_value_hstream.server.SpecialOffset'(0) ->
    'EARLIEST';
'enum_symbol_by_value_hstream.server.SpecialOffset'(1) ->
    'LATEST'.


'enum_value_by_symbol_hstream.server.SpecialOffset'('EARLIEST') ->
    0;
'enum_value_by_symbol_hstream.server.SpecialOffset'('LATEST') ->
    1.

'enum_symbol_by_value_h_stream_record_header.Flag'(0) ->
    'JSON';
'enum_symbol_by_value_h_stream_record_header.Flag'(1) ->
    'RAW'.


'enum_value_by_symbol_h_stream_record_header.Flag'('JSON') ->
    0;
'enum_value_by_symbol_h_stream_record_header.Flag'('RAW') ->
    1.

'enum_symbol_by_value_hstream.server.TaskStatusPB'(0) ->
    'TASK_CREATING';
'enum_symbol_by_value_hstream.server.TaskStatusPB'(1) ->
    'TASK_CREATED';
'enum_symbol_by_value_hstream.server.TaskStatusPB'(2) ->
    'TASK_RUNNING';
'enum_symbol_by_value_hstream.server.TaskStatusPB'(3) ->
    'TASK_CREATION_ABORT';
'enum_symbol_by_value_hstream.server.TaskStatusPB'(4) ->
    'TASK_CONNECTION_ABORT';
'enum_symbol_by_value_hstream.server.TaskStatusPB'(5) ->
    'TASK_TERMINATED'.


'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_CREATING') ->
    0;
'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_CREATED') ->
    1;
'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_RUNNING') ->
    2;
'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_CREATION_ABORT') ->
    3;
'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_CONNECTION_ABORT') ->
    4;
'enum_value_by_symbol_hstream.server.TaskStatusPB'('TASK_TERMINATED') ->
    5.

'enum_symbol_by_value_hstream.server.NodeState'(0) ->
    'Starting';
'enum_symbol_by_value_hstream.server.NodeState'(1) ->
    'Running';
'enum_symbol_by_value_hstream.server.NodeState'(2) ->
    'Unavailable';
'enum_symbol_by_value_hstream.server.NodeState'(3) ->
    'Dead'.


'enum_value_by_symbol_hstream.server.NodeState'('Starting') ->
    0;
'enum_value_by_symbol_hstream.server.NodeState'('Running') ->
    1;
'enum_value_by_symbol_hstream.server.NodeState'('Unavailable') ->
    2;
'enum_value_by_symbol_hstream.server.NodeState'('Dead') ->
    3.

'enum_symbol_by_value_google.protobuf.NullValue'(0) ->
    'NULL_VALUE'.


'enum_value_by_symbol_google.protobuf.NullValue'('NULL_VALUE') ->
    0.


get_service_names() -> ['hstream.server.HStreamApi'].


get_service_def('hstream.server.HStreamApi') ->
    {{service, 'hstream.server.HStreamApi'},
     [#{name => 'Echo', input => echo_request,
        output => echo_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'CreateStream', input => stream,
        output => stream, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'DeleteStream',
        input => delete_stream_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ListStreams', input => list_streams_request,
        output => list_streams_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'LookupShard', input => lookup_shard_request,
        output => lookup_shard_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'Append', input => append_request,
        output => append_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'ListShards', input => list_shards_request,
        output => list_shards_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'CreateShardReader',
        input => create_shard_reader_request,
        output => create_shard_reader_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'LookupShardReader',
        input => lookup_shard_reader_request,
        output => lookup_shard_reader_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ReadShard', input => read_shard_request,
        output => read_shard_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'DeleteShardReader',
        input => delete_shard_reader_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'CreateSubscription', input => subscription,
        output => subscription, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'ListSubscriptions',
        input => list_subscriptions_request,
        output => list_subscriptions_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'CheckSubscriptionExist',
        input => check_subscription_exist_request,
        output => check_subscription_exist_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'DeleteSubscription',
        input => delete_subscription_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'LookupSubscription',
        input => lookup_subscription_request,
        output => lookup_subscription_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'StreamingFetch',
        input => streaming_fetch_request,
        output => streaming_fetch_response,
        input_stream => true, output_stream => true,
        opts => []},
      #{name => 'DescribeCluster', input => empty,
        output => describe_cluster_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'SendAdminCommand',
        input => admin_command_request,
        output => admin_command_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'PerStreamTimeSeriesStats',
        input => per_stream_time_series_stats_request,
        output => per_stream_time_series_stats_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'PerStreamTimeSeriesStatsAll',
        input => per_stream_time_series_stats_all_request,
        output => per_stream_time_series_stats_all_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ExecutePushQuery',
        input => command_push_query, output => struct,
        input_stream => false, output_stream => true,
        opts => []},
      #{name => 'ExecuteQuery', input => command_query,
        output => command_query_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'ListQueries', input => list_queries_request,
        output => list_queries_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'GetQuery', input => get_query_request,
        output => query, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'TerminateQueries',
        input => terminate_queries_request,
        output => terminate_queries_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'DeleteQuery', input => delete_query_request,
        output => empty, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'RestartQuery',
        input => restart_query_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'CreateConnector',
        input => create_connector_request, output => connector,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ListConnectors',
        input => list_connectors_request,
        output => list_connectors_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'GetConnector',
        input => get_connector_request, output => connector,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'DeleteConnector',
        input => delete_connector_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'PauseConnector',
        input => pause_connector_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ResumeConnector',
        input => resume_connector_request, output => empty,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'LookupConnector',
        input => lookup_connector_request,
        output => lookup_connector_response,
        input_stream => false, output_stream => false,
        opts => []},
      #{name => 'ListViews', input => list_views_request,
        output => list_views_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'GetView', input => get_view_request,
        output => view, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'DeleteView', input => delete_view_request,
        output => empty, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'ListNodes', input => list_nodes_request,
        output => list_nodes_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'GetNode', input => get_node_request,
        output => node, input_stream => false,
        output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('hstream.server.HStreamApi') ->
    ['Echo',
     'CreateStream',
     'DeleteStream',
     'ListStreams',
     'LookupShard',
     'Append',
     'ListShards',
     'CreateShardReader',
     'LookupShardReader',
     'ReadShard',
     'DeleteShardReader',
     'CreateSubscription',
     'ListSubscriptions',
     'CheckSubscriptionExist',
     'DeleteSubscription',
     'LookupSubscription',
     'StreamingFetch',
     'DescribeCluster',
     'SendAdminCommand',
     'PerStreamTimeSeriesStats',
     'PerStreamTimeSeriesStatsAll',
     'ExecutePushQuery',
     'ExecuteQuery',
     'ListQueries',
     'GetQuery',
     'TerminateQueries',
     'DeleteQuery',
     'RestartQuery',
     'CreateConnector',
     'ListConnectors',
     'GetConnector',
     'DeleteConnector',
     'PauseConnector',
     'ResumeConnector',
     'LookupConnector',
     'ListViews',
     'GetView',
     'DeleteView',
     'ListNodes',
     'GetNode'];
get_rpc_names(_) -> error.


find_rpc_def('hstream.server.HStreamApi', RpcName) ->
    'find_rpc_def_hstream.server.HStreamApi'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_hstream.server.HStreamApi'('Echo') ->
    #{name => 'Echo', input => echo_request,
      output => echo_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('CreateStream') ->
    #{name => 'CreateStream', input => stream,
      output => stream, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteStream') ->
    #{name => 'DeleteStream',
      input => delete_stream_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListStreams') ->
    #{name => 'ListStreams', input => list_streams_request,
      output => list_streams_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('LookupShard') ->
    #{name => 'LookupShard', input => lookup_shard_request,
      output => lookup_shard_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('Append') ->
    #{name => 'Append', input => append_request,
      output => append_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListShards') ->
    #{name => 'ListShards', input => list_shards_request,
      output => list_shards_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('CreateShardReader') ->
    #{name => 'CreateShardReader',
      input => create_shard_reader_request,
      output => create_shard_reader_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('LookupShardReader') ->
    #{name => 'LookupShardReader',
      input => lookup_shard_reader_request,
      output => lookup_shard_reader_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ReadShard') ->
    #{name => 'ReadShard', input => read_shard_request,
      output => read_shard_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteShardReader') ->
    #{name => 'DeleteShardReader',
      input => delete_shard_reader_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('CreateSubscription') ->
    #{name => 'CreateSubscription', input => subscription,
      output => subscription, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListSubscriptions') ->
    #{name => 'ListSubscriptions',
      input => list_subscriptions_request,
      output => list_subscriptions_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('CheckSubscriptionExist') ->
    #{name => 'CheckSubscriptionExist',
      input => check_subscription_exist_request,
      output => check_subscription_exist_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteSubscription') ->
    #{name => 'DeleteSubscription',
      input => delete_subscription_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('LookupSubscription') ->
    #{name => 'LookupSubscription',
      input => lookup_subscription_request,
      output => lookup_subscription_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('StreamingFetch') ->
    #{name => 'StreamingFetch',
      input => streaming_fetch_request,
      output => streaming_fetch_response,
      input_stream => true, output_stream => true,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DescribeCluster') ->
    #{name => 'DescribeCluster', input => empty,
      output => describe_cluster_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('SendAdminCommand') ->
    #{name => 'SendAdminCommand',
      input => admin_command_request,
      output => admin_command_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('PerStreamTimeSeriesStats') ->
    #{name => 'PerStreamTimeSeriesStats',
      input => per_stream_time_series_stats_request,
      output => per_stream_time_series_stats_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('PerStreamTimeSeriesStatsAll') ->
    #{name => 'PerStreamTimeSeriesStatsAll',
      input => per_stream_time_series_stats_all_request,
      output => per_stream_time_series_stats_all_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ExecutePushQuery') ->
    #{name => 'ExecutePushQuery',
      input => command_push_query, output => struct,
      input_stream => false, output_stream => true,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ExecuteQuery') ->
    #{name => 'ExecuteQuery', input => command_query,
      output => command_query_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListQueries') ->
    #{name => 'ListQueries', input => list_queries_request,
      output => list_queries_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('GetQuery') ->
    #{name => 'GetQuery', input => get_query_request,
      output => query, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('TerminateQueries') ->
    #{name => 'TerminateQueries',
      input => terminate_queries_request,
      output => terminate_queries_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteQuery') ->
    #{name => 'DeleteQuery', input => delete_query_request,
      output => empty, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('RestartQuery') ->
    #{name => 'RestartQuery',
      input => restart_query_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('CreateConnector') ->
    #{name => 'CreateConnector',
      input => create_connector_request, output => connector,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListConnectors') ->
    #{name => 'ListConnectors',
      input => list_connectors_request,
      output => list_connectors_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('GetConnector') ->
    #{name => 'GetConnector',
      input => get_connector_request, output => connector,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteConnector') ->
    #{name => 'DeleteConnector',
      input => delete_connector_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('PauseConnector') ->
    #{name => 'PauseConnector',
      input => pause_connector_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ResumeConnector') ->
    #{name => 'ResumeConnector',
      input => resume_connector_request, output => empty,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('LookupConnector') ->
    #{name => 'LookupConnector',
      input => lookup_connector_request,
      output => lookup_connector_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListViews') ->
    #{name => 'ListViews', input => list_views_request,
      output => list_views_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('GetView') ->
    #{name => 'GetView', input => get_view_request,
      output => view, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('DeleteView') ->
    #{name => 'DeleteView', input => delete_view_request,
      output => empty, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('ListNodes') ->
    #{name => 'ListNodes', input => list_nodes_request,
      output => list_nodes_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'('GetNode') ->
    #{name => 'GetNode', input => get_node_request,
      output => node, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_hstream.server.HStreamApi'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"hstream.server.HStreamApi">>) ->
    'hstream.server.HStreamApi';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('hstream.server.HStreamApi') ->
    <<"hstream.server.HStreamApi">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"Echo">>) ->
    {'hstream.server.HStreamApi', 'Echo'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"CreateStream">>) ->
    {'hstream.server.HStreamApi', 'CreateStream'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteStream">>) ->
    {'hstream.server.HStreamApi', 'DeleteStream'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListStreams">>) ->
    {'hstream.server.HStreamApi', 'ListStreams'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"LookupShard">>) ->
    {'hstream.server.HStreamApi', 'LookupShard'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"Append">>) ->
    {'hstream.server.HStreamApi', 'Append'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListShards">>) ->
    {'hstream.server.HStreamApi', 'ListShards'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"CreateShardReader">>) ->
    {'hstream.server.HStreamApi', 'CreateShardReader'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"LookupShardReader">>) ->
    {'hstream.server.HStreamApi', 'LookupShardReader'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ReadShard">>) ->
    {'hstream.server.HStreamApi', 'ReadShard'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteShardReader">>) ->
    {'hstream.server.HStreamApi', 'DeleteShardReader'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"CreateSubscription">>) ->
    {'hstream.server.HStreamApi', 'CreateSubscription'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListSubscriptions">>) ->
    {'hstream.server.HStreamApi', 'ListSubscriptions'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"CheckSubscriptionExist">>) ->
    {'hstream.server.HStreamApi', 'CheckSubscriptionExist'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteSubscription">>) ->
    {'hstream.server.HStreamApi', 'DeleteSubscription'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"LookupSubscription">>) ->
    {'hstream.server.HStreamApi', 'LookupSubscription'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"StreamingFetch">>) ->
    {'hstream.server.HStreamApi', 'StreamingFetch'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DescribeCluster">>) ->
    {'hstream.server.HStreamApi', 'DescribeCluster'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"SendAdminCommand">>) ->
    {'hstream.server.HStreamApi', 'SendAdminCommand'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"PerStreamTimeSeriesStats">>) ->
    {'hstream.server.HStreamApi',
     'PerStreamTimeSeriesStats'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"PerStreamTimeSeriesStatsAll">>) ->
    {'hstream.server.HStreamApi',
     'PerStreamTimeSeriesStatsAll'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ExecutePushQuery">>) ->
    {'hstream.server.HStreamApi', 'ExecutePushQuery'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ExecuteQuery">>) ->
    {'hstream.server.HStreamApi', 'ExecuteQuery'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListQueries">>) ->
    {'hstream.server.HStreamApi', 'ListQueries'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"GetQuery">>) ->
    {'hstream.server.HStreamApi', 'GetQuery'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"TerminateQueries">>) ->
    {'hstream.server.HStreamApi', 'TerminateQueries'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteQuery">>) ->
    {'hstream.server.HStreamApi', 'DeleteQuery'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"RestartQuery">>) ->
    {'hstream.server.HStreamApi', 'RestartQuery'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"CreateConnector">>) ->
    {'hstream.server.HStreamApi', 'CreateConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListConnectors">>) ->
    {'hstream.server.HStreamApi', 'ListConnectors'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"GetConnector">>) ->
    {'hstream.server.HStreamApi', 'GetConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteConnector">>) ->
    {'hstream.server.HStreamApi', 'DeleteConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"PauseConnector">>) ->
    {'hstream.server.HStreamApi', 'PauseConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ResumeConnector">>) ->
    {'hstream.server.HStreamApi', 'ResumeConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"LookupConnector">>) ->
    {'hstream.server.HStreamApi', 'LookupConnector'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListViews">>) ->
    {'hstream.server.HStreamApi', 'ListViews'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"GetView">>) ->
    {'hstream.server.HStreamApi', 'GetView'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"DeleteView">>) ->
    {'hstream.server.HStreamApi', 'DeleteView'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"ListNodes">>) ->
    {'hstream.server.HStreamApi', 'ListNodes'};
fqbins_to_service_and_rpc_name(<<"hstream.server.HStreamApi">>, <<"GetNode">>) ->
    {'hstream.server.HStreamApi', 'GetNode'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'Echo') ->
    {<<"hstream.server.HStreamApi">>, <<"Echo">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'CreateStream') ->
    {<<"hstream.server.HStreamApi">>, <<"CreateStream">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteStream') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteStream">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListStreams') ->
    {<<"hstream.server.HStreamApi">>, <<"ListStreams">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'LookupShard') ->
    {<<"hstream.server.HStreamApi">>, <<"LookupShard">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'Append') ->
    {<<"hstream.server.HStreamApi">>, <<"Append">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListShards') ->
    {<<"hstream.server.HStreamApi">>, <<"ListShards">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'CreateShardReader') ->
    {<<"hstream.server.HStreamApi">>, <<"CreateShardReader">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'LookupShardReader') ->
    {<<"hstream.server.HStreamApi">>, <<"LookupShardReader">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ReadShard') ->
    {<<"hstream.server.HStreamApi">>, <<"ReadShard">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteShardReader') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteShardReader">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'CreateSubscription') ->
    {<<"hstream.server.HStreamApi">>, <<"CreateSubscription">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListSubscriptions') ->
    {<<"hstream.server.HStreamApi">>, <<"ListSubscriptions">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'CheckSubscriptionExist') ->
    {<<"hstream.server.HStreamApi">>, <<"CheckSubscriptionExist">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteSubscription') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteSubscription">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'LookupSubscription') ->
    {<<"hstream.server.HStreamApi">>, <<"LookupSubscription">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'StreamingFetch') ->
    {<<"hstream.server.HStreamApi">>, <<"StreamingFetch">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DescribeCluster') ->
    {<<"hstream.server.HStreamApi">>, <<"DescribeCluster">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'SendAdminCommand') ->
    {<<"hstream.server.HStreamApi">>, <<"SendAdminCommand">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'PerStreamTimeSeriesStats') ->
    {<<"hstream.server.HStreamApi">>, <<"PerStreamTimeSeriesStats">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'PerStreamTimeSeriesStatsAll') ->
    {<<"hstream.server.HStreamApi">>, <<"PerStreamTimeSeriesStatsAll">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ExecutePushQuery') ->
    {<<"hstream.server.HStreamApi">>, <<"ExecutePushQuery">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ExecuteQuery') ->
    {<<"hstream.server.HStreamApi">>, <<"ExecuteQuery">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListQueries') ->
    {<<"hstream.server.HStreamApi">>, <<"ListQueries">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'GetQuery') ->
    {<<"hstream.server.HStreamApi">>, <<"GetQuery">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'TerminateQueries') ->
    {<<"hstream.server.HStreamApi">>, <<"TerminateQueries">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteQuery') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteQuery">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'RestartQuery') ->
    {<<"hstream.server.HStreamApi">>, <<"RestartQuery">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'CreateConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"CreateConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListConnectors') ->
    {<<"hstream.server.HStreamApi">>, <<"ListConnectors">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'GetConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"GetConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'PauseConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"PauseConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ResumeConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"ResumeConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'LookupConnector') ->
    {<<"hstream.server.HStreamApi">>, <<"LookupConnector">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListViews') ->
    {<<"hstream.server.HStreamApi">>, <<"ListViews">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'GetView') ->
    {<<"hstream.server.HStreamApi">>, <<"GetView">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'DeleteView') ->
    {<<"hstream.server.HStreamApi">>, <<"DeleteView">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'ListNodes') ->
    {<<"hstream.server.HStreamApi">>, <<"ListNodes">>};
service_and_rpc_name_to_fqbins('hstream.server.HStreamApi',
                               'GetNode') ->
    {<<"hstream.server.HStreamApi">>, <<"GetNode">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"hstream.server.ShardOffset">>) -> shard_offset;
fqbin_to_msg_name(<<"hstream.server.EchoRequest">>) -> echo_request;
fqbin_to_msg_name(<<"hstream.server.EchoResponse">>) -> echo_response;
fqbin_to_msg_name(<<"hstream.server.CommandStreamTask">>) -> command_stream_task;
fqbin_to_msg_name(<<"hstream.server.CommandStreamTaskResponse">>) ->
    command_stream_task_response;
fqbin_to_msg_name(<<"hstream.server.CommandConnect">>) -> command_connect;
fqbin_to_msg_name(<<"hstream.server.CommandConnected">>) -> command_connected;
fqbin_to_msg_name(<<"hstream.server.CommandPushQuery">>) -> command_push_query;
fqbin_to_msg_name(<<"hstream.server.CommandQuery">>) -> command_query;
fqbin_to_msg_name(<<"hstream.server.CommandQueryResponse">>) -> command_query_response;
fqbin_to_msg_name(<<"hstream.server.AppendRequest">>) -> append_request;
fqbin_to_msg_name(<<"hstream.server.AppendResponse">>) -> append_response;
fqbin_to_msg_name(<<"hstream.server.Subscription">>) -> subscription;
fqbin_to_msg_name(<<"hstream.server.DeleteSubscriptionRequest">>) ->
    delete_subscription_request;
fqbin_to_msg_name(<<"hstream.server.CheckSubscriptionExistRequest">>) ->
    check_subscription_exist_request;
fqbin_to_msg_name(<<"hstream.server.CheckSubscriptionExistResponse">>) ->
    check_subscription_exist_response;
fqbin_to_msg_name(<<"hstream.server.StreamingFetchRequest">>) -> streaming_fetch_request;
fqbin_to_msg_name(<<"hstream.server.StreamingFetchResponse">>) -> streaming_fetch_response;
fqbin_to_msg_name(<<"hstream.server.ReceivedRecord">>) -> received_record;
fqbin_to_msg_name(<<"hstream.server.DeleteStreamRequest">>) -> delete_stream_request;
fqbin_to_msg_name(<<"hstream.server.ListStreamsResponse">>) -> list_streams_response;
fqbin_to_msg_name(<<"hstream.server.ListStreamsRequest">>) -> list_streams_request;
fqbin_to_msg_name(<<"hstream.server.ListSubscriptionsRequest">>) ->
    list_subscriptions_request;
fqbin_to_msg_name(<<"hstream.server.ListSubscriptionsResponse">>) ->
    list_subscriptions_response;
fqbin_to_msg_name(<<"hstream.server.Stream">>) -> stream;
fqbin_to_msg_name(<<"hstream.server.HStreamRecordBatch">>) -> h_stream_record_batch;
fqbin_to_msg_name(<<"hstream.server.HStreamRecord">>) -> h_stream_record;
fqbin_to_msg_name(<<"hstream.server.HStreamRecordHeader">>) -> h_stream_record_header;
fqbin_to_msg_name(<<"hstream.server.RecordId">>) -> record_id;
fqbin_to_msg_name(<<"hstream.server.Shard">>) -> shard;
fqbin_to_msg_name(<<"hstream.server.ListShardsRequest">>) -> list_shards_request;
fqbin_to_msg_name(<<"hstream.server.ListShardsResponse">>) -> list_shards_response;
fqbin_to_msg_name(<<"hstream.server.CreateShardReaderRequest">>) ->
    create_shard_reader_request;
fqbin_to_msg_name(<<"hstream.server.CreateShardReaderResponse">>) ->
    create_shard_reader_response;
fqbin_to_msg_name(<<"hstream.server.ReadShardRequest">>) -> read_shard_request;
fqbin_to_msg_name(<<"hstream.server.DeleteShardReaderRequest">>) ->
    delete_shard_reader_request;
fqbin_to_msg_name(<<"hstream.server.ReadShardResponse">>) -> read_shard_response;
fqbin_to_msg_name(<<"hstream.server.TerminateQueriesRequest">>) -> terminate_queries_request;
fqbin_to_msg_name(<<"hstream.server.TerminateQueriesResponse">>) ->
    terminate_queries_response;
fqbin_to_msg_name(<<"hstream.server.ListQueriesRequest">>) -> list_queries_request;
fqbin_to_msg_name(<<"hstream.server.ListQueriesResponse">>) -> list_queries_response;
fqbin_to_msg_name(<<"hstream.server.GetQueryRequest">>) -> get_query_request;
fqbin_to_msg_name(<<"hstream.server.Query">>) -> query;
fqbin_to_msg_name(<<"hstream.server.DeleteQueryRequest">>) -> delete_query_request;
fqbin_to_msg_name(<<"hstream.server.DeleteQueryResponse">>) -> delete_query_response;
fqbin_to_msg_name(<<"hstream.server.RestartQueryRequest">>) -> restart_query_request;
fqbin_to_msg_name(<<"hstream.server.RestartQueryResponse">>) -> restart_query_response;
fqbin_to_msg_name(<<"hstream.server.CreateConnectorRequest">>) -> create_connector_request;
fqbin_to_msg_name(<<"hstream.server.ListConnectorsRequest">>) -> list_connectors_request;
fqbin_to_msg_name(<<"hstream.server.ListConnectorsResponse">>) -> list_connectors_response;
fqbin_to_msg_name(<<"hstream.server.GetConnectorRequest">>) -> get_connector_request;
fqbin_to_msg_name(<<"hstream.server.Connector">>) -> connector;
fqbin_to_msg_name(<<"hstream.server.DeleteConnectorRequest">>) -> delete_connector_request;
fqbin_to_msg_name(<<"hstream.server.PauseConnectorRequest">>) -> pause_connector_request;
fqbin_to_msg_name(<<"hstream.server.ResumeConnectorRequest">>) -> resume_connector_request;
fqbin_to_msg_name(<<"hstream.server.GetViewRequest">>) -> get_view_request;
fqbin_to_msg_name(<<"hstream.server.DeleteViewRequest">>) -> delete_view_request;
fqbin_to_msg_name(<<"hstream.server.ListViewsRequest">>) -> list_views_request;
fqbin_to_msg_name(<<"hstream.server.ListViewsResponse">>) -> list_views_response;
fqbin_to_msg_name(<<"hstream.server.View">>) -> view;
fqbin_to_msg_name(<<"hstream.server.GetNodeRequest">>) -> get_node_request;
fqbin_to_msg_name(<<"hstream.server.ListNodesRequest">>) -> list_nodes_request;
fqbin_to_msg_name(<<"hstream.server.ListNodesResponse">>) -> list_nodes_response;
fqbin_to_msg_name(<<"hstream.server.Node">>) -> node;
fqbin_to_msg_name(<<"hstream.server.StatsIntervalVals">>) -> stats_interval_vals;
fqbin_to_msg_name(<<"hstream.server.StatsDoubleVals">>) -> stats_double_vals;
fqbin_to_msg_name(<<"hstream.server.AdminCommandRequest">>) -> admin_command_request;
fqbin_to_msg_name(<<"hstream.server.AdminCommandResponse">>) -> admin_command_response;
fqbin_to_msg_name(<<"hstream.server.PerStreamTimeSeriesStatsRequest">>) ->
    per_stream_time_series_stats_request;
fqbin_to_msg_name(<<"hstream.server.PerStreamTimeSeriesStatsResponse">>) ->
    per_stream_time_series_stats_response;
fqbin_to_msg_name(<<"hstream.server.PerStreamTimeSeriesStatsAllResponse">>) ->
    per_stream_time_series_stats_all_response;
fqbin_to_msg_name(<<"hstream.server.PerStreamTimeSeriesStatsAllRequest">>) ->
    per_stream_time_series_stats_all_request;
fqbin_to_msg_name(<<"hstream.server.DescribeClusterResponse">>) -> describe_cluster_response;
fqbin_to_msg_name(<<"hstream.server.ServerNode">>) -> server_node;
fqbin_to_msg_name(<<"hstream.server.ServerNodeStatus">>) -> server_node_status;
fqbin_to_msg_name(<<"hstream.server.LookupShardRequest">>) -> lookup_shard_request;
fqbin_to_msg_name(<<"hstream.server.LookupShardResponse">>) -> lookup_shard_response;
fqbin_to_msg_name(<<"hstream.server.LookupSubscriptionRequest">>) ->
    lookup_subscription_request;
fqbin_to_msg_name(<<"hstream.server.LookupSubscriptionResponse">>) ->
    lookup_subscription_response;
fqbin_to_msg_name(<<"hstream.server.LookupConnectorRequest">>) -> lookup_connector_request;
fqbin_to_msg_name(<<"hstream.server.LookupConnectorResponse">>) -> lookup_connector_response;
fqbin_to_msg_name(<<"hstream.server.LookupShardReaderRequest">>) ->
    lookup_shard_reader_request;
fqbin_to_msg_name(<<"hstream.server.LookupShardReaderResponse">>) ->
    lookup_shard_reader_response;
fqbin_to_msg_name(<<"google.protobuf.Struct">>) -> struct;
fqbin_to_msg_name(<<"google.protobuf.Value">>) -> value;
fqbin_to_msg_name(<<"google.protobuf.ListValue">>) -> list_value;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(<<"google.protobuf.Empty">>) -> empty;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(shard_offset) -> <<"hstream.server.ShardOffset">>;
msg_name_to_fqbin(echo_request) -> <<"hstream.server.EchoRequest">>;
msg_name_to_fqbin(echo_response) -> <<"hstream.server.EchoResponse">>;
msg_name_to_fqbin(command_stream_task) -> <<"hstream.server.CommandStreamTask">>;
msg_name_to_fqbin(command_stream_task_response) ->
    <<"hstream.server.CommandStreamTaskResponse">>;
msg_name_to_fqbin(command_connect) -> <<"hstream.server.CommandConnect">>;
msg_name_to_fqbin(command_connected) -> <<"hstream.server.CommandConnected">>;
msg_name_to_fqbin(command_push_query) -> <<"hstream.server.CommandPushQuery">>;
msg_name_to_fqbin(command_query) -> <<"hstream.server.CommandQuery">>;
msg_name_to_fqbin(command_query_response) -> <<"hstream.server.CommandQueryResponse">>;
msg_name_to_fqbin(append_request) -> <<"hstream.server.AppendRequest">>;
msg_name_to_fqbin(append_response) -> <<"hstream.server.AppendResponse">>;
msg_name_to_fqbin(subscription) -> <<"hstream.server.Subscription">>;
msg_name_to_fqbin(delete_subscription_request) ->
    <<"hstream.server.DeleteSubscriptionRequest">>;
msg_name_to_fqbin(check_subscription_exist_request) ->
    <<"hstream.server.CheckSubscriptionExistRequest">>;
msg_name_to_fqbin(check_subscription_exist_response) ->
    <<"hstream.server.CheckSubscriptionExistResponse">>;
msg_name_to_fqbin(streaming_fetch_request) -> <<"hstream.server.StreamingFetchRequest">>;
msg_name_to_fqbin(streaming_fetch_response) -> <<"hstream.server.StreamingFetchResponse">>;
msg_name_to_fqbin(received_record) -> <<"hstream.server.ReceivedRecord">>;
msg_name_to_fqbin(delete_stream_request) -> <<"hstream.server.DeleteStreamRequest">>;
msg_name_to_fqbin(list_streams_response) -> <<"hstream.server.ListStreamsResponse">>;
msg_name_to_fqbin(list_streams_request) -> <<"hstream.server.ListStreamsRequest">>;
msg_name_to_fqbin(list_subscriptions_request) ->
    <<"hstream.server.ListSubscriptionsRequest">>;
msg_name_to_fqbin(list_subscriptions_response) ->
    <<"hstream.server.ListSubscriptionsResponse">>;
msg_name_to_fqbin(stream) -> <<"hstream.server.Stream">>;
msg_name_to_fqbin(h_stream_record_batch) -> <<"hstream.server.HStreamRecordBatch">>;
msg_name_to_fqbin(h_stream_record) -> <<"hstream.server.HStreamRecord">>;
msg_name_to_fqbin(h_stream_record_header) -> <<"hstream.server.HStreamRecordHeader">>;
msg_name_to_fqbin(record_id) -> <<"hstream.server.RecordId">>;
msg_name_to_fqbin(shard) -> <<"hstream.server.Shard">>;
msg_name_to_fqbin(list_shards_request) -> <<"hstream.server.ListShardsRequest">>;
msg_name_to_fqbin(list_shards_response) -> <<"hstream.server.ListShardsResponse">>;
msg_name_to_fqbin(create_shard_reader_request) ->
    <<"hstream.server.CreateShardReaderRequest">>;
msg_name_to_fqbin(create_shard_reader_response) ->
    <<"hstream.server.CreateShardReaderResponse">>;
msg_name_to_fqbin(read_shard_request) -> <<"hstream.server.ReadShardRequest">>;
msg_name_to_fqbin(delete_shard_reader_request) ->
    <<"hstream.server.DeleteShardReaderRequest">>;
msg_name_to_fqbin(read_shard_response) -> <<"hstream.server.ReadShardResponse">>;
msg_name_to_fqbin(terminate_queries_request) -> <<"hstream.server.TerminateQueriesRequest">>;
msg_name_to_fqbin(terminate_queries_response) ->
    <<"hstream.server.TerminateQueriesResponse">>;
msg_name_to_fqbin(list_queries_request) -> <<"hstream.server.ListQueriesRequest">>;
msg_name_to_fqbin(list_queries_response) -> <<"hstream.server.ListQueriesResponse">>;
msg_name_to_fqbin(get_query_request) -> <<"hstream.server.GetQueryRequest">>;
msg_name_to_fqbin(query) -> <<"hstream.server.Query">>;
msg_name_to_fqbin(delete_query_request) -> <<"hstream.server.DeleteQueryRequest">>;
msg_name_to_fqbin(delete_query_response) -> <<"hstream.server.DeleteQueryResponse">>;
msg_name_to_fqbin(restart_query_request) -> <<"hstream.server.RestartQueryRequest">>;
msg_name_to_fqbin(restart_query_response) -> <<"hstream.server.RestartQueryResponse">>;
msg_name_to_fqbin(create_connector_request) -> <<"hstream.server.CreateConnectorRequest">>;
msg_name_to_fqbin(list_connectors_request) -> <<"hstream.server.ListConnectorsRequest">>;
msg_name_to_fqbin(list_connectors_response) -> <<"hstream.server.ListConnectorsResponse">>;
msg_name_to_fqbin(get_connector_request) -> <<"hstream.server.GetConnectorRequest">>;
msg_name_to_fqbin(connector) -> <<"hstream.server.Connector">>;
msg_name_to_fqbin(delete_connector_request) -> <<"hstream.server.DeleteConnectorRequest">>;
msg_name_to_fqbin(pause_connector_request) -> <<"hstream.server.PauseConnectorRequest">>;
msg_name_to_fqbin(resume_connector_request) -> <<"hstream.server.ResumeConnectorRequest">>;
msg_name_to_fqbin(get_view_request) -> <<"hstream.server.GetViewRequest">>;
msg_name_to_fqbin(delete_view_request) -> <<"hstream.server.DeleteViewRequest">>;
msg_name_to_fqbin(list_views_request) -> <<"hstream.server.ListViewsRequest">>;
msg_name_to_fqbin(list_views_response) -> <<"hstream.server.ListViewsResponse">>;
msg_name_to_fqbin(view) -> <<"hstream.server.View">>;
msg_name_to_fqbin(get_node_request) -> <<"hstream.server.GetNodeRequest">>;
msg_name_to_fqbin(list_nodes_request) -> <<"hstream.server.ListNodesRequest">>;
msg_name_to_fqbin(list_nodes_response) -> <<"hstream.server.ListNodesResponse">>;
msg_name_to_fqbin(node) -> <<"hstream.server.Node">>;
msg_name_to_fqbin(stats_interval_vals) -> <<"hstream.server.StatsIntervalVals">>;
msg_name_to_fqbin(stats_double_vals) -> <<"hstream.server.StatsDoubleVals">>;
msg_name_to_fqbin(admin_command_request) -> <<"hstream.server.AdminCommandRequest">>;
msg_name_to_fqbin(admin_command_response) -> <<"hstream.server.AdminCommandResponse">>;
msg_name_to_fqbin(per_stream_time_series_stats_request) ->
    <<"hstream.server.PerStreamTimeSeriesStatsRequest">>;
msg_name_to_fqbin(per_stream_time_series_stats_response) ->
    <<"hstream.server.PerStreamTimeSeriesStatsResponse">>;
msg_name_to_fqbin(per_stream_time_series_stats_all_response) ->
    <<"hstream.server.PerStreamTimeSeriesStatsAllResponse">>;
msg_name_to_fqbin(per_stream_time_series_stats_all_request) ->
    <<"hstream.server.PerStreamTimeSeriesStatsAllRequest">>;
msg_name_to_fqbin(describe_cluster_response) -> <<"hstream.server.DescribeClusterResponse">>;
msg_name_to_fqbin(server_node) -> <<"hstream.server.ServerNode">>;
msg_name_to_fqbin(server_node_status) -> <<"hstream.server.ServerNodeStatus">>;
msg_name_to_fqbin(lookup_shard_request) -> <<"hstream.server.LookupShardRequest">>;
msg_name_to_fqbin(lookup_shard_response) -> <<"hstream.server.LookupShardResponse">>;
msg_name_to_fqbin(lookup_subscription_request) ->
    <<"hstream.server.LookupSubscriptionRequest">>;
msg_name_to_fqbin(lookup_subscription_response) ->
    <<"hstream.server.LookupSubscriptionResponse">>;
msg_name_to_fqbin(lookup_connector_request) -> <<"hstream.server.LookupConnectorRequest">>;
msg_name_to_fqbin(lookup_connector_response) -> <<"hstream.server.LookupConnectorResponse">>;
msg_name_to_fqbin(lookup_shard_reader_request) ->
    <<"hstream.server.LookupShardReaderRequest">>;
msg_name_to_fqbin(lookup_shard_reader_response) ->
    <<"hstream.server.LookupShardReaderResponse">>;
msg_name_to_fqbin(struct) -> <<"google.protobuf.Struct">>;
msg_name_to_fqbin(value) -> <<"google.protobuf.Value">>;
msg_name_to_fqbin(list_value) -> <<"google.protobuf.ListValue">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(empty) -> <<"google.protobuf.Empty">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"hstream.server.SpecialOffset">>) ->
    'hstream.server.SpecialOffset';
fqbin_to_enum_name(<<"hstream.server.HStreamRecordHeader.Flag">>) ->
    'h_stream_record_header.Flag';
fqbin_to_enum_name(<<"hstream.server.TaskStatusPB">>) ->
    'hstream.server.TaskStatusPB';
fqbin_to_enum_name(<<"hstream.server.NodeState">>) ->
    'hstream.server.NodeState';
fqbin_to_enum_name(<<"google.protobuf.NullValue">>) ->
    'google.protobuf.NullValue';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('hstream.server.SpecialOffset') ->
    <<"hstream.server.SpecialOffset">>;
enum_name_to_fqbin('h_stream_record_header.Flag') ->
    <<"hstream.server.HStreamRecordHeader.Flag">>;
enum_name_to_fqbin('hstream.server.TaskStatusPB') ->
    <<"hstream.server.TaskStatusPB">>;
enum_name_to_fqbin('hstream.server.NodeState') ->
    <<"hstream.server.NodeState">>;
enum_name_to_fqbin('google.protobuf.NullValue') ->
    <<"google.protobuf.NullValue">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'hstream.server'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "hstreamdb_api.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["hstreamdb_api.proto",
     "struct.proto",
     "timestamp.proto",
     "empty.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["hstreamdb_api", "struct", "timestamp", "empty"].


get_msg_containment("hstreamdb_api") ->
    [admin_command_request,
     admin_command_response,
     append_request,
     append_response,
     check_subscription_exist_request,
     check_subscription_exist_response,
     command_connect,
     command_connected,
     command_push_query,
     command_query,
     command_query_response,
     command_stream_task,
     command_stream_task_response,
     connector,
     create_connector_request,
     create_shard_reader_request,
     create_shard_reader_response,
     delete_connector_request,
     delete_query_request,
     delete_query_response,
     delete_shard_reader_request,
     delete_stream_request,
     delete_subscription_request,
     delete_view_request,
     describe_cluster_response,
     echo_request,
     echo_response,
     get_connector_request,
     get_node_request,
     get_query_request,
     get_view_request,
     h_stream_record,
     h_stream_record_batch,
     h_stream_record_header,
     list_connectors_request,
     list_connectors_response,
     list_nodes_request,
     list_nodes_response,
     list_queries_request,
     list_queries_response,
     list_shards_request,
     list_shards_response,
     list_streams_request,
     list_streams_response,
     list_subscriptions_request,
     list_subscriptions_response,
     list_views_request,
     list_views_response,
     lookup_connector_request,
     lookup_connector_response,
     lookup_shard_reader_request,
     lookup_shard_reader_response,
     lookup_shard_request,
     lookup_shard_response,
     lookup_subscription_request,
     lookup_subscription_response,
     node,
     pause_connector_request,
     per_stream_time_series_stats_all_request,
     per_stream_time_series_stats_all_response,
     per_stream_time_series_stats_request,
     per_stream_time_series_stats_response,
     query,
     read_shard_request,
     read_shard_response,
     received_record,
     record_id,
     restart_query_request,
     restart_query_response,
     resume_connector_request,
     server_node,
     server_node_status,
     shard,
     shard_offset,
     stats_double_vals,
     stats_interval_vals,
     stream,
     streaming_fetch_request,
     streaming_fetch_response,
     subscription,
     terminate_queries_request,
     terminate_queries_response,
     view];
get_msg_containment("struct") ->
    [list_value, struct, value];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment("empty") -> [empty];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("hstreamdb_api") ->
    'hstream.server';
get_pkg_containment("struct") -> 'google.protobuf';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("empty") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("hstreamdb_api") ->
    ['hstream.server.HStreamApi'];
get_service_containment("struct") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("empty") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("hstreamdb_api") ->
    [{'hstream.server.HStreamApi', 'Echo'},
     {'hstream.server.HStreamApi', 'CreateStream'},
     {'hstream.server.HStreamApi', 'DeleteStream'},
     {'hstream.server.HStreamApi', 'ListStreams'},
     {'hstream.server.HStreamApi', 'LookupShard'},
     {'hstream.server.HStreamApi', 'Append'},
     {'hstream.server.HStreamApi', 'ListShards'},
     {'hstream.server.HStreamApi', 'CreateShardReader'},
     {'hstream.server.HStreamApi', 'LookupShardReader'},
     {'hstream.server.HStreamApi', 'ReadShard'},
     {'hstream.server.HStreamApi', 'DeleteShardReader'},
     {'hstream.server.HStreamApi', 'CreateSubscription'},
     {'hstream.server.HStreamApi', 'ListSubscriptions'},
     {'hstream.server.HStreamApi', 'CheckSubscriptionExist'},
     {'hstream.server.HStreamApi', 'DeleteSubscription'},
     {'hstream.server.HStreamApi', 'LookupSubscription'},
     {'hstream.server.HStreamApi', 'StreamingFetch'},
     {'hstream.server.HStreamApi', 'DescribeCluster'},
     {'hstream.server.HStreamApi', 'SendAdminCommand'},
     {'hstream.server.HStreamApi',
      'PerStreamTimeSeriesStats'},
     {'hstream.server.HStreamApi',
      'PerStreamTimeSeriesStatsAll'},
     {'hstream.server.HStreamApi', 'ExecutePushQuery'},
     {'hstream.server.HStreamApi', 'ExecuteQuery'},
     {'hstream.server.HStreamApi', 'ListQueries'},
     {'hstream.server.HStreamApi', 'GetQuery'},
     {'hstream.server.HStreamApi', 'TerminateQueries'},
     {'hstream.server.HStreamApi', 'DeleteQuery'},
     {'hstream.server.HStreamApi', 'RestartQuery'},
     {'hstream.server.HStreamApi', 'CreateConnector'},
     {'hstream.server.HStreamApi', 'ListConnectors'},
     {'hstream.server.HStreamApi', 'GetConnector'},
     {'hstream.server.HStreamApi', 'DeleteConnector'},
     {'hstream.server.HStreamApi', 'PauseConnector'},
     {'hstream.server.HStreamApi', 'ResumeConnector'},
     {'hstream.server.HStreamApi', 'LookupConnector'},
     {'hstream.server.HStreamApi', 'ListViews'},
     {'hstream.server.HStreamApi', 'GetView'},
     {'hstream.server.HStreamApi', 'DeleteView'},
     {'hstream.server.HStreamApi', 'ListNodes'},
     {'hstream.server.HStreamApi', 'GetNode'}];
get_rpc_containment("struct") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment("empty") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("hstreamdb_api") ->
    ['h_stream_record_header.Flag',
     'hstream.server.NodeState',
     'hstream.server.SpecialOffset',
     'hstream.server.TaskStatusPB'];
get_enum_containment("struct") ->
    ['google.protobuf.NullValue'];
get_enum_containment("timestamp") -> [];
get_enum_containment("empty") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"hstream.server.HStreamRecordHeader">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Connector">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.StatsIntervalVals">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.StatsDoubleVals">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ServerNodeStatus">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Struct">>) -> "struct";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.TerminateQueriesRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.StreamingFetchRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ShardOffset">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Shard">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ResumeConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.RestartQueryRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.RecordId">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ReceivedRecord">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ReadShardRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.PerStreamTimeSeriesStatsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.PerStreamTimeSeriesStatsAllRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.PauseConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupSubscriptionRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupShardRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupShardReaderRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListViewsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListSubscriptionsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListStreamsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListShardsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListQueriesRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListNodesRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListConnectorsRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.HStreamRecord">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.GetViewRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.GetQueryRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.GetNodeRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.GetConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.EchoRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteViewRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteSubscriptionRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteStreamRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteShardReaderRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteQueryRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CreateShardReaderRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CreateConnectorRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandConnected">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandConnect">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CheckSubscriptionExistRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.AppendRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.AdminCommandRequest">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Value">>) -> "struct";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.ListValue">>) -> "struct";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.TerminateQueriesResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.StreamingFetchResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ServerNode">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.RestartQueryResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ReadShardResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.PerStreamTimeSeriesStatsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.PerStreamTimeSeriesStatsAllResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Node">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupSubscriptionResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupShardResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupShardReaderResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.LookupConnectorResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListViewsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListSubscriptionsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListStreamsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListShardsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListQueriesResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListNodesResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.ListConnectorsResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.EchoResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DescribeClusterResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.DeleteQueryResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CreateShardReaderResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandStreamTaskResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandQueryResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CheckSubscriptionExistResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.AppendResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.AdminCommandResponse">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.View">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.HStreamRecordBatch">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Empty">>) -> "empty";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Query">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandQuery">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandPushQuery">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.CommandStreamTask">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Stream">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"hstream.server.Subscription">>) ->
    "hstreamdb_api";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"hstream.server.HStreamApi">>) ->
    "hstreamdb_api";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"hstream.server.TaskStatusPB">>) ->
    "hstreamdb_api";
get_proto_by_enum_name_as_fqbin(<<"hstream.server.SpecialOffset">>) ->
    "hstreamdb_api";
get_proto_by_enum_name_as_fqbin(<<"google.protobuf.NullValue">>) -> "struct";
get_proto_by_enum_name_as_fqbin(<<"hstream.server.NodeState">>) ->
    "hstreamdb_api";
get_proto_by_enum_name_as_fqbin(<<"hstream.server.HStreamRecordHeader.Flag">>) ->
    "hstreamdb_api";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"hstream.server">>) ->
    ["hstreamdb_api"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["empty", "struct", "timestamp"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
